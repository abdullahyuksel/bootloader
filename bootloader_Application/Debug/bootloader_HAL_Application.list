
bootloader_HAL_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08001ce8  08001ce8  00011ce8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e2c  08001e2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e34  08001e34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e34  08001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000bc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009458  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175a  00000000  00000000  000294f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00005633  00000000  00000000  0002ac52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000548  00000000  00000000  00030288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006e8  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000201f3  00000000  00000000  00030eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009f13  00000000  00000000  000510ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2a67  00000000  00000000  0005afbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0011da25  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000117c  00000000  00000000  0011da78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001cd0 	.word	0x08001cd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08001cd0 	.word	0x08001cd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <printMessages>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printMessages(char *format, ...)
{
 8000584:	b40f      	push	{r0, r1, r2, r3}
 8000586:	b500      	push	{lr}
 8000588:	b09b      	sub	sp, #108	; 0x6c
 800058a:	aa1c      	add	r2, sp, #112	; 0x70
	char comingMessage[100];

	va_list vaList;
	va_start(vaList, format);
	vsprintf(comingMessage, format, vaList);
 800058c:	a801      	add	r0, sp, #4
{
 800058e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(vaList, format);
 8000592:	9200      	str	r2, [sp, #0]
	vsprintf(comingMessage, format, vaList);
 8000594:	f000 ff44 	bl	8001420 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)comingMessage, strlen(comingMessage), 100);
 8000598:	a801      	add	r0, sp, #4
 800059a:	f7ff fe19 	bl	80001d0 <strlen>
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	b282      	uxth	r2, r0
 80005a2:	a901      	add	r1, sp, #4
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <printMessages+0x30>)
 80005a6:	f000 fe9d 	bl	80012e4 <HAL_UART_Transmit>
	va_end(vaList);
}
 80005aa:	b01b      	add	sp, #108	; 0x6c
 80005ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80005b0:	b004      	add	sp, #16
 80005b2:	4770      	bx	lr
 80005b4:	2000008c 	.word	0x2000008c

080005b8 <bootloader_jump_to_user_app>:
void bootloader_uart_data_read (void)
{

}
void bootloader_jump_to_user_app (void)
{
 80005b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	//1. Sıfırlama işleyicisinin adresini tutan bir fonksiyon göstericisi
	void (*bootloader_application_reset_handler)(void);
	printMessages("BL DEBUG MSG: Called bootloader_jump_to_user_application() \n");

	//3. MSP değerini taban adresten çekip applicatiom başlangıcına yaz
	uint32_t mspValue = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;
 80005ba:	4c0f      	ldr	r4, [pc, #60]	; (80005f8 <bootloader_jump_to_user_app+0x40>)
	printMessages("BL DEBUG MSG: Called bootloader_jump_to_user_application() \n");
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <bootloader_jump_to_user_app+0x44>)
 80005be:	f7ff ffe1 	bl	8000584 <printMessages>
	uint32_t mspValue = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;
 80005c2:	6825      	ldr	r5, [r4, #0]
	printMessages("BL DEBUG MSG: MSP Value: %#x \n", mspValue);
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <bootloader_jump_to_user_app+0x48>)
 80005c6:	4629      	mov	r1, r5
 80005c8:	f7ff ffdc 	bl	8000584 <printMessages>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005cc:	f385 8808 	msr	MSP, r5
	__set_MSP(mspValue);

	//2. Reset Handler değerini taban adresten çekip applicatiom başlangıcına yaz
	//reset handler adresi msp değerinin adresinden 4 byte sonrasındadır.
	uint32_t resetValue = *(volatile uint32_t*) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 80005d0:	6864      	ldr	r4, [r4, #4]
	printMessages("BL DEBUG MSG: Reset Value: %#x \n", resetValue);
 80005d2:	480c      	ldr	r0, [pc, #48]	; (8000604 <bootloader_jump_to_user_app+0x4c>)
 80005d4:	4621      	mov	r1, r4
 80005d6:	f7ff ffd5 	bl	8000584 <printMessages>

	//5. Reset Handler ile bir işlev başlat
	bootloader_application_reset_handler = (void*) resetValue;

	//6. Reset Handler çağır ve kullanıcı uygulamasına atla
	bootloader_application_reset_handler();
 80005da:	47a0      	blx	r4

	//7. system clock başlat.
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <bootloader_jump_to_user_app+0x50>)
 80005e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005e8:	645a      	str	r2, [r3, #68]	; 0x44
 80005ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	9b01      	ldr	r3, [sp, #4]
}
 80005f4:	b003      	add	sp, #12
 80005f6:	bd30      	pop	{r4, r5, pc}
 80005f8:	08008000 	.word	0x08008000
 80005fc:	08001ce8 	.word	0x08001ce8
 8000600:	08001d25 	.word	0x08001d25
 8000604:	08001d44 	.word	0x08001d44
 8000608:	40023800 	.word	0x40023800

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b500      	push	{lr}
 800060e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000610:	222c      	movs	r2, #44	; 0x2c
 8000612:	2100      	movs	r1, #0
 8000614:	a809      	add	r0, sp, #36	; 0x24
 8000616:	f000 fee5 	bl	80013e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061a:	2214      	movs	r2, #20
 800061c:	2100      	movs	r1, #0
 800061e:	a803      	add	r0, sp, #12
 8000620:	f000 fee0 	bl	80013e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	4a19      	ldr	r2, [pc, #100]	; (800068c <SystemClock_Config+0x80>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800062c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000630:	6411      	str	r1, [r2, #64]	; 0x40
 8000632:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000634:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <SystemClock_Config+0x84>)
 800063e:	9302      	str	r3, [sp, #8]
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000646:	6011      	str	r1, [r2, #0]
 8000648:	6812      	ldr	r2, [r2, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064a:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000650:	9202      	str	r2, [sp, #8]
 8000652:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2202      	movs	r2, #2
 8000656:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2001      	movs	r0, #1
 800065a:	2210      	movs	r2, #16
 800065c:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	a808      	add	r0, sp, #32
 8000662:	f000 fae3 	bl	8000c2c <HAL_RCC_OscConfig>
 8000666:	4601      	mov	r1, r0
 8000668:	b108      	cbz	r0, 800066e <SystemClock_Config+0x62>
  __ASM volatile ("cpsid i" : : : "memory");
 800066a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000670:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067a:	a803      	add	r0, sp, #12
 800067c:	f000 fcb4 	bl	8000fe8 <HAL_RCC_ClockConfig>
 8000680:	b108      	cbz	r0, 8000686 <SystemClock_Config+0x7a>
 8000682:	b672      	cpsid	i
  while (1)
 8000684:	e7fe      	b.n	8000684 <SystemClock_Config+0x78>
}
 8000686:	b015      	add	sp, #84	; 0x54
 8000688:	f85d fb04 	ldr.w	pc, [sp], #4
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <main>:
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
  HAL_Init();
 8000698:	f000 f964 	bl	8000964 <HAL_Init>
  SystemClock_Config();
 800069c:	f7ff ffb6 	bl	800060c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	2210      	movs	r2, #16
 80006a2:	2100      	movs	r1, #0
 80006a4:	eb0d 0002 	add.w	r0, sp, r2
 80006a8:	f000 fe9c 	bl	80013e4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	2400      	movs	r4, #0
 80006ae:	4b26      	ldr	r3, [pc, #152]	; (8000748 <main+0xb4>)
 80006b0:	9401      	str	r4, [sp, #4]
 80006b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	4825      	ldr	r0, [pc, #148]	; (800074c <main+0xb8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	f042 0201 	orr.w	r2, r2, #1
 80006ba:	631a      	str	r2, [r3, #48]	; 0x30
 80006bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006be:	f002 0201 	and.w	r2, r2, #1
 80006c2:	9201      	str	r2, [sp, #4]
 80006c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	9402      	str	r4, [sp, #8]
 80006c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ca:	f042 0204 	orr.w	r2, r2, #4
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006da:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006dc:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006de:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f000 f9c4 	bl	8000a6c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80006e4:	481a      	ldr	r0, [pc, #104]	; (8000750 <main+0xbc>)
  huart2.Init.BaudRate = 115200;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <main+0xc0>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e8:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 80006ea:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ee:	260c      	movs	r6, #12
  huart2.Init.BaudRate = 115200;
 80006f0:	e9c0 3700 	strd	r3, r7, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f8:	e9c0 6405 	strd	r6, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	f000 fdc3 	bl	8001288 <HAL_UART_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	b108      	cbz	r0, 800070a <main+0x76>
 8000706:	b672      	cpsid	i
  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0x74>
  huart3.Instance = USART3;
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <main+0xc4>)
 800070c:	4a13      	ldr	r2, [pc, #76]	; (800075c <main+0xc8>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 800070e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8000712:	e9c0 2700 	strd	r2, r7, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000716:	e9c0 3604 	strd	r3, r6, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800071a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071e:	f000 fdb3 	bl	8001288 <HAL_UART_Init>
 8000722:	b108      	cbz	r0, 8000728 <main+0x94>
 8000724:	b672      	cpsid	i
  while (1)
 8000726:	e7fe      	b.n	8000726 <main+0x92>
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <main+0xb8>)
 800072a:	4629      	mov	r1, r5
 800072c:	f000 fa78 	bl	8000c20 <HAL_GPIO_ReadPin>
 8000730:	2801      	cmp	r0, #1
 8000732:	d103      	bne.n	800073c <main+0xa8>
	  printMessages("BL DEBUG MESG: Button is pressed and going to bootloader\r\n");
 8000734:	480a      	ldr	r0, [pc, #40]	; (8000760 <main+0xcc>)
 8000736:	f7ff ff25 	bl	8000584 <printMessages>
  while (1)
 800073a:	e7fe      	b.n	800073a <main+0xa6>
	  printMessages("BL DEBUG MESG: Button is not pressed and executing user app\r\n");
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <main+0xd0>)
 800073e:	f7ff ff21 	bl	8000584 <printMessages>
	  bootloader_jump_to_user_app();
 8000742:	f7ff ff39 	bl	80005b8 <bootloader_jump_to_user_app>
 8000746:	e7f8      	b.n	800073a <main+0xa6>
 8000748:	40023800 	.word	0x40023800
 800074c:	40020000 	.word	0x40020000
 8000750:	2000008c 	.word	0x2000008c
 8000754:	40004400 	.word	0x40004400
 8000758:	200000d0 	.word	0x200000d0
 800075c:	40004800 	.word	0x40004800
 8000760:	08001d65 	.word	0x08001d65
 8000764:	08001da0 	.word	0x08001da0

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x34>)
 800076c:	2100      	movs	r1, #0
 800076e:	9100      	str	r1, [sp, #0]
 8000770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000776:	645a      	str	r2, [r3, #68]	; 0x44
 8000778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800077a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800077e:	9200      	str	r2, [sp, #0]
 8000780:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	9101      	str	r1, [sp, #4]
 8000784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000786:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800078a:	641a      	str	r2, [r3, #64]	; 0x40
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	b002      	add	sp, #8
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	2214      	movs	r2, #20
{
 80007a4:	b08a      	sub	sp, #40	; 0x28
 80007a6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	2100      	movs	r1, #0
 80007aa:	eb0d 0002 	add.w	r0, sp, r2
 80007ae:	f000 fe19 	bl	80013e4 <memset>
  if(huart->Instance==USART2)
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	4a25      	ldr	r2, [pc, #148]	; (800084c <HAL_UART_MspInit+0xac>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d123      	bne.n	8000802 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <HAL_UART_MspInit+0xb0>)
 80007bc:	2100      	movs	r1, #0
 80007be:	9101      	str	r1, [sp, #4]
 80007c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80007c6:	641a      	str	r2, [r3, #64]	; 0x40
 80007c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80007ce:	9201      	str	r2, [sp, #4]
 80007d0:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	9102      	str	r1, [sp, #8]
 80007d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d6:	f042 0201 	orr.w	r2, r2, #1
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	9302      	str	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	200c      	movs	r0, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ee:	2403      	movs	r4, #3
 80007f0:	2307      	movs	r3, #7
 80007f2:	e9cd 4308 	strd	r4, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	4817      	ldr	r0, [pc, #92]	; (8000854 <HAL_UART_MspInit+0xb4>)
 80007f8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fa:	f000 f937 	bl	8000a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007fe:	b00a      	add	sp, #40	; 0x28
 8000800:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <HAL_UART_MspInit+0xb8>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d1fa      	bne.n	80007fe <HAL_UART_MspInit+0x5e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_UART_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800080c:	2100      	movs	r1, #0
 800080e:	9103      	str	r1, [sp, #12]
 8000810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000812:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000816:	641a      	str	r2, [r3, #64]	; 0x40
 8000818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800081a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800081e:	9203      	str	r2, [sp, #12]
 8000820:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	9104      	str	r1, [sp, #16]
 8000824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000826:	f042 0204 	orr.w	r2, r2, #4
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	9304      	str	r3, [sp, #16]
 8000834:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800083a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800083c:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000842:	2307      	movs	r3, #7
 8000844:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	a905      	add	r1, sp, #20
 800084a:	e7d6      	b.n	80007fa <HAL_UART_MspInit+0x5a>
 800084c:	40004400 	.word	0x40004400
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000
 8000858:	40004800 	.word	0x40004800
 800085c:	40020800 	.word	0x40020800

08000860 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler>

08000862 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler>

08000864 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler>

08000866 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler>

08000868 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler>

0800086a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	4770      	bx	lr

0800086c <DebugMon_Handler>:
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:
 800086e:	4770      	bx	lr

08000870 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 b892 	b.w	8000998 <HAL_IncTick>

08000874 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000874:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <_sbrk+0x30>)
 8000876:	6811      	ldr	r1, [r2, #0]
{
 8000878:	b510      	push	{r4, lr}
 800087a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800087c:	b909      	cbnz	r1, 8000882 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800087e:	490a      	ldr	r1, [pc, #40]	; (80008a8 <_sbrk+0x34>)
 8000880:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000882:	6810      	ldr	r0, [r2, #0]
 8000884:	4909      	ldr	r1, [pc, #36]	; (80008ac <_sbrk+0x38>)
 8000886:	4c0a      	ldr	r4, [pc, #40]	; (80008b0 <_sbrk+0x3c>)
 8000888:	4403      	add	r3, r0
 800088a:	1b09      	subs	r1, r1, r4
 800088c:	428b      	cmp	r3, r1
 800088e:	d906      	bls.n	800089e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000890:	f000 fd7e 	bl	8001390 <__errno>
 8000894:	230c      	movs	r3, #12
 8000896:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000898:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800089c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800089e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80008a0:	e7fc      	b.n	800089c <_sbrk+0x28>
 80008a2:	bf00      	nop
 80008a4:	20000114 	.word	0x20000114
 80008a8:	20000130 	.word	0x20000130
 80008ac:	20020000 	.word	0x20020000
 80008b0:	00000400 	.word	0x00000400

080008b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4a03      	ldr	r2, [pc, #12]	; (80008c4 <SystemInit+0x10>)
 80008b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80008ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ce:	490e      	ldr	r1, [pc, #56]	; (8000908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008e4:	4c0b      	ldr	r4, [pc, #44]	; (8000914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f2:	f7ff ffdf 	bl	80008b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008f6:	f000 fd51 	bl	800139c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fa:	f7ff fecb 	bl	8000694 <main>
  bx  lr    
 80008fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800090c:	08001e3c 	.word	0x08001e3c
  ldr r2, =_sbss
 8000910:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000914:	2000012c 	.word	0x2000012c

08000918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC_IRQHandler>
	...

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_InitTick+0x3c>)
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_InitTick+0x40>)
{
 8000922:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	7818      	ldrb	r0, [r3, #0]
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	fbb3 f3f0 	udiv	r3, r3, r0
 800092e:	6810      	ldr	r0, [r2, #0]
 8000930:	fbb0 f0f3 	udiv	r0, r0, r3
 8000934:	f000 f886 	bl	8000a44 <HAL_SYSTICK_Config>
 8000938:	4604      	mov	r4, r0
 800093a:	b958      	cbnz	r0, 8000954 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093c:	2d0f      	cmp	r5, #15
 800093e:	d809      	bhi.n	8000954 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	4602      	mov	r2, r0
 8000942:	4629      	mov	r1, r5
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f84a 	bl	80009e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <HAL_InitTick+0x44>)
 800094e:	4620      	mov	r0, r4
 8000950:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000952:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000954:	2001      	movs	r0, #1
 8000956:	e7fc      	b.n	8000952 <HAL_InitTick+0x36>
 8000958:	20000000 	.word	0x20000000
 800095c:	20000004 	.word	0x20000004
 8000960:	20000008 	.word	0x20000008

08000964 <HAL_Init>:
{
 8000964:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_Init+0x30>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800096e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000976:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800097e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f81b 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	200f      	movs	r0, #15
 8000988:	f7ff ffc8 	bl	800091c <HAL_InitTick>
  HAL_MspInit();
 800098c:	f7ff feec 	bl	8000768 <HAL_MspInit>
}
 8000990:	2000      	movs	r0, #0
 8000992:	bd08      	pop	{r3, pc}
 8000994:	40023c00 	.word	0x40023c00

08000998 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <HAL_IncTick+0x10>)
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_IncTick+0x14>)
 800099c:	6811      	ldr	r1, [r2, #0]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	440b      	add	r3, r1
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000118 	.word	0x20000118
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <HAL_GetTick+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000118 	.word	0x20000118

080009bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4907      	ldr	r1, [pc, #28]	; (80009dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009be:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009cc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80009d8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b530      	push	{r4, r5, lr}
 80009e4:	68dc      	ldr	r4, [r3, #12]
 80009e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ea:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f0:	2d04      	cmp	r5, #4
 80009f2:	bf28      	it	cs
 80009f4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fc:	bf8c      	ite	hi
 80009fe:	3c03      	subhi	r4, #3
 8000a00:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a02:	fa03 f505 	lsl.w	r5, r3, r5
 8000a06:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0a:	40a3      	lsls	r3, r4
 8000a0c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000a12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	bfac      	ite	ge
 8000a1a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	4a08      	ldrlt	r2, [pc, #32]	; (8000a40 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	bfb8      	it	lt
 8000a26:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	bfaa      	itet	ge
 8000a2e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a38:	bd30      	pop	{r4, r5, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	e000ed14 	.word	0xe000ed14

08000a44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	3801      	subs	r0, #1
 8000a46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a4a:	d20b      	bcs.n	8000a64 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	21f0      	movs	r1, #240	; 0xf0
 8000a56:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a60:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a62:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a64:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a70:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8000c1c <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a74:	4a67      	ldr	r2, [pc, #412]	; (8000c14 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a76:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a78:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000a7a:	2401      	movs	r4, #1
 8000a7c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000a82:	43ac      	bics	r4, r5
 8000a84:	f040 80b1 	bne.w	8000bea <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a88:	684d      	ldr	r5, [r1, #4]
 8000a8a:	f005 0403 	and.w	r4, r5, #3
 8000a8e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a92:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a94:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a96:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a9a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a9c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aa0:	d834      	bhi.n	8000b0c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000aa2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aa4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aa8:	68cf      	ldr	r7, [r1, #12]
 8000aaa:	fa07 f708 	lsl.w	r7, r7, r8
 8000aae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000ab2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ab4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab6:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aba:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000abe:	409f      	lsls	r7, r3
 8000ac0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ac4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000ac6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ac8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000acc:	688f      	ldr	r7, [r1, #8]
 8000ace:	fa07 f708 	lsl.w	r7, r7, r8
 8000ad2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000ad8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ada:	d119      	bne.n	8000b10 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000adc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ae0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ae4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ae8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000af0:	f04f 0e0f 	mov.w	lr, #15
 8000af4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000af8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000afc:	690f      	ldr	r7, [r1, #16]
 8000afe:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b02:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000b06:	f8ca 7020 	str.w	r7, [sl, #32]
 8000b0a:	e001      	b.n	8000b10 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b0c:	2c03      	cmp	r4, #3
 8000b0e:	d1da      	bne.n	8000ac6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000b10:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b12:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b16:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b18:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b1a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000b1e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b20:	d063      	beq.n	8000bea <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	f04f 0a00 	mov.w	sl, #0
 8000b26:	f8cd a004 	str.w	sl, [sp, #4]
 8000b2a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b2e:	4c3a      	ldr	r4, [pc, #232]	; (8000c18 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b30:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b34:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000b38:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000b3c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000b40:	9601      	str	r6, [sp, #4]
 8000b42:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b44:	f023 0603 	bic.w	r6, r3, #3
 8000b48:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000b4c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b50:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b54:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b58:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b5c:	270f      	movs	r7, #15
 8000b5e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b62:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b64:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b68:	d046      	beq.n	8000bf8 <HAL_GPIO_Init+0x18c>
 8000b6a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b6e:	42a0      	cmp	r0, r4
 8000b70:	d044      	beq.n	8000bfc <HAL_GPIO_Init+0x190>
 8000b72:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b76:	42a0      	cmp	r0, r4
 8000b78:	d042      	beq.n	8000c00 <HAL_GPIO_Init+0x194>
 8000b7a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b7e:	42a0      	cmp	r0, r4
 8000b80:	d040      	beq.n	8000c04 <HAL_GPIO_Init+0x198>
 8000b82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b86:	42a0      	cmp	r0, r4
 8000b88:	d03e      	beq.n	8000c08 <HAL_GPIO_Init+0x19c>
 8000b8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b8e:	42a0      	cmp	r0, r4
 8000b90:	d03c      	beq.n	8000c0c <HAL_GPIO_Init+0x1a0>
 8000b92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b96:	42a0      	cmp	r0, r4
 8000b98:	d03a      	beq.n	8000c10 <HAL_GPIO_Init+0x1a4>
 8000b9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b9e:	42a0      	cmp	r0, r4
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2407      	moveq	r4, #7
 8000ba4:	2408      	movne	r4, #8
 8000ba6:	fa04 f40e 	lsl.w	r4, r4, lr
 8000baa:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bac:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8000bae:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bb0:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bb4:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000bb6:	bf54      	ite	pl
 8000bb8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bba:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000bbe:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000bc0:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bc2:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	bf54      	ite	pl
 8000bc6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bc8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000bcc:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000bce:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bd0:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000bd2:	bf54      	ite	pl
 8000bd4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bd6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000bda:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bdc:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bde:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000be0:	bf54      	ite	pl
 8000be2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000be4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000be8:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bea:	3301      	adds	r3, #1
 8000bec:	2b10      	cmp	r3, #16
 8000bee:	f47f af43 	bne.w	8000a78 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000bf2:	b003      	add	sp, #12
 8000bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bf8:	4654      	mov	r4, sl
 8000bfa:	e7d4      	b.n	8000ba6 <HAL_GPIO_Init+0x13a>
 8000bfc:	2401      	movs	r4, #1
 8000bfe:	e7d2      	b.n	8000ba6 <HAL_GPIO_Init+0x13a>
 8000c00:	2402      	movs	r4, #2
 8000c02:	e7d0      	b.n	8000ba6 <HAL_GPIO_Init+0x13a>
 8000c04:	2403      	movs	r4, #3
 8000c06:	e7ce      	b.n	8000ba6 <HAL_GPIO_Init+0x13a>
 8000c08:	2404      	movs	r4, #4
 8000c0a:	e7cc      	b.n	8000ba6 <HAL_GPIO_Init+0x13a>
 8000c0c:	2405      	movs	r4, #5
 8000c0e:	e7ca      	b.n	8000ba6 <HAL_GPIO_Init+0x13a>
 8000c10:	2406      	movs	r4, #6
 8000c12:	e7c8      	b.n	8000ba6 <HAL_GPIO_Init+0x13a>
 8000c14:	40013c00 	.word	0x40013c00
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c20:	6903      	ldr	r3, [r0, #16]
 8000c22:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c24:	bf14      	ite	ne
 8000c26:	2001      	movne	r0, #1
 8000c28:	2000      	moveq	r0, #0
 8000c2a:	4770      	bx	lr

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c30:	4604      	mov	r4, r0
 8000c32:	b340      	cbz	r0, 8000c86 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c34:	6803      	ldr	r3, [r0, #0]
 8000c36:	07dd      	lsls	r5, r3, #31
 8000c38:	d410      	bmi.n	8000c5c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	0798      	lsls	r0, r3, #30
 8000c3e:	d45e      	bmi.n	8000cfe <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	071a      	lsls	r2, r3, #28
 8000c44:	f100 80a0 	bmi.w	8000d88 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	075b      	lsls	r3, r3, #29
 8000c4c:	f100 80c0 	bmi.w	8000dd0 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c50:	69a0      	ldr	r0, [r4, #24]
 8000c52:	2800      	cmp	r0, #0
 8000c54:	f040 8128 	bne.w	8000ea8 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000c58:	2000      	movs	r0, #0
 8000c5a:	e02b      	b.n	8000cb4 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c5c:	4b8f      	ldr	r3, [pc, #572]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	f002 020c 	and.w	r2, r2, #12
 8000c64:	2a04      	cmp	r2, #4
 8000c66:	d007      	beq.n	8000c78 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c6e:	2a08      	cmp	r2, #8
 8000c70:	d10b      	bne.n	8000c8a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	0251      	lsls	r1, r2, #9
 8000c76:	d508      	bpl.n	8000c8a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c78:	4b88      	ldr	r3, [pc, #544]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	039a      	lsls	r2, r3, #14
 8000c7e:	d5dc      	bpl.n	8000c3a <HAL_RCC_OscConfig+0xe>
 8000c80:	6863      	ldr	r3, [r4, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1d9      	bne.n	8000c3a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
 8000c88:	e014      	b.n	8000cb4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8a:	6862      	ldr	r2, [r4, #4]
 8000c8c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000c90:	d113      	bne.n	8000cba <HAL_RCC_OscConfig+0x8e>
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fe89 	bl	80009b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	4e7f      	ldr	r6, [pc, #508]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000ca0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	6833      	ldr	r3, [r6, #0]
 8000ca4:	039b      	lsls	r3, r3, #14
 8000ca6:	d4c8      	bmi.n	8000c3a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca8:	f7ff fe82 	bl	80009b0 <HAL_GetTick>
 8000cac:	1b40      	subs	r0, r0, r5
 8000cae:	2864      	cmp	r0, #100	; 0x64
 8000cb0:	d9f7      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000cb2:	2003      	movs	r0, #3
}
 8000cb4:	b002      	add	sp, #8
 8000cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cba:	4d78      	ldr	r5, [pc, #480]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cbc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	d107      	bne.n	8000cd4 <HAL_RCC_OscConfig+0xa8>
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	602b      	str	r3, [r5, #0]
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cd2:	e7e2      	b.n	8000c9a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd8:	602b      	str	r3, [r5, #0]
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	d1d9      	bne.n	8000c9a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8000ce6:	f7ff fe63 	bl	80009b0 <HAL_GetTick>
 8000cea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	039f      	lsls	r7, r3, #14
 8000cf0:	d5a3      	bpl.n	8000c3a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf2:	f7ff fe5d 	bl	80009b0 <HAL_GetTick>
 8000cf6:	1b80      	subs	r0, r0, r6
 8000cf8:	2864      	cmp	r0, #100	; 0x64
 8000cfa:	d9f7      	bls.n	8000cec <HAL_RCC_OscConfig+0xc0>
 8000cfc:	e7d9      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cfe:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	f012 0f0c 	tst.w	r2, #12
 8000d06:	d007      	beq.n	8000d18 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d0e:	2a08      	cmp	r2, #8
 8000d10:	d111      	bne.n	8000d36 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	025e      	lsls	r6, r3, #9
 8000d16:	d40e      	bmi.n	8000d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d18:	4a60      	ldr	r2, [pc, #384]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d1a:	6813      	ldr	r3, [r2, #0]
 8000d1c:	079d      	lsls	r5, r3, #30
 8000d1e:	d502      	bpl.n	8000d26 <HAL_RCC_OscConfig+0xfa>
 8000d20:	68e3      	ldr	r3, [r4, #12]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d1af      	bne.n	8000c86 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d26:	6813      	ldr	r3, [r2, #0]
 8000d28:	6921      	ldr	r1, [r4, #16]
 8000d2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d32:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d34:	e784      	b.n	8000c40 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d36:	68e2      	ldr	r2, [r4, #12]
 8000d38:	4b59      	ldr	r3, [pc, #356]	; (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000d3a:	b1b2      	cbz	r2, 8000d6a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d40:	f7ff fe36 	bl	80009b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	4d55      	ldr	r5, [pc, #340]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000d46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	0798      	lsls	r0, r3, #30
 8000d4c:	d507      	bpl.n	8000d5e <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4e:	682b      	ldr	r3, [r5, #0]
 8000d50:	6922      	ldr	r2, [r4, #16]
 8000d52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d5a:	602b      	str	r3, [r5, #0]
 8000d5c:	e770      	b.n	8000c40 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fe27 	bl	80009b0 <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	2802      	cmp	r0, #2
 8000d66:	d9ef      	bls.n	8000d48 <HAL_RCC_OscConfig+0x11c>
 8000d68:	e7a3      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fe20 	bl	80009b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d70:	4e4a      	ldr	r6, [pc, #296]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000d72:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d74:	6833      	ldr	r3, [r6, #0]
 8000d76:	0799      	lsls	r1, r3, #30
 8000d78:	f57f af62 	bpl.w	8000c40 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fe18 	bl	80009b0 <HAL_GetTick>
 8000d80:	1b40      	subs	r0, r0, r5
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d9f6      	bls.n	8000d74 <HAL_RCC_OscConfig+0x148>
 8000d86:	e794      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d88:	6962      	ldr	r2, [r4, #20]
 8000d8a:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000d8c:	b182      	cbz	r2, 8000db0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000d94:	f7ff fe0c 	bl	80009b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d98:	4e40      	ldr	r6, [pc, #256]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000d9a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000d9e:	079f      	lsls	r7, r3, #30
 8000da0:	f53f af52 	bmi.w	8000c48 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da4:	f7ff fe04 	bl	80009b0 <HAL_GetTick>
 8000da8:	1b40      	subs	r0, r0, r5
 8000daa:	2802      	cmp	r0, #2
 8000dac:	d9f6      	bls.n	8000d9c <HAL_RCC_OscConfig+0x170>
 8000dae:	e780      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000db0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000db4:	f7ff fdfc 	bl	80009b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db8:	4e38      	ldr	r6, [pc, #224]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000dba:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dbc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000dbe:	0798      	lsls	r0, r3, #30
 8000dc0:	f57f af42 	bpl.w	8000c48 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fdf4 	bl	80009b0 <HAL_GetTick>
 8000dc8:	1b40      	subs	r0, r0, r5
 8000dca:	2802      	cmp	r0, #2
 8000dcc:	d9f6      	bls.n	8000dbc <HAL_RCC_OscConfig+0x190>
 8000dce:	e770      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dd0:	4b32      	ldr	r3, [pc, #200]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000dd8:	d128      	bne.n	8000e2c <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	9201      	str	r2, [sp, #4]
 8000ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dee:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df0:	4d2c      	ldr	r5, [pc, #176]	; (8000ea4 <HAL_RCC_OscConfig+0x278>)
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	05d9      	lsls	r1, r3, #23
 8000df6:	d51b      	bpl.n	8000e30 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df8:	68a3      	ldr	r3, [r4, #8]
 8000dfa:	4d28      	ldr	r5, [pc, #160]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d127      	bne.n	8000e50 <HAL_RCC_OscConfig+0x224>
 8000e00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e08:	f7ff fdd2 	bl	80009b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0c:	4e23      	ldr	r6, [pc, #140]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000e0e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e10:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e14:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000e16:	079b      	lsls	r3, r3, #30
 8000e18:	d539      	bpl.n	8000e8e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	f43f af18 	beq.w	8000c50 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e20:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	e711      	b.n	8000c50 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000e2c:	2700      	movs	r7, #0
 8000e2e:	e7df      	b.n	8000df0 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e38:	f7ff fdba 	bl	80009b0 <HAL_GetTick>
 8000e3c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3e:	682b      	ldr	r3, [r5, #0]
 8000e40:	05da      	lsls	r2, r3, #23
 8000e42:	d4d9      	bmi.n	8000df8 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e44:	f7ff fdb4 	bl	80009b0 <HAL_GetTick>
 8000e48:	1b80      	subs	r0, r0, r6
 8000e4a:	2802      	cmp	r0, #2
 8000e4c:	d9f7      	bls.n	8000e3e <HAL_RCC_OscConfig+0x212>
 8000e4e:	e730      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d104      	bne.n	8000e5e <HAL_RCC_OscConfig+0x232>
 8000e54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	672b      	str	r3, [r5, #112]	; 0x70
 8000e5c:	e7d0      	b.n	8000e00 <HAL_RCC_OscConfig+0x1d4>
 8000e5e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e60:	f022 0201 	bic.w	r2, r2, #1
 8000e64:	672a      	str	r2, [r5, #112]	; 0x70
 8000e66:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e68:	f022 0204 	bic.w	r2, r2, #4
 8000e6c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1ca      	bne.n	8000e08 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8000e72:	f7ff fd9d 	bl	80009b0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e76:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e7a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e7e:	0798      	lsls	r0, r3, #30
 8000e80:	d5cb      	bpl.n	8000e1a <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fd95 	bl	80009b0 <HAL_GetTick>
 8000e86:	1b80      	subs	r0, r0, r6
 8000e88:	4540      	cmp	r0, r8
 8000e8a:	d9f7      	bls.n	8000e7c <HAL_RCC_OscConfig+0x250>
 8000e8c:	e711      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fd8f 	bl	80009b0 <HAL_GetTick>
 8000e92:	1b40      	subs	r0, r0, r5
 8000e94:	4540      	cmp	r0, r8
 8000e96:	d9bd      	bls.n	8000e14 <HAL_RCC_OscConfig+0x1e8>
 8000e98:	e70b      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	42470000 	.word	0x42470000
 8000ea4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ea8:	4d36      	ldr	r5, [pc, #216]	; (8000f84 <HAL_RCC_OscConfig+0x358>)
 8000eaa:	68ab      	ldr	r3, [r5, #8]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d03d      	beq.n	8000f30 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb4:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <HAL_RCC_OscConfig+0x35c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000eba:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ebc:	d12b      	bne.n	8000f16 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fd77 	bl	80009b0 <HAL_GetTick>
 8000ec2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	0199      	lsls	r1, r3, #6
 8000ec8:	d41f      	bmi.n	8000f0a <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eca:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ed2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ed6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ed8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000edc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ede:	0852      	lsrs	r2, r2, #1
 8000ee0:	3a01      	subs	r2, #1
 8000ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ee6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eea:	4d26      	ldr	r5, [pc, #152]	; (8000f84 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8000eec:	2201      	movs	r2, #1
 8000eee:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fd5e 	bl	80009b0 <HAL_GetTick>
 8000ef4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	019a      	lsls	r2, r3, #6
 8000efa:	f53f aead 	bmi.w	8000c58 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000efe:	f7ff fd57 	bl	80009b0 <HAL_GetTick>
 8000f02:	1b00      	subs	r0, r0, r4
 8000f04:	2802      	cmp	r0, #2
 8000f06:	d9f6      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x2ca>
 8000f08:	e6d3      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f0a:	f7ff fd51 	bl	80009b0 <HAL_GetTick>
 8000f0e:	1b80      	subs	r0, r0, r6
 8000f10:	2802      	cmp	r0, #2
 8000f12:	d9d7      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x298>
 8000f14:	e6cd      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000f16:	f7ff fd4b 	bl	80009b0 <HAL_GetTick>
 8000f1a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f1c:	682b      	ldr	r3, [r5, #0]
 8000f1e:	019b      	lsls	r3, r3, #6
 8000f20:	f57f ae9a 	bpl.w	8000c58 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f24:	f7ff fd44 	bl	80009b0 <HAL_GetTick>
 8000f28:	1b00      	subs	r0, r0, r4
 8000f2a:	2802      	cmp	r0, #2
 8000f2c:	d9f6      	bls.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
 8000f2e:	e6c0      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f30:	2801      	cmp	r0, #1
 8000f32:	f43f aebf 	beq.w	8000cb4 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000f36:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f38:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f3a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f3e:	4291      	cmp	r1, r2
 8000f40:	f47f aea1 	bne.w	8000c86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f44:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4a:	428a      	cmp	r2, r1
 8000f4c:	f47f ae9b 	bne.w	8000c86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f50:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f52:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000f56:	401a      	ands	r2, r3
 8000f58:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000f5c:	f47f ae93 	bne.w	8000c86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f62:	0852      	lsrs	r2, r2, #1
 8000f64:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000f68:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f6a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000f6e:	f47f ae8a 	bne.w	8000c86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f74:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f78:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000f7c:	f43f ae6c 	beq.w	8000c58 <HAL_RCC_OscConfig+0x2c>
 8000f80:	e681      	b.n	8000c86 <HAL_RCC_OscConfig+0x5a>
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	42470000 	.word	0x42470000

08000f8c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f8c:	4913      	ldr	r1, [pc, #76]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000f8e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f90:	688b      	ldr	r3, [r1, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d01c      	beq.n	8000fd4 <HAL_RCC_GetSysClockFreq+0x48>
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d11c      	bne.n	8000fd8 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f9e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fa0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fa4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa8:	bf14      	ite	ne
 8000faa:	480d      	ldrne	r0, [pc, #52]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fac:	480d      	ldreq	r0, [pc, #52]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fb2:	bf18      	it	ne
 8000fb4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fba:	fba1 0100 	umull	r0, r1, r1, r0
 8000fbe:	f7ff f95f 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x50>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fca:	3301      	adds	r3, #1
 8000fcc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000fce:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fd2:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0x54>)
 8000fd6:	e7fc      	b.n	8000fd2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000fda:	e7fa      	b.n	8000fd2 <HAL_RCC_GetSysClockFreq+0x46>
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	017d7840 	.word	0x017d7840
 8000fe4:	00f42400 	.word	0x00f42400

08000fe8 <HAL_RCC_ClockConfig>:
{
 8000fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000fee:	4604      	mov	r4, r0
 8000ff0:	b910      	cbnz	r0, 8000ff8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ff2:	2001      	movs	r0, #1
}
 8000ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ff8:	4b44      	ldr	r3, [pc, #272]	; (800110c <HAL_RCC_ClockConfig+0x124>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	f002 0207 	and.w	r2, r2, #7
 8001000:	428a      	cmp	r2, r1
 8001002:	d328      	bcc.n	8001056 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001004:	6822      	ldr	r2, [r4, #0]
 8001006:	0797      	lsls	r7, r2, #30
 8001008:	d42d      	bmi.n	8001066 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800100a:	07d0      	lsls	r0, r2, #31
 800100c:	d441      	bmi.n	8001092 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800100e:	4b3f      	ldr	r3, [pc, #252]	; (800110c <HAL_RCC_ClockConfig+0x124>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	f002 0207 	and.w	r2, r2, #7
 8001016:	42aa      	cmp	r2, r5
 8001018:	d866      	bhi.n	80010e8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800101a:	6822      	ldr	r2, [r4, #0]
 800101c:	0751      	lsls	r1, r2, #29
 800101e:	d46c      	bmi.n	80010fa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001020:	0713      	lsls	r3, r2, #28
 8001022:	d507      	bpl.n	8001034 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001024:	4a3a      	ldr	r2, [pc, #232]	; (8001110 <HAL_RCC_ClockConfig+0x128>)
 8001026:	6921      	ldr	r1, [r4, #16]
 8001028:	6893      	ldr	r3, [r2, #8]
 800102a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800102e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001032:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001034:	f7ff ffaa 	bl	8000f8c <HAL_RCC_GetSysClockFreq>
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <HAL_RCC_ClockConfig+0x128>)
 800103a:	4a36      	ldr	r2, [pc, #216]	; (8001114 <HAL_RCC_ClockConfig+0x12c>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	40d8      	lsrs	r0, r3
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <HAL_RCC_ClockConfig+0x130>)
 8001048:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <HAL_RCC_ClockConfig+0x134>)
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	f7ff fc65 	bl	800091c <HAL_InitTick>
  return HAL_OK;
 8001052:	2000      	movs	r0, #0
 8001054:	e7ce      	b.n	8000ff4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	b2ca      	uxtb	r2, r1
 8001058:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	428b      	cmp	r3, r1
 8001062:	d1c6      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xa>
 8001064:	e7ce      	b.n	8001004 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <HAL_RCC_ClockConfig+0x128>)
 8001068:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800106c:	bf1e      	ittt	ne
 800106e:	6899      	ldrne	r1, [r3, #8]
 8001070:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001074:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001076:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001078:	bf42      	ittt	mi
 800107a:	6899      	ldrmi	r1, [r3, #8]
 800107c:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001080:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001082:	4923      	ldr	r1, [pc, #140]	; (8001110 <HAL_RCC_ClockConfig+0x128>)
 8001084:	68a0      	ldr	r0, [r4, #8]
 8001086:	688b      	ldr	r3, [r1, #8]
 8001088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800108c:	4303      	orrs	r3, r0
 800108e:	608b      	str	r3, [r1, #8]
 8001090:	e7bb      	b.n	800100a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001092:	6862      	ldr	r2, [r4, #4]
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <HAL_RCC_ClockConfig+0x128>)
 8001096:	2a01      	cmp	r2, #1
 8001098:	d11c      	bne.n	80010d4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	d0a7      	beq.n	8000ff2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a2:	4e1b      	ldr	r6, [pc, #108]	; (8001110 <HAL_RCC_ClockConfig+0x128>)
 80010a4:	68b3      	ldr	r3, [r6, #8]
 80010a6:	f023 0303 	bic.w	r3, r3, #3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010ae:	f7ff fc7f 	bl	80009b0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010b6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b8:	68b3      	ldr	r3, [r6, #8]
 80010ba:	6862      	ldr	r2, [r4, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010c4:	d0a3      	beq.n	800100e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c6:	f7ff fc73 	bl	80009b0 <HAL_GetTick>
 80010ca:	1bc0      	subs	r0, r0, r7
 80010cc:	4540      	cmp	r0, r8
 80010ce:	d9f3      	bls.n	80010b8 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80010d0:	2003      	movs	r0, #3
 80010d2:	e78f      	b.n	8000ff4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010d4:	1e91      	subs	r1, r2, #2
 80010d6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010da:	d802      	bhi.n	80010e2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010e0:	e7de      	b.n	80010a0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e2:	f013 0f02 	tst.w	r3, #2
 80010e6:	e7db      	b.n	80010a0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e8:	b2ea      	uxtb	r2, r5
 80010ea:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	42ab      	cmp	r3, r5
 80010f4:	f47f af7d 	bne.w	8000ff2 <HAL_RCC_ClockConfig+0xa>
 80010f8:	e78f      	b.n	800101a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <HAL_RCC_ClockConfig+0x128>)
 80010fc:	68e0      	ldr	r0, [r4, #12]
 80010fe:	688b      	ldr	r3, [r1, #8]
 8001100:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001104:	4303      	orrs	r3, r0
 8001106:	608b      	str	r3, [r1, #8]
 8001108:	e78a      	b.n	8001020 <HAL_RCC_ClockConfig+0x38>
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00
 8001110:	40023800 	.word	0x40023800
 8001114:	08001dde 	.word	0x08001dde
 8001118:	20000000 	.word	0x20000000
 800111c:	20000008 	.word	0x20000008

08001120 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800112e:	6810      	ldr	r0, [r2, #0]
}
 8001130:	40d8      	lsrs	r0, r3
 8001132:	4770      	bx	lr
 8001134:	40023800 	.word	0x40023800
 8001138:	08001dee 	.word	0x08001dee
 800113c:	20000000 	.word	0x20000000

08001140 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	4a03      	ldr	r2, [pc, #12]	; (800115c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800114e:	6810      	ldr	r0, [r2, #0]
}
 8001150:	40d8      	lsrs	r0, r3
 8001152:	4770      	bx	lr
 8001154:	40023800 	.word	0x40023800
 8001158:	08001dee 	.word	0x08001dee
 800115c:	20000000 	.word	0x20000000

08001160 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001160:	6802      	ldr	r2, [r0, #0]
 8001162:	68c1      	ldr	r1, [r0, #12]
 8001164:	6913      	ldr	r3, [r2, #16]
 8001166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800116a:	430b      	orrs	r3, r1
{
 800116c:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800116e:	6113      	str	r3, [r2, #16]
{
 8001170:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001172:	6883      	ldr	r3, [r0, #8]
 8001174:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001176:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001178:	4303      	orrs	r3, r0
 800117a:	6968      	ldr	r0, [r5, #20]
 800117c:	4303      	orrs	r3, r0
 800117e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001180:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8001184:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001188:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800118a:	430b      	orrs	r3, r1
 800118c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800118e:	6953      	ldr	r3, [r2, #20]
 8001190:	69a9      	ldr	r1, [r5, #24]
 8001192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001196:	430b      	orrs	r3, r1
 8001198:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <UART_SetConfig+0xb8>)
 800119c:	429a      	cmp	r2, r3
 800119e:	d003      	beq.n	80011a8 <UART_SetConfig+0x48>
 80011a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d123      	bne.n	80011f0 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80011a8:	f7ff ffca 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011ac:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80011ae:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80011b4:	e9d5 4600 	ldrd	r4, r6, [r5]
 80011b8:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011bc:	d11b      	bne.n	80011f6 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80011be:	19b2      	adds	r2, r6, r6
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	415b      	adcs	r3, r3
 80011c6:	f7ff f85b 	bl	8000280 <__aeabi_uldivmod>
 80011ca:	2164      	movs	r1, #100	; 0x64
 80011cc:	fbb0 f5f1 	udiv	r5, r0, r1
 80011d0:	fb01 0315 	mls	r3, r1, r5, r0
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	3332      	adds	r3, #50	; 0x32
 80011d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80011dc:	f003 0207 	and.w	r2, r3, #7
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80011e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80011ea:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80011ec:	60a3      	str	r3, [r4, #8]
  }
}
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80011f0:	f7ff ff96 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 80011f4:	e7da      	b.n	80011ac <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80011f6:	00b2      	lsls	r2, r6, #2
 80011f8:	0fb3      	lsrs	r3, r6, #30
 80011fa:	f7ff f841 	bl	8000280 <__aeabi_uldivmod>
 80011fe:	2264      	movs	r2, #100	; 0x64
 8001200:	fbb0 f1f2 	udiv	r1, r0, r2
 8001204:	fb02 0311 	mls	r3, r2, r1, r0
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	3332      	adds	r3, #50	; 0x32
 800120c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001210:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001214:	e7ea      	b.n	80011ec <UART_SetConfig+0x8c>
 8001216:	bf00      	nop
 8001218:	40011000 	.word	0x40011000

0800121c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4604      	mov	r4, r0
 8001220:	460e      	mov	r6, r1
 8001222:	4617      	mov	r7, r2
 8001224:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001226:	6822      	ldr	r2, [r4, #0]
 8001228:	6813      	ldr	r3, [r2, #0]
 800122a:	ea36 0303 	bics.w	r3, r6, r3
 800122e:	d101      	bne.n	8001234 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001230:	2000      	movs	r0, #0
 8001232:	e028      	b.n	8001286 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001234:	1c6b      	adds	r3, r5, #1
 8001236:	d0f7      	beq.n	8001228 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001238:	b125      	cbz	r5, 8001244 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800123a:	f7ff fbb9 	bl	80009b0 <HAL_GetTick>
 800123e:	1bc0      	subs	r0, r0, r7
 8001240:	4285      	cmp	r5, r0
 8001242:	d2f0      	bcs.n	8001226 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001244:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001246:	f102 030c 	add.w	r3, r2, #12
 800124a:	e853 3f00 	ldrex	r3, [r3]
 800124e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001252:	320c      	adds	r2, #12
 8001254:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8001258:	6821      	ldr	r1, [r4, #0]
 800125a:	2800      	cmp	r0, #0
 800125c:	d1f2      	bne.n	8001244 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800125e:	f101 0314 	add.w	r3, r1, #20
 8001262:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001266:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800126a:	f101 0014 	add.w	r0, r1, #20
 800126e:	e840 3200 	strex	r2, r3, [r0]
 8001272:	2a00      	cmp	r2, #0
 8001274:	d1f3      	bne.n	800125e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8001276:	2320      	movs	r3, #32
 8001278:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800127c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8001280:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8001284:	2003      	movs	r0, #3
}
 8001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001288 <HAL_UART_Init>:
{
 8001288:	b510      	push	{r4, lr}
  if (huart == NULL)
 800128a:	4604      	mov	r4, r0
 800128c:	b340      	cbz	r0, 80012e0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800128e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001292:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001296:	b91b      	cbnz	r3, 80012a0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001298:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800129c:	f7ff fa80 	bl	80007a0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80012a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012a2:	2324      	movs	r3, #36	; 0x24
 80012a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80012a8:	68d3      	ldr	r3, [r2, #12]
 80012aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012ae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff ff55 	bl	8001160 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012c6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012ce:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80012d2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d4:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80012d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80012da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80012de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
 80012e2:	e7fc      	b.n	80012de <HAL_UART_Init+0x56>

080012e4 <HAL_UART_Transmit>:
{
 80012e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012e6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80012e8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80012ec:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80012ee:	2a20      	cmp	r2, #32
{
 80012f0:	4604      	mov	r4, r0
 80012f2:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80012f4:	d149      	bne.n	800138a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d045      	beq.n	8001386 <HAL_UART_Transmit+0xa2>
 80012fa:	2f00      	cmp	r7, #0
 80012fc:	d043      	beq.n	8001386 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80012fe:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001302:	2a01      	cmp	r2, #1
 8001304:	d041      	beq.n	800138a <HAL_UART_Transmit+0xa6>
 8001306:	2201      	movs	r2, #1
 8001308:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800130c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800130e:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001310:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001312:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8001316:	f7ff fb4b 	bl	80009b0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800131a:	68a1      	ldr	r1, [r4, #8]
 800131c:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 800131e:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001320:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001324:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8001326:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001328:	d103      	bne.n	8001332 <HAL_UART_Transmit+0x4e>
 800132a:	6921      	ldr	r1, [r4, #16]
 800132c:	b909      	cbnz	r1, 8001332 <HAL_UART_Transmit+0x4e>
 800132e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001330:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8001332:	2100      	movs	r1, #0
 8001334:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001338:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800133a:	b289      	uxth	r1, r1
 800133c:	b941      	cbnz	r1, 8001350 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800133e:	2140      	movs	r1, #64	; 0x40
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff ff6b 	bl	800121c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001346:	b960      	cbnz	r0, 8001362 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8001348:	2320      	movs	r3, #32
 800134a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800134e:	e009      	b.n	8001364 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	4620      	mov	r0, r4
 8001354:	e9cd 2300 	strd	r2, r3, [sp]
 8001358:	f7ff ff60 	bl	800121c <UART_WaitOnFlagUntilTimeout.constprop.0>
 800135c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001360:	b110      	cbz	r0, 8001368 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001362:	2003      	movs	r0, #3
}
 8001364:	b003      	add	sp, #12
 8001366:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001368:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 800136a:	b94e      	cbnz	r6, 8001380 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800136c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8001370:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001374:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8001376:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001378:	3901      	subs	r1, #1
 800137a:	b289      	uxth	r1, r1
 800137c:	84e1      	strh	r1, [r4, #38]	; 0x26
 800137e:	e7db      	b.n	8001338 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001380:	f816 1b01 	ldrb.w	r1, [r6], #1
 8001384:	e7f6      	b.n	8001374 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001386:	2001      	movs	r0, #1
 8001388:	e7ec      	b.n	8001364 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800138a:	2002      	movs	r0, #2
 800138c:	e7ea      	b.n	8001364 <HAL_UART_Transmit+0x80>
	...

08001390 <__errno>:
 8001390:	4b01      	ldr	r3, [pc, #4]	; (8001398 <__errno+0x8>)
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2000000c 	.word	0x2000000c

0800139c <__libc_init_array>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	4d0d      	ldr	r5, [pc, #52]	; (80013d4 <__libc_init_array+0x38>)
 80013a0:	4c0d      	ldr	r4, [pc, #52]	; (80013d8 <__libc_init_array+0x3c>)
 80013a2:	1b64      	subs	r4, r4, r5
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	2600      	movs	r6, #0
 80013a8:	42a6      	cmp	r6, r4
 80013aa:	d109      	bne.n	80013c0 <__libc_init_array+0x24>
 80013ac:	4d0b      	ldr	r5, [pc, #44]	; (80013dc <__libc_init_array+0x40>)
 80013ae:	4c0c      	ldr	r4, [pc, #48]	; (80013e0 <__libc_init_array+0x44>)
 80013b0:	f000 fc8e 	bl	8001cd0 <_init>
 80013b4:	1b64      	subs	r4, r4, r5
 80013b6:	10a4      	asrs	r4, r4, #2
 80013b8:	2600      	movs	r6, #0
 80013ba:	42a6      	cmp	r6, r4
 80013bc:	d105      	bne.n	80013ca <__libc_init_array+0x2e>
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c4:	4798      	blx	r3
 80013c6:	3601      	adds	r6, #1
 80013c8:	e7ee      	b.n	80013a8 <__libc_init_array+0xc>
 80013ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ce:	4798      	blx	r3
 80013d0:	3601      	adds	r6, #1
 80013d2:	e7f2      	b.n	80013ba <__libc_init_array+0x1e>
 80013d4:	08001e34 	.word	0x08001e34
 80013d8:	08001e34 	.word	0x08001e34
 80013dc:	08001e34 	.word	0x08001e34
 80013e0:	08001e38 	.word	0x08001e38

080013e4 <memset>:
 80013e4:	4402      	add	r2, r0
 80013e6:	4603      	mov	r3, r0
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d100      	bne.n	80013ee <memset+0xa>
 80013ec:	4770      	bx	lr
 80013ee:	f803 1b01 	strb.w	r1, [r3], #1
 80013f2:	e7f9      	b.n	80013e8 <memset+0x4>

080013f4 <_vsiprintf_r>:
 80013f4:	b500      	push	{lr}
 80013f6:	b09b      	sub	sp, #108	; 0x6c
 80013f8:	9100      	str	r1, [sp, #0]
 80013fa:	9104      	str	r1, [sp, #16]
 80013fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001400:	9105      	str	r1, [sp, #20]
 8001402:	9102      	str	r1, [sp, #8]
 8001404:	4905      	ldr	r1, [pc, #20]	; (800141c <_vsiprintf_r+0x28>)
 8001406:	9103      	str	r1, [sp, #12]
 8001408:	4669      	mov	r1, sp
 800140a:	f000 f86f 	bl	80014ec <_svfiprintf_r>
 800140e:	9b00      	ldr	r3, [sp, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	b01b      	add	sp, #108	; 0x6c
 8001416:	f85d fb04 	ldr.w	pc, [sp], #4
 800141a:	bf00      	nop
 800141c:	ffff0208 	.word	0xffff0208

08001420 <vsiprintf>:
 8001420:	4613      	mov	r3, r2
 8001422:	460a      	mov	r2, r1
 8001424:	4601      	mov	r1, r0
 8001426:	4802      	ldr	r0, [pc, #8]	; (8001430 <vsiprintf+0x10>)
 8001428:	6800      	ldr	r0, [r0, #0]
 800142a:	f7ff bfe3 	b.w	80013f4 <_vsiprintf_r>
 800142e:	bf00      	nop
 8001430:	2000000c 	.word	0x2000000c

08001434 <__ssputs_r>:
 8001434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001438:	688e      	ldr	r6, [r1, #8]
 800143a:	429e      	cmp	r6, r3
 800143c:	4682      	mov	sl, r0
 800143e:	460c      	mov	r4, r1
 8001440:	4690      	mov	r8, r2
 8001442:	461f      	mov	r7, r3
 8001444:	d838      	bhi.n	80014b8 <__ssputs_r+0x84>
 8001446:	898a      	ldrh	r2, [r1, #12]
 8001448:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800144c:	d032      	beq.n	80014b4 <__ssputs_r+0x80>
 800144e:	6825      	ldr	r5, [r4, #0]
 8001450:	6909      	ldr	r1, [r1, #16]
 8001452:	eba5 0901 	sub.w	r9, r5, r1
 8001456:	6965      	ldr	r5, [r4, #20]
 8001458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800145c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001460:	3301      	adds	r3, #1
 8001462:	444b      	add	r3, r9
 8001464:	106d      	asrs	r5, r5, #1
 8001466:	429d      	cmp	r5, r3
 8001468:	bf38      	it	cc
 800146a:	461d      	movcc	r5, r3
 800146c:	0553      	lsls	r3, r2, #21
 800146e:	d531      	bpl.n	80014d4 <__ssputs_r+0xa0>
 8001470:	4629      	mov	r1, r5
 8001472:	f000 fb63 	bl	8001b3c <_malloc_r>
 8001476:	4606      	mov	r6, r0
 8001478:	b950      	cbnz	r0, 8001490 <__ssputs_r+0x5c>
 800147a:	230c      	movs	r3, #12
 800147c:	f8ca 3000 	str.w	r3, [sl]
 8001480:	89a3      	ldrh	r3, [r4, #12]
 8001482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001486:	81a3      	strh	r3, [r4, #12]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001490:	6921      	ldr	r1, [r4, #16]
 8001492:	464a      	mov	r2, r9
 8001494:	f000 fabe 	bl	8001a14 <memcpy>
 8001498:	89a3      	ldrh	r3, [r4, #12]
 800149a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800149e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a2:	81a3      	strh	r3, [r4, #12]
 80014a4:	6126      	str	r6, [r4, #16]
 80014a6:	6165      	str	r5, [r4, #20]
 80014a8:	444e      	add	r6, r9
 80014aa:	eba5 0509 	sub.w	r5, r5, r9
 80014ae:	6026      	str	r6, [r4, #0]
 80014b0:	60a5      	str	r5, [r4, #8]
 80014b2:	463e      	mov	r6, r7
 80014b4:	42be      	cmp	r6, r7
 80014b6:	d900      	bls.n	80014ba <__ssputs_r+0x86>
 80014b8:	463e      	mov	r6, r7
 80014ba:	6820      	ldr	r0, [r4, #0]
 80014bc:	4632      	mov	r2, r6
 80014be:	4641      	mov	r1, r8
 80014c0:	f000 fab6 	bl	8001a30 <memmove>
 80014c4:	68a3      	ldr	r3, [r4, #8]
 80014c6:	1b9b      	subs	r3, r3, r6
 80014c8:	60a3      	str	r3, [r4, #8]
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	4433      	add	r3, r6
 80014ce:	6023      	str	r3, [r4, #0]
 80014d0:	2000      	movs	r0, #0
 80014d2:	e7db      	b.n	800148c <__ssputs_r+0x58>
 80014d4:	462a      	mov	r2, r5
 80014d6:	f000 fba5 	bl	8001c24 <_realloc_r>
 80014da:	4606      	mov	r6, r0
 80014dc:	2800      	cmp	r0, #0
 80014de:	d1e1      	bne.n	80014a4 <__ssputs_r+0x70>
 80014e0:	6921      	ldr	r1, [r4, #16]
 80014e2:	4650      	mov	r0, sl
 80014e4:	f000 fabe 	bl	8001a64 <_free_r>
 80014e8:	e7c7      	b.n	800147a <__ssputs_r+0x46>
	...

080014ec <_svfiprintf_r>:
 80014ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014f0:	4698      	mov	r8, r3
 80014f2:	898b      	ldrh	r3, [r1, #12]
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	b09d      	sub	sp, #116	; 0x74
 80014f8:	4607      	mov	r7, r0
 80014fa:	460d      	mov	r5, r1
 80014fc:	4614      	mov	r4, r2
 80014fe:	d50e      	bpl.n	800151e <_svfiprintf_r+0x32>
 8001500:	690b      	ldr	r3, [r1, #16]
 8001502:	b963      	cbnz	r3, 800151e <_svfiprintf_r+0x32>
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	f000 fb19 	bl	8001b3c <_malloc_r>
 800150a:	6028      	str	r0, [r5, #0]
 800150c:	6128      	str	r0, [r5, #16]
 800150e:	b920      	cbnz	r0, 800151a <_svfiprintf_r+0x2e>
 8001510:	230c      	movs	r3, #12
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	e0d1      	b.n	80016be <_svfiprintf_r+0x1d2>
 800151a:	2340      	movs	r3, #64	; 0x40
 800151c:	616b      	str	r3, [r5, #20]
 800151e:	2300      	movs	r3, #0
 8001520:	9309      	str	r3, [sp, #36]	; 0x24
 8001522:	2320      	movs	r3, #32
 8001524:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001528:	f8cd 800c 	str.w	r8, [sp, #12]
 800152c:	2330      	movs	r3, #48	; 0x30
 800152e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80016d8 <_svfiprintf_r+0x1ec>
 8001532:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001536:	f04f 0901 	mov.w	r9, #1
 800153a:	4623      	mov	r3, r4
 800153c:	469a      	mov	sl, r3
 800153e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001542:	b10a      	cbz	r2, 8001548 <_svfiprintf_r+0x5c>
 8001544:	2a25      	cmp	r2, #37	; 0x25
 8001546:	d1f9      	bne.n	800153c <_svfiprintf_r+0x50>
 8001548:	ebba 0b04 	subs.w	fp, sl, r4
 800154c:	d00b      	beq.n	8001566 <_svfiprintf_r+0x7a>
 800154e:	465b      	mov	r3, fp
 8001550:	4622      	mov	r2, r4
 8001552:	4629      	mov	r1, r5
 8001554:	4638      	mov	r0, r7
 8001556:	f7ff ff6d 	bl	8001434 <__ssputs_r>
 800155a:	3001      	adds	r0, #1
 800155c:	f000 80aa 	beq.w	80016b4 <_svfiprintf_r+0x1c8>
 8001560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001562:	445a      	add	r2, fp
 8001564:	9209      	str	r2, [sp, #36]	; 0x24
 8001566:	f89a 3000 	ldrb.w	r3, [sl]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 80a2 	beq.w	80016b4 <_svfiprintf_r+0x1c8>
 8001570:	2300      	movs	r3, #0
 8001572:	f04f 32ff 	mov.w	r2, #4294967295
 8001576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800157a:	f10a 0a01 	add.w	sl, sl, #1
 800157e:	9304      	str	r3, [sp, #16]
 8001580:	9307      	str	r3, [sp, #28]
 8001582:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001586:	931a      	str	r3, [sp, #104]	; 0x68
 8001588:	4654      	mov	r4, sl
 800158a:	2205      	movs	r2, #5
 800158c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001590:	4851      	ldr	r0, [pc, #324]	; (80016d8 <_svfiprintf_r+0x1ec>)
 8001592:	f7fe fe25 	bl	80001e0 <memchr>
 8001596:	9a04      	ldr	r2, [sp, #16]
 8001598:	b9d8      	cbnz	r0, 80015d2 <_svfiprintf_r+0xe6>
 800159a:	06d0      	lsls	r0, r2, #27
 800159c:	bf44      	itt	mi
 800159e:	2320      	movmi	r3, #32
 80015a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015a4:	0711      	lsls	r1, r2, #28
 80015a6:	bf44      	itt	mi
 80015a8:	232b      	movmi	r3, #43	; 0x2b
 80015aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015ae:	f89a 3000 	ldrb.w	r3, [sl]
 80015b2:	2b2a      	cmp	r3, #42	; 0x2a
 80015b4:	d015      	beq.n	80015e2 <_svfiprintf_r+0xf6>
 80015b6:	9a07      	ldr	r2, [sp, #28]
 80015b8:	4654      	mov	r4, sl
 80015ba:	2000      	movs	r0, #0
 80015bc:	f04f 0c0a 	mov.w	ip, #10
 80015c0:	4621      	mov	r1, r4
 80015c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015c6:	3b30      	subs	r3, #48	; 0x30
 80015c8:	2b09      	cmp	r3, #9
 80015ca:	d94e      	bls.n	800166a <_svfiprintf_r+0x17e>
 80015cc:	b1b0      	cbz	r0, 80015fc <_svfiprintf_r+0x110>
 80015ce:	9207      	str	r2, [sp, #28]
 80015d0:	e014      	b.n	80015fc <_svfiprintf_r+0x110>
 80015d2:	eba0 0308 	sub.w	r3, r0, r8
 80015d6:	fa09 f303 	lsl.w	r3, r9, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	9304      	str	r3, [sp, #16]
 80015de:	46a2      	mov	sl, r4
 80015e0:	e7d2      	b.n	8001588 <_svfiprintf_r+0x9c>
 80015e2:	9b03      	ldr	r3, [sp, #12]
 80015e4:	1d19      	adds	r1, r3, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	9103      	str	r1, [sp, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bfbb      	ittet	lt
 80015ee:	425b      	neglt	r3, r3
 80015f0:	f042 0202 	orrlt.w	r2, r2, #2
 80015f4:	9307      	strge	r3, [sp, #28]
 80015f6:	9307      	strlt	r3, [sp, #28]
 80015f8:	bfb8      	it	lt
 80015fa:	9204      	strlt	r2, [sp, #16]
 80015fc:	7823      	ldrb	r3, [r4, #0]
 80015fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001600:	d10c      	bne.n	800161c <_svfiprintf_r+0x130>
 8001602:	7863      	ldrb	r3, [r4, #1]
 8001604:	2b2a      	cmp	r3, #42	; 0x2a
 8001606:	d135      	bne.n	8001674 <_svfiprintf_r+0x188>
 8001608:	9b03      	ldr	r3, [sp, #12]
 800160a:	1d1a      	adds	r2, r3, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	9203      	str	r2, [sp, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	bfb8      	it	lt
 8001614:	f04f 33ff 	movlt.w	r3, #4294967295
 8001618:	3402      	adds	r4, #2
 800161a:	9305      	str	r3, [sp, #20]
 800161c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80016e8 <_svfiprintf_r+0x1fc>
 8001620:	7821      	ldrb	r1, [r4, #0]
 8001622:	2203      	movs	r2, #3
 8001624:	4650      	mov	r0, sl
 8001626:	f7fe fddb 	bl	80001e0 <memchr>
 800162a:	b140      	cbz	r0, 800163e <_svfiprintf_r+0x152>
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	eba0 000a 	sub.w	r0, r0, sl
 8001632:	fa03 f000 	lsl.w	r0, r3, r0
 8001636:	9b04      	ldr	r3, [sp, #16]
 8001638:	4303      	orrs	r3, r0
 800163a:	3401      	adds	r4, #1
 800163c:	9304      	str	r3, [sp, #16]
 800163e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001642:	4826      	ldr	r0, [pc, #152]	; (80016dc <_svfiprintf_r+0x1f0>)
 8001644:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001648:	2206      	movs	r2, #6
 800164a:	f7fe fdc9 	bl	80001e0 <memchr>
 800164e:	2800      	cmp	r0, #0
 8001650:	d038      	beq.n	80016c4 <_svfiprintf_r+0x1d8>
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <_svfiprintf_r+0x1f4>)
 8001654:	bb1b      	cbnz	r3, 800169e <_svfiprintf_r+0x1b2>
 8001656:	9b03      	ldr	r3, [sp, #12]
 8001658:	3307      	adds	r3, #7
 800165a:	f023 0307 	bic.w	r3, r3, #7
 800165e:	3308      	adds	r3, #8
 8001660:	9303      	str	r3, [sp, #12]
 8001662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001664:	4433      	add	r3, r6
 8001666:	9309      	str	r3, [sp, #36]	; 0x24
 8001668:	e767      	b.n	800153a <_svfiprintf_r+0x4e>
 800166a:	fb0c 3202 	mla	r2, ip, r2, r3
 800166e:	460c      	mov	r4, r1
 8001670:	2001      	movs	r0, #1
 8001672:	e7a5      	b.n	80015c0 <_svfiprintf_r+0xd4>
 8001674:	2300      	movs	r3, #0
 8001676:	3401      	adds	r4, #1
 8001678:	9305      	str	r3, [sp, #20]
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 0c0a 	mov.w	ip, #10
 8001680:	4620      	mov	r0, r4
 8001682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001686:	3a30      	subs	r2, #48	; 0x30
 8001688:	2a09      	cmp	r2, #9
 800168a:	d903      	bls.n	8001694 <_svfiprintf_r+0x1a8>
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0c5      	beq.n	800161c <_svfiprintf_r+0x130>
 8001690:	9105      	str	r1, [sp, #20]
 8001692:	e7c3      	b.n	800161c <_svfiprintf_r+0x130>
 8001694:	fb0c 2101 	mla	r1, ip, r1, r2
 8001698:	4604      	mov	r4, r0
 800169a:	2301      	movs	r3, #1
 800169c:	e7f0      	b.n	8001680 <_svfiprintf_r+0x194>
 800169e:	ab03      	add	r3, sp, #12
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	462a      	mov	r2, r5
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <_svfiprintf_r+0x1f8>)
 80016a6:	a904      	add	r1, sp, #16
 80016a8:	4638      	mov	r0, r7
 80016aa:	f3af 8000 	nop.w
 80016ae:	1c42      	adds	r2, r0, #1
 80016b0:	4606      	mov	r6, r0
 80016b2:	d1d6      	bne.n	8001662 <_svfiprintf_r+0x176>
 80016b4:	89ab      	ldrh	r3, [r5, #12]
 80016b6:	065b      	lsls	r3, r3, #25
 80016b8:	f53f af2c 	bmi.w	8001514 <_svfiprintf_r+0x28>
 80016bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016be:	b01d      	add	sp, #116	; 0x74
 80016c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016c4:	ab03      	add	r3, sp, #12
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	462a      	mov	r2, r5
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <_svfiprintf_r+0x1f8>)
 80016cc:	a904      	add	r1, sp, #16
 80016ce:	4638      	mov	r0, r7
 80016d0:	f000 f87a 	bl	80017c8 <_printf_i>
 80016d4:	e7eb      	b.n	80016ae <_svfiprintf_r+0x1c2>
 80016d6:	bf00      	nop
 80016d8:	08001df6 	.word	0x08001df6
 80016dc:	08001e00 	.word	0x08001e00
 80016e0:	00000000 	.word	0x00000000
 80016e4:	08001435 	.word	0x08001435
 80016e8:	08001dfc 	.word	0x08001dfc

080016ec <_printf_common>:
 80016ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016f0:	4616      	mov	r6, r2
 80016f2:	4699      	mov	r9, r3
 80016f4:	688a      	ldr	r2, [r1, #8]
 80016f6:	690b      	ldr	r3, [r1, #16]
 80016f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016fc:	4293      	cmp	r3, r2
 80016fe:	bfb8      	it	lt
 8001700:	4613      	movlt	r3, r2
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001708:	4607      	mov	r7, r0
 800170a:	460c      	mov	r4, r1
 800170c:	b10a      	cbz	r2, 8001712 <_printf_common+0x26>
 800170e:	3301      	adds	r3, #1
 8001710:	6033      	str	r3, [r6, #0]
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	0699      	lsls	r1, r3, #26
 8001716:	bf42      	ittt	mi
 8001718:	6833      	ldrmi	r3, [r6, #0]
 800171a:	3302      	addmi	r3, #2
 800171c:	6033      	strmi	r3, [r6, #0]
 800171e:	6825      	ldr	r5, [r4, #0]
 8001720:	f015 0506 	ands.w	r5, r5, #6
 8001724:	d106      	bne.n	8001734 <_printf_common+0x48>
 8001726:	f104 0a19 	add.w	sl, r4, #25
 800172a:	68e3      	ldr	r3, [r4, #12]
 800172c:	6832      	ldr	r2, [r6, #0]
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	42ab      	cmp	r3, r5
 8001732:	dc26      	bgt.n	8001782 <_printf_common+0x96>
 8001734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001738:	1e13      	subs	r3, r2, #0
 800173a:	6822      	ldr	r2, [r4, #0]
 800173c:	bf18      	it	ne
 800173e:	2301      	movne	r3, #1
 8001740:	0692      	lsls	r2, r2, #26
 8001742:	d42b      	bmi.n	800179c <_printf_common+0xb0>
 8001744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001748:	4649      	mov	r1, r9
 800174a:	4638      	mov	r0, r7
 800174c:	47c0      	blx	r8
 800174e:	3001      	adds	r0, #1
 8001750:	d01e      	beq.n	8001790 <_printf_common+0xa4>
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	68e5      	ldr	r5, [r4, #12]
 8001756:	6832      	ldr	r2, [r6, #0]
 8001758:	f003 0306 	and.w	r3, r3, #6
 800175c:	2b04      	cmp	r3, #4
 800175e:	bf08      	it	eq
 8001760:	1aad      	subeq	r5, r5, r2
 8001762:	68a3      	ldr	r3, [r4, #8]
 8001764:	6922      	ldr	r2, [r4, #16]
 8001766:	bf0c      	ite	eq
 8001768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800176c:	2500      	movne	r5, #0
 800176e:	4293      	cmp	r3, r2
 8001770:	bfc4      	itt	gt
 8001772:	1a9b      	subgt	r3, r3, r2
 8001774:	18ed      	addgt	r5, r5, r3
 8001776:	2600      	movs	r6, #0
 8001778:	341a      	adds	r4, #26
 800177a:	42b5      	cmp	r5, r6
 800177c:	d11a      	bne.n	80017b4 <_printf_common+0xc8>
 800177e:	2000      	movs	r0, #0
 8001780:	e008      	b.n	8001794 <_printf_common+0xa8>
 8001782:	2301      	movs	r3, #1
 8001784:	4652      	mov	r2, sl
 8001786:	4649      	mov	r1, r9
 8001788:	4638      	mov	r0, r7
 800178a:	47c0      	blx	r8
 800178c:	3001      	adds	r0, #1
 800178e:	d103      	bne.n	8001798 <_printf_common+0xac>
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001798:	3501      	adds	r5, #1
 800179a:	e7c6      	b.n	800172a <_printf_common+0x3e>
 800179c:	18e1      	adds	r1, r4, r3
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	2030      	movs	r0, #48	; 0x30
 80017a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017a6:	4422      	add	r2, r4
 80017a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017b0:	3302      	adds	r3, #2
 80017b2:	e7c7      	b.n	8001744 <_printf_common+0x58>
 80017b4:	2301      	movs	r3, #1
 80017b6:	4622      	mov	r2, r4
 80017b8:	4649      	mov	r1, r9
 80017ba:	4638      	mov	r0, r7
 80017bc:	47c0      	blx	r8
 80017be:	3001      	adds	r0, #1
 80017c0:	d0e6      	beq.n	8001790 <_printf_common+0xa4>
 80017c2:	3601      	adds	r6, #1
 80017c4:	e7d9      	b.n	800177a <_printf_common+0x8e>
	...

080017c8 <_printf_i>:
 80017c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017cc:	7e0f      	ldrb	r7, [r1, #24]
 80017ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80017d0:	2f78      	cmp	r7, #120	; 0x78
 80017d2:	4691      	mov	r9, r2
 80017d4:	4680      	mov	r8, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	469a      	mov	sl, r3
 80017da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80017de:	d807      	bhi.n	80017f0 <_printf_i+0x28>
 80017e0:	2f62      	cmp	r7, #98	; 0x62
 80017e2:	d80a      	bhi.n	80017fa <_printf_i+0x32>
 80017e4:	2f00      	cmp	r7, #0
 80017e6:	f000 80d8 	beq.w	800199a <_printf_i+0x1d2>
 80017ea:	2f58      	cmp	r7, #88	; 0x58
 80017ec:	f000 80a3 	beq.w	8001936 <_printf_i+0x16e>
 80017f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80017f8:	e03a      	b.n	8001870 <_printf_i+0xa8>
 80017fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80017fe:	2b15      	cmp	r3, #21
 8001800:	d8f6      	bhi.n	80017f0 <_printf_i+0x28>
 8001802:	a101      	add	r1, pc, #4	; (adr r1, 8001808 <_printf_i+0x40>)
 8001804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001808:	08001861 	.word	0x08001861
 800180c:	08001875 	.word	0x08001875
 8001810:	080017f1 	.word	0x080017f1
 8001814:	080017f1 	.word	0x080017f1
 8001818:	080017f1 	.word	0x080017f1
 800181c:	080017f1 	.word	0x080017f1
 8001820:	08001875 	.word	0x08001875
 8001824:	080017f1 	.word	0x080017f1
 8001828:	080017f1 	.word	0x080017f1
 800182c:	080017f1 	.word	0x080017f1
 8001830:	080017f1 	.word	0x080017f1
 8001834:	08001981 	.word	0x08001981
 8001838:	080018a5 	.word	0x080018a5
 800183c:	08001963 	.word	0x08001963
 8001840:	080017f1 	.word	0x080017f1
 8001844:	080017f1 	.word	0x080017f1
 8001848:	080019a3 	.word	0x080019a3
 800184c:	080017f1 	.word	0x080017f1
 8001850:	080018a5 	.word	0x080018a5
 8001854:	080017f1 	.word	0x080017f1
 8001858:	080017f1 	.word	0x080017f1
 800185c:	0800196b 	.word	0x0800196b
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	1d1a      	adds	r2, r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	602a      	str	r2, [r5, #0]
 8001868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800186c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001870:	2301      	movs	r3, #1
 8001872:	e0a3      	b.n	80019bc <_printf_i+0x1f4>
 8001874:	6820      	ldr	r0, [r4, #0]
 8001876:	6829      	ldr	r1, [r5, #0]
 8001878:	0606      	lsls	r6, r0, #24
 800187a:	f101 0304 	add.w	r3, r1, #4
 800187e:	d50a      	bpl.n	8001896 <_printf_i+0xce>
 8001880:	680e      	ldr	r6, [r1, #0]
 8001882:	602b      	str	r3, [r5, #0]
 8001884:	2e00      	cmp	r6, #0
 8001886:	da03      	bge.n	8001890 <_printf_i+0xc8>
 8001888:	232d      	movs	r3, #45	; 0x2d
 800188a:	4276      	negs	r6, r6
 800188c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001890:	485e      	ldr	r0, [pc, #376]	; (8001a0c <_printf_i+0x244>)
 8001892:	230a      	movs	r3, #10
 8001894:	e019      	b.n	80018ca <_printf_i+0x102>
 8001896:	680e      	ldr	r6, [r1, #0]
 8001898:	602b      	str	r3, [r5, #0]
 800189a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800189e:	bf18      	it	ne
 80018a0:	b236      	sxthne	r6, r6
 80018a2:	e7ef      	b.n	8001884 <_printf_i+0xbc>
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	6820      	ldr	r0, [r4, #0]
 80018a8:	1d19      	adds	r1, r3, #4
 80018aa:	6029      	str	r1, [r5, #0]
 80018ac:	0601      	lsls	r1, r0, #24
 80018ae:	d501      	bpl.n	80018b4 <_printf_i+0xec>
 80018b0:	681e      	ldr	r6, [r3, #0]
 80018b2:	e002      	b.n	80018ba <_printf_i+0xf2>
 80018b4:	0646      	lsls	r6, r0, #25
 80018b6:	d5fb      	bpl.n	80018b0 <_printf_i+0xe8>
 80018b8:	881e      	ldrh	r6, [r3, #0]
 80018ba:	4854      	ldr	r0, [pc, #336]	; (8001a0c <_printf_i+0x244>)
 80018bc:	2f6f      	cmp	r7, #111	; 0x6f
 80018be:	bf0c      	ite	eq
 80018c0:	2308      	moveq	r3, #8
 80018c2:	230a      	movne	r3, #10
 80018c4:	2100      	movs	r1, #0
 80018c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80018ca:	6865      	ldr	r5, [r4, #4]
 80018cc:	60a5      	str	r5, [r4, #8]
 80018ce:	2d00      	cmp	r5, #0
 80018d0:	bfa2      	ittt	ge
 80018d2:	6821      	ldrge	r1, [r4, #0]
 80018d4:	f021 0104 	bicge.w	r1, r1, #4
 80018d8:	6021      	strge	r1, [r4, #0]
 80018da:	b90e      	cbnz	r6, 80018e0 <_printf_i+0x118>
 80018dc:	2d00      	cmp	r5, #0
 80018de:	d04d      	beq.n	800197c <_printf_i+0x1b4>
 80018e0:	4615      	mov	r5, r2
 80018e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80018e6:	fb03 6711 	mls	r7, r3, r1, r6
 80018ea:	5dc7      	ldrb	r7, [r0, r7]
 80018ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80018f0:	4637      	mov	r7, r6
 80018f2:	42bb      	cmp	r3, r7
 80018f4:	460e      	mov	r6, r1
 80018f6:	d9f4      	bls.n	80018e2 <_printf_i+0x11a>
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d10b      	bne.n	8001914 <_printf_i+0x14c>
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	07de      	lsls	r6, r3, #31
 8001900:	d508      	bpl.n	8001914 <_printf_i+0x14c>
 8001902:	6923      	ldr	r3, [r4, #16]
 8001904:	6861      	ldr	r1, [r4, #4]
 8001906:	4299      	cmp	r1, r3
 8001908:	bfde      	ittt	le
 800190a:	2330      	movle	r3, #48	; 0x30
 800190c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001914:	1b52      	subs	r2, r2, r5
 8001916:	6122      	str	r2, [r4, #16]
 8001918:	f8cd a000 	str.w	sl, [sp]
 800191c:	464b      	mov	r3, r9
 800191e:	aa03      	add	r2, sp, #12
 8001920:	4621      	mov	r1, r4
 8001922:	4640      	mov	r0, r8
 8001924:	f7ff fee2 	bl	80016ec <_printf_common>
 8001928:	3001      	adds	r0, #1
 800192a:	d14c      	bne.n	80019c6 <_printf_i+0x1fe>
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	b004      	add	sp, #16
 8001932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001936:	4835      	ldr	r0, [pc, #212]	; (8001a0c <_printf_i+0x244>)
 8001938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800193c:	6829      	ldr	r1, [r5, #0]
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	f851 6b04 	ldr.w	r6, [r1], #4
 8001944:	6029      	str	r1, [r5, #0]
 8001946:	061d      	lsls	r5, r3, #24
 8001948:	d514      	bpl.n	8001974 <_printf_i+0x1ac>
 800194a:	07df      	lsls	r7, r3, #31
 800194c:	bf44      	itt	mi
 800194e:	f043 0320 	orrmi.w	r3, r3, #32
 8001952:	6023      	strmi	r3, [r4, #0]
 8001954:	b91e      	cbnz	r6, 800195e <_printf_i+0x196>
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	f023 0320 	bic.w	r3, r3, #32
 800195c:	6023      	str	r3, [r4, #0]
 800195e:	2310      	movs	r3, #16
 8001960:	e7b0      	b.n	80018c4 <_printf_i+0xfc>
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	2378      	movs	r3, #120	; 0x78
 800196c:	4828      	ldr	r0, [pc, #160]	; (8001a10 <_printf_i+0x248>)
 800196e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001972:	e7e3      	b.n	800193c <_printf_i+0x174>
 8001974:	0659      	lsls	r1, r3, #25
 8001976:	bf48      	it	mi
 8001978:	b2b6      	uxthmi	r6, r6
 800197a:	e7e6      	b.n	800194a <_printf_i+0x182>
 800197c:	4615      	mov	r5, r2
 800197e:	e7bb      	b.n	80018f8 <_printf_i+0x130>
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	6826      	ldr	r6, [r4, #0]
 8001984:	6961      	ldr	r1, [r4, #20]
 8001986:	1d18      	adds	r0, r3, #4
 8001988:	6028      	str	r0, [r5, #0]
 800198a:	0635      	lsls	r5, r6, #24
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	d501      	bpl.n	8001994 <_printf_i+0x1cc>
 8001990:	6019      	str	r1, [r3, #0]
 8001992:	e002      	b.n	800199a <_printf_i+0x1d2>
 8001994:	0670      	lsls	r0, r6, #25
 8001996:	d5fb      	bpl.n	8001990 <_printf_i+0x1c8>
 8001998:	8019      	strh	r1, [r3, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	6123      	str	r3, [r4, #16]
 800199e:	4615      	mov	r5, r2
 80019a0:	e7ba      	b.n	8001918 <_printf_i+0x150>
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	1d1a      	adds	r2, r3, #4
 80019a6:	602a      	str	r2, [r5, #0]
 80019a8:	681d      	ldr	r5, [r3, #0]
 80019aa:	6862      	ldr	r2, [r4, #4]
 80019ac:	2100      	movs	r1, #0
 80019ae:	4628      	mov	r0, r5
 80019b0:	f7fe fc16 	bl	80001e0 <memchr>
 80019b4:	b108      	cbz	r0, 80019ba <_printf_i+0x1f2>
 80019b6:	1b40      	subs	r0, r0, r5
 80019b8:	6060      	str	r0, [r4, #4]
 80019ba:	6863      	ldr	r3, [r4, #4]
 80019bc:	6123      	str	r3, [r4, #16]
 80019be:	2300      	movs	r3, #0
 80019c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019c4:	e7a8      	b.n	8001918 <_printf_i+0x150>
 80019c6:	6923      	ldr	r3, [r4, #16]
 80019c8:	462a      	mov	r2, r5
 80019ca:	4649      	mov	r1, r9
 80019cc:	4640      	mov	r0, r8
 80019ce:	47d0      	blx	sl
 80019d0:	3001      	adds	r0, #1
 80019d2:	d0ab      	beq.n	800192c <_printf_i+0x164>
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	079b      	lsls	r3, r3, #30
 80019d8:	d413      	bmi.n	8001a02 <_printf_i+0x23a>
 80019da:	68e0      	ldr	r0, [r4, #12]
 80019dc:	9b03      	ldr	r3, [sp, #12]
 80019de:	4298      	cmp	r0, r3
 80019e0:	bfb8      	it	lt
 80019e2:	4618      	movlt	r0, r3
 80019e4:	e7a4      	b.n	8001930 <_printf_i+0x168>
 80019e6:	2301      	movs	r3, #1
 80019e8:	4632      	mov	r2, r6
 80019ea:	4649      	mov	r1, r9
 80019ec:	4640      	mov	r0, r8
 80019ee:	47d0      	blx	sl
 80019f0:	3001      	adds	r0, #1
 80019f2:	d09b      	beq.n	800192c <_printf_i+0x164>
 80019f4:	3501      	adds	r5, #1
 80019f6:	68e3      	ldr	r3, [r4, #12]
 80019f8:	9903      	ldr	r1, [sp, #12]
 80019fa:	1a5b      	subs	r3, r3, r1
 80019fc:	42ab      	cmp	r3, r5
 80019fe:	dcf2      	bgt.n	80019e6 <_printf_i+0x21e>
 8001a00:	e7eb      	b.n	80019da <_printf_i+0x212>
 8001a02:	2500      	movs	r5, #0
 8001a04:	f104 0619 	add.w	r6, r4, #25
 8001a08:	e7f5      	b.n	80019f6 <_printf_i+0x22e>
 8001a0a:	bf00      	nop
 8001a0c:	08001e07 	.word	0x08001e07
 8001a10:	08001e18 	.word	0x08001e18

08001a14 <memcpy>:
 8001a14:	440a      	add	r2, r1
 8001a16:	4291      	cmp	r1, r2
 8001a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8001a1c:	d100      	bne.n	8001a20 <memcpy+0xc>
 8001a1e:	4770      	bx	lr
 8001a20:	b510      	push	{r4, lr}
 8001a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a2a:	4291      	cmp	r1, r2
 8001a2c:	d1f9      	bne.n	8001a22 <memcpy+0xe>
 8001a2e:	bd10      	pop	{r4, pc}

08001a30 <memmove>:
 8001a30:	4288      	cmp	r0, r1
 8001a32:	b510      	push	{r4, lr}
 8001a34:	eb01 0402 	add.w	r4, r1, r2
 8001a38:	d902      	bls.n	8001a40 <memmove+0x10>
 8001a3a:	4284      	cmp	r4, r0
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	d807      	bhi.n	8001a50 <memmove+0x20>
 8001a40:	1e43      	subs	r3, r0, #1
 8001a42:	42a1      	cmp	r1, r4
 8001a44:	d008      	beq.n	8001a58 <memmove+0x28>
 8001a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a4e:	e7f8      	b.n	8001a42 <memmove+0x12>
 8001a50:	4402      	add	r2, r0
 8001a52:	4601      	mov	r1, r0
 8001a54:	428a      	cmp	r2, r1
 8001a56:	d100      	bne.n	8001a5a <memmove+0x2a>
 8001a58:	bd10      	pop	{r4, pc}
 8001a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001a62:	e7f7      	b.n	8001a54 <memmove+0x24>

08001a64 <_free_r>:
 8001a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a66:	2900      	cmp	r1, #0
 8001a68:	d044      	beq.n	8001af4 <_free_r+0x90>
 8001a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a6e:	9001      	str	r0, [sp, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f1a1 0404 	sub.w	r4, r1, #4
 8001a76:	bfb8      	it	lt
 8001a78:	18e4      	addlt	r4, r4, r3
 8001a7a:	f000 f913 	bl	8001ca4 <__malloc_lock>
 8001a7e:	4a1e      	ldr	r2, [pc, #120]	; (8001af8 <_free_r+0x94>)
 8001a80:	9801      	ldr	r0, [sp, #4]
 8001a82:	6813      	ldr	r3, [r2, #0]
 8001a84:	b933      	cbnz	r3, 8001a94 <_free_r+0x30>
 8001a86:	6063      	str	r3, [r4, #4]
 8001a88:	6014      	str	r4, [r2, #0]
 8001a8a:	b003      	add	sp, #12
 8001a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a90:	f000 b90e 	b.w	8001cb0 <__malloc_unlock>
 8001a94:	42a3      	cmp	r3, r4
 8001a96:	d908      	bls.n	8001aaa <_free_r+0x46>
 8001a98:	6825      	ldr	r5, [r4, #0]
 8001a9a:	1961      	adds	r1, r4, r5
 8001a9c:	428b      	cmp	r3, r1
 8001a9e:	bf01      	itttt	eq
 8001aa0:	6819      	ldreq	r1, [r3, #0]
 8001aa2:	685b      	ldreq	r3, [r3, #4]
 8001aa4:	1949      	addeq	r1, r1, r5
 8001aa6:	6021      	streq	r1, [r4, #0]
 8001aa8:	e7ed      	b.n	8001a86 <_free_r+0x22>
 8001aaa:	461a      	mov	r2, r3
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	b10b      	cbz	r3, 8001ab4 <_free_r+0x50>
 8001ab0:	42a3      	cmp	r3, r4
 8001ab2:	d9fa      	bls.n	8001aaa <_free_r+0x46>
 8001ab4:	6811      	ldr	r1, [r2, #0]
 8001ab6:	1855      	adds	r5, r2, r1
 8001ab8:	42a5      	cmp	r5, r4
 8001aba:	d10b      	bne.n	8001ad4 <_free_r+0x70>
 8001abc:	6824      	ldr	r4, [r4, #0]
 8001abe:	4421      	add	r1, r4
 8001ac0:	1854      	adds	r4, r2, r1
 8001ac2:	42a3      	cmp	r3, r4
 8001ac4:	6011      	str	r1, [r2, #0]
 8001ac6:	d1e0      	bne.n	8001a8a <_free_r+0x26>
 8001ac8:	681c      	ldr	r4, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	6053      	str	r3, [r2, #4]
 8001ace:	4421      	add	r1, r4
 8001ad0:	6011      	str	r1, [r2, #0]
 8001ad2:	e7da      	b.n	8001a8a <_free_r+0x26>
 8001ad4:	d902      	bls.n	8001adc <_free_r+0x78>
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	6003      	str	r3, [r0, #0]
 8001ada:	e7d6      	b.n	8001a8a <_free_r+0x26>
 8001adc:	6825      	ldr	r5, [r4, #0]
 8001ade:	1961      	adds	r1, r4, r5
 8001ae0:	428b      	cmp	r3, r1
 8001ae2:	bf04      	itt	eq
 8001ae4:	6819      	ldreq	r1, [r3, #0]
 8001ae6:	685b      	ldreq	r3, [r3, #4]
 8001ae8:	6063      	str	r3, [r4, #4]
 8001aea:	bf04      	itt	eq
 8001aec:	1949      	addeq	r1, r1, r5
 8001aee:	6021      	streq	r1, [r4, #0]
 8001af0:	6054      	str	r4, [r2, #4]
 8001af2:	e7ca      	b.n	8001a8a <_free_r+0x26>
 8001af4:	b003      	add	sp, #12
 8001af6:	bd30      	pop	{r4, r5, pc}
 8001af8:	2000011c 	.word	0x2000011c

08001afc <sbrk_aligned>:
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	4e0e      	ldr	r6, [pc, #56]	; (8001b38 <sbrk_aligned+0x3c>)
 8001b00:	460c      	mov	r4, r1
 8001b02:	6831      	ldr	r1, [r6, #0]
 8001b04:	4605      	mov	r5, r0
 8001b06:	b911      	cbnz	r1, 8001b0e <sbrk_aligned+0x12>
 8001b08:	f000 f8bc 	bl	8001c84 <_sbrk_r>
 8001b0c:	6030      	str	r0, [r6, #0]
 8001b0e:	4621      	mov	r1, r4
 8001b10:	4628      	mov	r0, r5
 8001b12:	f000 f8b7 	bl	8001c84 <_sbrk_r>
 8001b16:	1c43      	adds	r3, r0, #1
 8001b18:	d00a      	beq.n	8001b30 <sbrk_aligned+0x34>
 8001b1a:	1cc4      	adds	r4, r0, #3
 8001b1c:	f024 0403 	bic.w	r4, r4, #3
 8001b20:	42a0      	cmp	r0, r4
 8001b22:	d007      	beq.n	8001b34 <sbrk_aligned+0x38>
 8001b24:	1a21      	subs	r1, r4, r0
 8001b26:	4628      	mov	r0, r5
 8001b28:	f000 f8ac 	bl	8001c84 <_sbrk_r>
 8001b2c:	3001      	adds	r0, #1
 8001b2e:	d101      	bne.n	8001b34 <sbrk_aligned+0x38>
 8001b30:	f04f 34ff 	mov.w	r4, #4294967295
 8001b34:	4620      	mov	r0, r4
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
 8001b38:	20000120 	.word	0x20000120

08001b3c <_malloc_r>:
 8001b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b40:	1ccd      	adds	r5, r1, #3
 8001b42:	f025 0503 	bic.w	r5, r5, #3
 8001b46:	3508      	adds	r5, #8
 8001b48:	2d0c      	cmp	r5, #12
 8001b4a:	bf38      	it	cc
 8001b4c:	250c      	movcc	r5, #12
 8001b4e:	2d00      	cmp	r5, #0
 8001b50:	4607      	mov	r7, r0
 8001b52:	db01      	blt.n	8001b58 <_malloc_r+0x1c>
 8001b54:	42a9      	cmp	r1, r5
 8001b56:	d905      	bls.n	8001b64 <_malloc_r+0x28>
 8001b58:	230c      	movs	r3, #12
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	4630      	mov	r0, r6
 8001b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b64:	4e2e      	ldr	r6, [pc, #184]	; (8001c20 <_malloc_r+0xe4>)
 8001b66:	f000 f89d 	bl	8001ca4 <__malloc_lock>
 8001b6a:	6833      	ldr	r3, [r6, #0]
 8001b6c:	461c      	mov	r4, r3
 8001b6e:	bb34      	cbnz	r4, 8001bbe <_malloc_r+0x82>
 8001b70:	4629      	mov	r1, r5
 8001b72:	4638      	mov	r0, r7
 8001b74:	f7ff ffc2 	bl	8001afc <sbrk_aligned>
 8001b78:	1c43      	adds	r3, r0, #1
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	d14d      	bne.n	8001c1a <_malloc_r+0xde>
 8001b7e:	6834      	ldr	r4, [r6, #0]
 8001b80:	4626      	mov	r6, r4
 8001b82:	2e00      	cmp	r6, #0
 8001b84:	d140      	bne.n	8001c08 <_malloc_r+0xcc>
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	4631      	mov	r1, r6
 8001b8a:	4638      	mov	r0, r7
 8001b8c:	eb04 0803 	add.w	r8, r4, r3
 8001b90:	f000 f878 	bl	8001c84 <_sbrk_r>
 8001b94:	4580      	cmp	r8, r0
 8001b96:	d13a      	bne.n	8001c0e <_malloc_r+0xd2>
 8001b98:	6821      	ldr	r1, [r4, #0]
 8001b9a:	3503      	adds	r5, #3
 8001b9c:	1a6d      	subs	r5, r5, r1
 8001b9e:	f025 0503 	bic.w	r5, r5, #3
 8001ba2:	3508      	adds	r5, #8
 8001ba4:	2d0c      	cmp	r5, #12
 8001ba6:	bf38      	it	cc
 8001ba8:	250c      	movcc	r5, #12
 8001baa:	4629      	mov	r1, r5
 8001bac:	4638      	mov	r0, r7
 8001bae:	f7ff ffa5 	bl	8001afc <sbrk_aligned>
 8001bb2:	3001      	adds	r0, #1
 8001bb4:	d02b      	beq.n	8001c0e <_malloc_r+0xd2>
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	442b      	add	r3, r5
 8001bba:	6023      	str	r3, [r4, #0]
 8001bbc:	e00e      	b.n	8001bdc <_malloc_r+0xa0>
 8001bbe:	6822      	ldr	r2, [r4, #0]
 8001bc0:	1b52      	subs	r2, r2, r5
 8001bc2:	d41e      	bmi.n	8001c02 <_malloc_r+0xc6>
 8001bc4:	2a0b      	cmp	r2, #11
 8001bc6:	d916      	bls.n	8001bf6 <_malloc_r+0xba>
 8001bc8:	1961      	adds	r1, r4, r5
 8001bca:	42a3      	cmp	r3, r4
 8001bcc:	6025      	str	r5, [r4, #0]
 8001bce:	bf18      	it	ne
 8001bd0:	6059      	strne	r1, [r3, #4]
 8001bd2:	6863      	ldr	r3, [r4, #4]
 8001bd4:	bf08      	it	eq
 8001bd6:	6031      	streq	r1, [r6, #0]
 8001bd8:	5162      	str	r2, [r4, r5]
 8001bda:	604b      	str	r3, [r1, #4]
 8001bdc:	4638      	mov	r0, r7
 8001bde:	f104 060b 	add.w	r6, r4, #11
 8001be2:	f000 f865 	bl	8001cb0 <__malloc_unlock>
 8001be6:	f026 0607 	bic.w	r6, r6, #7
 8001bea:	1d23      	adds	r3, r4, #4
 8001bec:	1af2      	subs	r2, r6, r3
 8001bee:	d0b6      	beq.n	8001b5e <_malloc_r+0x22>
 8001bf0:	1b9b      	subs	r3, r3, r6
 8001bf2:	50a3      	str	r3, [r4, r2]
 8001bf4:	e7b3      	b.n	8001b5e <_malloc_r+0x22>
 8001bf6:	6862      	ldr	r2, [r4, #4]
 8001bf8:	42a3      	cmp	r3, r4
 8001bfa:	bf0c      	ite	eq
 8001bfc:	6032      	streq	r2, [r6, #0]
 8001bfe:	605a      	strne	r2, [r3, #4]
 8001c00:	e7ec      	b.n	8001bdc <_malloc_r+0xa0>
 8001c02:	4623      	mov	r3, r4
 8001c04:	6864      	ldr	r4, [r4, #4]
 8001c06:	e7b2      	b.n	8001b6e <_malloc_r+0x32>
 8001c08:	4634      	mov	r4, r6
 8001c0a:	6876      	ldr	r6, [r6, #4]
 8001c0c:	e7b9      	b.n	8001b82 <_malloc_r+0x46>
 8001c0e:	230c      	movs	r3, #12
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4638      	mov	r0, r7
 8001c14:	f000 f84c 	bl	8001cb0 <__malloc_unlock>
 8001c18:	e7a1      	b.n	8001b5e <_malloc_r+0x22>
 8001c1a:	6025      	str	r5, [r4, #0]
 8001c1c:	e7de      	b.n	8001bdc <_malloc_r+0xa0>
 8001c1e:	bf00      	nop
 8001c20:	2000011c 	.word	0x2000011c

08001c24 <_realloc_r>:
 8001c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c28:	4680      	mov	r8, r0
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	460e      	mov	r6, r1
 8001c2e:	b921      	cbnz	r1, 8001c3a <_realloc_r+0x16>
 8001c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c34:	4611      	mov	r1, r2
 8001c36:	f7ff bf81 	b.w	8001b3c <_malloc_r>
 8001c3a:	b92a      	cbnz	r2, 8001c48 <_realloc_r+0x24>
 8001c3c:	f7ff ff12 	bl	8001a64 <_free_r>
 8001c40:	4625      	mov	r5, r4
 8001c42:	4628      	mov	r0, r5
 8001c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c48:	f000 f838 	bl	8001cbc <_malloc_usable_size_r>
 8001c4c:	4284      	cmp	r4, r0
 8001c4e:	4607      	mov	r7, r0
 8001c50:	d802      	bhi.n	8001c58 <_realloc_r+0x34>
 8001c52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001c56:	d812      	bhi.n	8001c7e <_realloc_r+0x5a>
 8001c58:	4621      	mov	r1, r4
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	f7ff ff6e 	bl	8001b3c <_malloc_r>
 8001c60:	4605      	mov	r5, r0
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d0ed      	beq.n	8001c42 <_realloc_r+0x1e>
 8001c66:	42bc      	cmp	r4, r7
 8001c68:	4622      	mov	r2, r4
 8001c6a:	4631      	mov	r1, r6
 8001c6c:	bf28      	it	cs
 8001c6e:	463a      	movcs	r2, r7
 8001c70:	f7ff fed0 	bl	8001a14 <memcpy>
 8001c74:	4631      	mov	r1, r6
 8001c76:	4640      	mov	r0, r8
 8001c78:	f7ff fef4 	bl	8001a64 <_free_r>
 8001c7c:	e7e1      	b.n	8001c42 <_realloc_r+0x1e>
 8001c7e:	4635      	mov	r5, r6
 8001c80:	e7df      	b.n	8001c42 <_realloc_r+0x1e>
	...

08001c84 <_sbrk_r>:
 8001c84:	b538      	push	{r3, r4, r5, lr}
 8001c86:	4d06      	ldr	r5, [pc, #24]	; (8001ca0 <_sbrk_r+0x1c>)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	4608      	mov	r0, r1
 8001c8e:	602b      	str	r3, [r5, #0]
 8001c90:	f7fe fdf0 	bl	8000874 <_sbrk>
 8001c94:	1c43      	adds	r3, r0, #1
 8001c96:	d102      	bne.n	8001c9e <_sbrk_r+0x1a>
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	b103      	cbz	r3, 8001c9e <_sbrk_r+0x1a>
 8001c9c:	6023      	str	r3, [r4, #0]
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ca0:	20000124 	.word	0x20000124

08001ca4 <__malloc_lock>:
 8001ca4:	4801      	ldr	r0, [pc, #4]	; (8001cac <__malloc_lock+0x8>)
 8001ca6:	f000 b811 	b.w	8001ccc <__retarget_lock_acquire_recursive>
 8001caa:	bf00      	nop
 8001cac:	20000128 	.word	0x20000128

08001cb0 <__malloc_unlock>:
 8001cb0:	4801      	ldr	r0, [pc, #4]	; (8001cb8 <__malloc_unlock+0x8>)
 8001cb2:	f000 b80c 	b.w	8001cce <__retarget_lock_release_recursive>
 8001cb6:	bf00      	nop
 8001cb8:	20000128 	.word	0x20000128

08001cbc <_malloc_usable_size_r>:
 8001cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cc0:	1f18      	subs	r0, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bfbc      	itt	lt
 8001cc6:	580b      	ldrlt	r3, [r1, r0]
 8001cc8:	18c0      	addlt	r0, r0, r3
 8001cca:	4770      	bx	lr

08001ccc <__retarget_lock_acquire_recursive>:
 8001ccc:	4770      	bx	lr

08001cce <__retarget_lock_release_recursive>:
 8001cce:	4770      	bx	lr

08001cd0 <_init>:
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd2:	bf00      	nop
 8001cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd6:	bc08      	pop	{r3}
 8001cd8:	469e      	mov	lr, r3
 8001cda:	4770      	bx	lr

08001cdc <_fini>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	bf00      	nop
 8001ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce2:	bc08      	pop	{r3}
 8001ce4:	469e      	mov	lr, r3
 8001ce6:	4770      	bx	lr
