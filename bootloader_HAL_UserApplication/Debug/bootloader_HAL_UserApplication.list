
bootloader_HAL_UserApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c1c  08008190  08008190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08009dac  08009dac  00009dac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e38  08009e38  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  08009e38  08009e38  00009e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e40  08009e40  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e40  08009e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e44  08009e44  00009e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009e48  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
 10 .bss          000000c4  20000070  20000070  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00010070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d34  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000191b  00000000  00000000  00019dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005a0  00000000  00000000  0001b6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000770  00000000  00000000  0001bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020445  00000000  00000000  0001c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8a1  00000000  00000000  0003c845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d1a  00000000  00000000  000470e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00109e00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001238  00000000  00000000  00109e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000057d5  00000000  00000000  0010b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	; (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000070 	.word	0x20000070
 80081ac:	00000000 	.word	0x00000000
 80081b0:	08009d94 	.word	0x08009d94

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	; (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	; (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20000074 	.word	0x20000074
 80081cc:	08009d94 	.word	0x08009d94

080081d0 <strlen>:
 80081d0:	4603      	mov	r3, r0
 80081d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	d1fb      	bne.n	80081d2 <strlen+0x2>
 80081da:	1a18      	subs	r0, r3, r0
 80081dc:	3801      	subs	r0, #1
 80081de:	4770      	bx	lr

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <__aeabi_uldivmod>:
 8008280:	b953      	cbnz	r3, 8008298 <__aeabi_uldivmod+0x18>
 8008282:	b94a      	cbnz	r2, 8008298 <__aeabi_uldivmod+0x18>
 8008284:	2900      	cmp	r1, #0
 8008286:	bf08      	it	eq
 8008288:	2800      	cmpeq	r0, #0
 800828a:	bf1c      	itt	ne
 800828c:	f04f 31ff 	movne.w	r1, #4294967295
 8008290:	f04f 30ff 	movne.w	r0, #4294967295
 8008294:	f000 b974 	b.w	8008580 <__aeabi_idiv0>
 8008298:	f1ad 0c08 	sub.w	ip, sp, #8
 800829c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082a0:	f000 f806 	bl	80082b0 <__udivmoddi4>
 80082a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr

080082b0 <__udivmoddi4>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	9d08      	ldr	r5, [sp, #32]
 80082b6:	4604      	mov	r4, r0
 80082b8:	468e      	mov	lr, r1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d14d      	bne.n	800835a <__udivmoddi4+0xaa>
 80082be:	428a      	cmp	r2, r1
 80082c0:	4694      	mov	ip, r2
 80082c2:	d969      	bls.n	8008398 <__udivmoddi4+0xe8>
 80082c4:	fab2 f282 	clz	r2, r2
 80082c8:	b152      	cbz	r2, 80082e0 <__udivmoddi4+0x30>
 80082ca:	fa01 f302 	lsl.w	r3, r1, r2
 80082ce:	f1c2 0120 	rsb	r1, r2, #32
 80082d2:	fa20 f101 	lsr.w	r1, r0, r1
 80082d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80082da:	ea41 0e03 	orr.w	lr, r1, r3
 80082de:	4094      	lsls	r4, r2
 80082e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80082e4:	0c21      	lsrs	r1, r4, #16
 80082e6:	fbbe f6f8 	udiv	r6, lr, r8
 80082ea:	fa1f f78c 	uxth.w	r7, ip
 80082ee:	fb08 e316 	mls	r3, r8, r6, lr
 80082f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082f6:	fb06 f107 	mul.w	r1, r6, r7
 80082fa:	4299      	cmp	r1, r3
 80082fc:	d90a      	bls.n	8008314 <__udivmoddi4+0x64>
 80082fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008302:	f106 30ff 	add.w	r0, r6, #4294967295
 8008306:	f080 811f 	bcs.w	8008548 <__udivmoddi4+0x298>
 800830a:	4299      	cmp	r1, r3
 800830c:	f240 811c 	bls.w	8008548 <__udivmoddi4+0x298>
 8008310:	3e02      	subs	r6, #2
 8008312:	4463      	add	r3, ip
 8008314:	1a5b      	subs	r3, r3, r1
 8008316:	b2a4      	uxth	r4, r4
 8008318:	fbb3 f0f8 	udiv	r0, r3, r8
 800831c:	fb08 3310 	mls	r3, r8, r0, r3
 8008320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008324:	fb00 f707 	mul.w	r7, r0, r7
 8008328:	42a7      	cmp	r7, r4
 800832a:	d90a      	bls.n	8008342 <__udivmoddi4+0x92>
 800832c:	eb1c 0404 	adds.w	r4, ip, r4
 8008330:	f100 33ff 	add.w	r3, r0, #4294967295
 8008334:	f080 810a 	bcs.w	800854c <__udivmoddi4+0x29c>
 8008338:	42a7      	cmp	r7, r4
 800833a:	f240 8107 	bls.w	800854c <__udivmoddi4+0x29c>
 800833e:	4464      	add	r4, ip
 8008340:	3802      	subs	r0, #2
 8008342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008346:	1be4      	subs	r4, r4, r7
 8008348:	2600      	movs	r6, #0
 800834a:	b11d      	cbz	r5, 8008354 <__udivmoddi4+0xa4>
 800834c:	40d4      	lsrs	r4, r2
 800834e:	2300      	movs	r3, #0
 8008350:	e9c5 4300 	strd	r4, r3, [r5]
 8008354:	4631      	mov	r1, r6
 8008356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835a:	428b      	cmp	r3, r1
 800835c:	d909      	bls.n	8008372 <__udivmoddi4+0xc2>
 800835e:	2d00      	cmp	r5, #0
 8008360:	f000 80ef 	beq.w	8008542 <__udivmoddi4+0x292>
 8008364:	2600      	movs	r6, #0
 8008366:	e9c5 0100 	strd	r0, r1, [r5]
 800836a:	4630      	mov	r0, r6
 800836c:	4631      	mov	r1, r6
 800836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008372:	fab3 f683 	clz	r6, r3
 8008376:	2e00      	cmp	r6, #0
 8008378:	d14a      	bne.n	8008410 <__udivmoddi4+0x160>
 800837a:	428b      	cmp	r3, r1
 800837c:	d302      	bcc.n	8008384 <__udivmoddi4+0xd4>
 800837e:	4282      	cmp	r2, r0
 8008380:	f200 80f9 	bhi.w	8008576 <__udivmoddi4+0x2c6>
 8008384:	1a84      	subs	r4, r0, r2
 8008386:	eb61 0303 	sbc.w	r3, r1, r3
 800838a:	2001      	movs	r0, #1
 800838c:	469e      	mov	lr, r3
 800838e:	2d00      	cmp	r5, #0
 8008390:	d0e0      	beq.n	8008354 <__udivmoddi4+0xa4>
 8008392:	e9c5 4e00 	strd	r4, lr, [r5]
 8008396:	e7dd      	b.n	8008354 <__udivmoddi4+0xa4>
 8008398:	b902      	cbnz	r2, 800839c <__udivmoddi4+0xec>
 800839a:	deff      	udf	#255	; 0xff
 800839c:	fab2 f282 	clz	r2, r2
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	f040 8092 	bne.w	80084ca <__udivmoddi4+0x21a>
 80083a6:	eba1 010c 	sub.w	r1, r1, ip
 80083aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083ae:	fa1f fe8c 	uxth.w	lr, ip
 80083b2:	2601      	movs	r6, #1
 80083b4:	0c20      	lsrs	r0, r4, #16
 80083b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80083ba:	fb07 1113 	mls	r1, r7, r3, r1
 80083be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80083c2:	fb0e f003 	mul.w	r0, lr, r3
 80083c6:	4288      	cmp	r0, r1
 80083c8:	d908      	bls.n	80083dc <__udivmoddi4+0x12c>
 80083ca:	eb1c 0101 	adds.w	r1, ip, r1
 80083ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80083d2:	d202      	bcs.n	80083da <__udivmoddi4+0x12a>
 80083d4:	4288      	cmp	r0, r1
 80083d6:	f200 80cb 	bhi.w	8008570 <__udivmoddi4+0x2c0>
 80083da:	4643      	mov	r3, r8
 80083dc:	1a09      	subs	r1, r1, r0
 80083de:	b2a4      	uxth	r4, r4
 80083e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80083e4:	fb07 1110 	mls	r1, r7, r0, r1
 80083e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80083ec:	fb0e fe00 	mul.w	lr, lr, r0
 80083f0:	45a6      	cmp	lr, r4
 80083f2:	d908      	bls.n	8008406 <__udivmoddi4+0x156>
 80083f4:	eb1c 0404 	adds.w	r4, ip, r4
 80083f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80083fc:	d202      	bcs.n	8008404 <__udivmoddi4+0x154>
 80083fe:	45a6      	cmp	lr, r4
 8008400:	f200 80bb 	bhi.w	800857a <__udivmoddi4+0x2ca>
 8008404:	4608      	mov	r0, r1
 8008406:	eba4 040e 	sub.w	r4, r4, lr
 800840a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800840e:	e79c      	b.n	800834a <__udivmoddi4+0x9a>
 8008410:	f1c6 0720 	rsb	r7, r6, #32
 8008414:	40b3      	lsls	r3, r6
 8008416:	fa22 fc07 	lsr.w	ip, r2, r7
 800841a:	ea4c 0c03 	orr.w	ip, ip, r3
 800841e:	fa20 f407 	lsr.w	r4, r0, r7
 8008422:	fa01 f306 	lsl.w	r3, r1, r6
 8008426:	431c      	orrs	r4, r3
 8008428:	40f9      	lsrs	r1, r7
 800842a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800842e:	fa00 f306 	lsl.w	r3, r0, r6
 8008432:	fbb1 f8f9 	udiv	r8, r1, r9
 8008436:	0c20      	lsrs	r0, r4, #16
 8008438:	fa1f fe8c 	uxth.w	lr, ip
 800843c:	fb09 1118 	mls	r1, r9, r8, r1
 8008440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008444:	fb08 f00e 	mul.w	r0, r8, lr
 8008448:	4288      	cmp	r0, r1
 800844a:	fa02 f206 	lsl.w	r2, r2, r6
 800844e:	d90b      	bls.n	8008468 <__udivmoddi4+0x1b8>
 8008450:	eb1c 0101 	adds.w	r1, ip, r1
 8008454:	f108 3aff 	add.w	sl, r8, #4294967295
 8008458:	f080 8088 	bcs.w	800856c <__udivmoddi4+0x2bc>
 800845c:	4288      	cmp	r0, r1
 800845e:	f240 8085 	bls.w	800856c <__udivmoddi4+0x2bc>
 8008462:	f1a8 0802 	sub.w	r8, r8, #2
 8008466:	4461      	add	r1, ip
 8008468:	1a09      	subs	r1, r1, r0
 800846a:	b2a4      	uxth	r4, r4
 800846c:	fbb1 f0f9 	udiv	r0, r1, r9
 8008470:	fb09 1110 	mls	r1, r9, r0, r1
 8008474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008478:	fb00 fe0e 	mul.w	lr, r0, lr
 800847c:	458e      	cmp	lr, r1
 800847e:	d908      	bls.n	8008492 <__udivmoddi4+0x1e2>
 8008480:	eb1c 0101 	adds.w	r1, ip, r1
 8008484:	f100 34ff 	add.w	r4, r0, #4294967295
 8008488:	d26c      	bcs.n	8008564 <__udivmoddi4+0x2b4>
 800848a:	458e      	cmp	lr, r1
 800848c:	d96a      	bls.n	8008564 <__udivmoddi4+0x2b4>
 800848e:	3802      	subs	r0, #2
 8008490:	4461      	add	r1, ip
 8008492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008496:	fba0 9402 	umull	r9, r4, r0, r2
 800849a:	eba1 010e 	sub.w	r1, r1, lr
 800849e:	42a1      	cmp	r1, r4
 80084a0:	46c8      	mov	r8, r9
 80084a2:	46a6      	mov	lr, r4
 80084a4:	d356      	bcc.n	8008554 <__udivmoddi4+0x2a4>
 80084a6:	d053      	beq.n	8008550 <__udivmoddi4+0x2a0>
 80084a8:	b15d      	cbz	r5, 80084c2 <__udivmoddi4+0x212>
 80084aa:	ebb3 0208 	subs.w	r2, r3, r8
 80084ae:	eb61 010e 	sbc.w	r1, r1, lr
 80084b2:	fa01 f707 	lsl.w	r7, r1, r7
 80084b6:	fa22 f306 	lsr.w	r3, r2, r6
 80084ba:	40f1      	lsrs	r1, r6
 80084bc:	431f      	orrs	r7, r3
 80084be:	e9c5 7100 	strd	r7, r1, [r5]
 80084c2:	2600      	movs	r6, #0
 80084c4:	4631      	mov	r1, r6
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	f1c2 0320 	rsb	r3, r2, #32
 80084ce:	40d8      	lsrs	r0, r3
 80084d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80084d4:	fa21 f303 	lsr.w	r3, r1, r3
 80084d8:	4091      	lsls	r1, r2
 80084da:	4301      	orrs	r1, r0
 80084dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80084e0:	fa1f fe8c 	uxth.w	lr, ip
 80084e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80084e8:	fb07 3610 	mls	r6, r7, r0, r3
 80084ec:	0c0b      	lsrs	r3, r1, #16
 80084ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80084f2:	fb00 f60e 	mul.w	r6, r0, lr
 80084f6:	429e      	cmp	r6, r3
 80084f8:	fa04 f402 	lsl.w	r4, r4, r2
 80084fc:	d908      	bls.n	8008510 <__udivmoddi4+0x260>
 80084fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008502:	f100 38ff 	add.w	r8, r0, #4294967295
 8008506:	d22f      	bcs.n	8008568 <__udivmoddi4+0x2b8>
 8008508:	429e      	cmp	r6, r3
 800850a:	d92d      	bls.n	8008568 <__udivmoddi4+0x2b8>
 800850c:	3802      	subs	r0, #2
 800850e:	4463      	add	r3, ip
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	b289      	uxth	r1, r1
 8008514:	fbb3 f6f7 	udiv	r6, r3, r7
 8008518:	fb07 3316 	mls	r3, r7, r6, r3
 800851c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008520:	fb06 f30e 	mul.w	r3, r6, lr
 8008524:	428b      	cmp	r3, r1
 8008526:	d908      	bls.n	800853a <__udivmoddi4+0x28a>
 8008528:	eb1c 0101 	adds.w	r1, ip, r1
 800852c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008530:	d216      	bcs.n	8008560 <__udivmoddi4+0x2b0>
 8008532:	428b      	cmp	r3, r1
 8008534:	d914      	bls.n	8008560 <__udivmoddi4+0x2b0>
 8008536:	3e02      	subs	r6, #2
 8008538:	4461      	add	r1, ip
 800853a:	1ac9      	subs	r1, r1, r3
 800853c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008540:	e738      	b.n	80083b4 <__udivmoddi4+0x104>
 8008542:	462e      	mov	r6, r5
 8008544:	4628      	mov	r0, r5
 8008546:	e705      	b.n	8008354 <__udivmoddi4+0xa4>
 8008548:	4606      	mov	r6, r0
 800854a:	e6e3      	b.n	8008314 <__udivmoddi4+0x64>
 800854c:	4618      	mov	r0, r3
 800854e:	e6f8      	b.n	8008342 <__udivmoddi4+0x92>
 8008550:	454b      	cmp	r3, r9
 8008552:	d2a9      	bcs.n	80084a8 <__udivmoddi4+0x1f8>
 8008554:	ebb9 0802 	subs.w	r8, r9, r2
 8008558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800855c:	3801      	subs	r0, #1
 800855e:	e7a3      	b.n	80084a8 <__udivmoddi4+0x1f8>
 8008560:	4646      	mov	r6, r8
 8008562:	e7ea      	b.n	800853a <__udivmoddi4+0x28a>
 8008564:	4620      	mov	r0, r4
 8008566:	e794      	b.n	8008492 <__udivmoddi4+0x1e2>
 8008568:	4640      	mov	r0, r8
 800856a:	e7d1      	b.n	8008510 <__udivmoddi4+0x260>
 800856c:	46d0      	mov	r8, sl
 800856e:	e77b      	b.n	8008468 <__udivmoddi4+0x1b8>
 8008570:	3b02      	subs	r3, #2
 8008572:	4461      	add	r1, ip
 8008574:	e732      	b.n	80083dc <__udivmoddi4+0x12c>
 8008576:	4630      	mov	r0, r6
 8008578:	e709      	b.n	800838e <__udivmoddi4+0xde>
 800857a:	4464      	add	r4, ip
 800857c:	3802      	subs	r0, #2
 800857e:	e742      	b.n	8008406 <__udivmoddi4+0x156>

08008580 <__aeabi_idiv0>:
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop

08008584 <printMessages>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printMessages(char *format, ...)
{
 8008584:	b40f      	push	{r0, r1, r2, r3}
 8008586:	b500      	push	{lr}
 8008588:	b09b      	sub	sp, #108	; 0x6c
 800858a:	aa1c      	add	r2, sp, #112	; 0x70
	char comingMessage[100];

	va_list vaList;
	va_start(vaList, format);
	vsprintf(comingMessage, format, vaList);
 800858c:	a801      	add	r0, sp, #4
{
 800858e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(vaList, format);
 8008592:	9200      	str	r2, [sp, #0]
	vsprintf(comingMessage, format, vaList);
 8008594:	f000 ffa6 	bl	80094e4 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)comingMessage, strlen(comingMessage), 100);
 8008598:	a801      	add	r0, sp, #4
 800859a:	f7ff fe19 	bl	80081d0 <strlen>
 800859e:	2364      	movs	r3, #100	; 0x64
 80085a0:	b282      	uxth	r2, r0
 80085a2:	a901      	add	r1, sp, #4
 80085a4:	4803      	ldr	r0, [pc, #12]	; (80085b4 <printMessages+0x30>)
 80085a6:	f000 feff 	bl	80093a8 <HAL_UART_Transmit>
	va_end(vaList);
}
 80085aa:	b01b      	add	sp, #108	; 0x6c
 80085ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80085b0:	b004      	add	sp, #16
 80085b2:	4770      	bx	lr
 80085b4:	20000094 	.word	0x20000094

080085b8 <HAL_GPIO_EXTI_Callback>:
{
	if(GPIO_Pin == GPIO_PIN_0)
	{

	}
}
 80085b8:	4770      	bx	lr
	...

080085bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085bc:	b500      	push	{lr}
 80085be:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085c0:	222c      	movs	r2, #44	; 0x2c
 80085c2:	2100      	movs	r1, #0
 80085c4:	a809      	add	r0, sp, #36	; 0x24
 80085c6:	f000 ff6f 	bl	80094a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085ca:	2214      	movs	r2, #20
 80085cc:	2100      	movs	r1, #0
 80085ce:	a803      	add	r0, sp, #12
 80085d0:	f000 ff6a 	bl	80094a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80085d4:	2300      	movs	r3, #0
 80085d6:	4a19      	ldr	r2, [pc, #100]	; (800863c <SystemClock_Config+0x80>)
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80085dc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80085e0:	6411      	str	r1, [r2, #64]	; 0x40
 80085e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80085e4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80085e8:	9201      	str	r2, [sp, #4]
 80085ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80085ec:	4a14      	ldr	r2, [pc, #80]	; (8008640 <SystemClock_Config+0x84>)
 80085ee:	9302      	str	r3, [sp, #8]
 80085f0:	6811      	ldr	r1, [r2, #0]
 80085f2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80085f6:	6011      	str	r1, [r2, #0]
 80085f8:	6812      	ldr	r2, [r2, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80085fa:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80085fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008600:	9202      	str	r2, [sp, #8]
 8008602:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008604:	2202      	movs	r2, #2
 8008606:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008608:	2001      	movs	r0, #1
 800860a:	2210      	movs	r2, #16
 800860c:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008610:	a808      	add	r0, sp, #32
 8008612:	f000 fb6d 	bl	8008cf0 <HAL_RCC_OscConfig>
 8008616:	4601      	mov	r1, r0
 8008618:	b108      	cbz	r0, 800861e <SystemClock_Config+0x62>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800861a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800861c:	e7fe      	b.n	800861c <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800861e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008620:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008624:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008628:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800862a:	a803      	add	r0, sp, #12
 800862c:	f000 fd3e 	bl	80090ac <HAL_RCC_ClockConfig>
 8008630:	b108      	cbz	r0, 8008636 <SystemClock_Config+0x7a>
 8008632:	b672      	cpsid	i
  while (1)
 8008634:	e7fe      	b.n	8008634 <SystemClock_Config+0x78>
}
 8008636:	b015      	add	sp, #84	; 0x54
 8008638:	f85d fb04 	ldr.w	pc, [sp], #4
 800863c:	40023800 	.word	0x40023800
 8008640:	40007000 	.word	0x40007000

08008644 <main>:
{
 8008644:	b500      	push	{lr}
 8008646:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8008648:	f000 f9b0 	bl	80089ac <HAL_Init>
  SystemClock_Config();
 800864c:	f7ff ffb6 	bl	80085bc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008650:	2214      	movs	r2, #20
 8008652:	2100      	movs	r1, #0
 8008654:	a803      	add	r0, sp, #12
 8008656:	f000 ff27 	bl	80094a8 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800865a:	2400      	movs	r4, #0
 800865c:	4b3a      	ldr	r3, [pc, #232]	; (8008748 <main+0x104>)
 800865e:	9400      	str	r4, [sp, #0]
 8008660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008662:	483a      	ldr	r0, [pc, #232]	; (800874c <main+0x108>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	631a      	str	r2, [r3, #48]	; 0x30
 800866a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800866c:	f002 0201 	and.w	r2, r2, #1
 8008670:	9200      	str	r2, [sp, #0]
 8008672:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008674:	9401      	str	r4, [sp, #4]
 8008676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008678:	f042 0208 	orr.w	r2, r2, #8
 800867c:	631a      	str	r2, [r3, #48]	; 0x30
 800867e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008680:	f002 0208 	and.w	r2, r2, #8
 8008684:	9201      	str	r2, [sp, #4]
 8008686:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008688:	9402      	str	r4, [sp, #8]
 800868a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800868c:	f042 0204 	orr.w	r2, r2, #4
 8008690:	631a      	str	r2, [r3, #48]	; 0x30
 8008692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008694:	f003 0304 	and.w	r3, r3, #4
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008698:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800869a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800869c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086a0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80086a2:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80086a4:	f000 fb12 	bl	8008ccc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80086a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086ac:	4828      	ldr	r0, [pc, #160]	; (8008750 <main+0x10c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ae:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80086b2:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b6:	f000 fa2f 	bl	8008b18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80086ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086be:	4823      	ldr	r0, [pc, #140]	; (800874c <main+0x108>)
 80086c0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086c2:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086c6:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086ca:	f000 fa25 	bl	8008b18 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80086ce:	4622      	mov	r2, r4
 80086d0:	4621      	mov	r1, r4
 80086d2:	2006      	movs	r0, #6
 80086d4:	f000 f9bc 	bl	8008a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80086d8:	2006      	movs	r0, #6
 80086da:	f000 f9eb 	bl	8008ab4 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 80086de:	481d      	ldr	r0, [pc, #116]	; (8008754 <main+0x110>)
 80086e0:	4b1d      	ldr	r3, [pc, #116]	; (8008758 <main+0x114>)
 80086e2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80086e4:	f000 fa08 	bl	8008af8 <HAL_CRC_Init>
 80086e8:	4603      	mov	r3, r0
 80086ea:	b108      	cbz	r0, 80086f0 <main+0xac>
 80086ec:	b672      	cpsid	i
  while (1)
 80086ee:	e7fe      	b.n	80086ee <main+0xaa>
  huart2.Instance = USART2;
 80086f0:	481a      	ldr	r0, [pc, #104]	; (800875c <main+0x118>)
  huart2.Init.BaudRate = 115200;
 80086f2:	4a1b      	ldr	r2, [pc, #108]	; (8008760 <main+0x11c>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80086f4:	6103      	str	r3, [r0, #16]
  huart2.Init.BaudRate = 115200;
 80086f6:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80086fa:	240c      	movs	r4, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80086fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008700:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008704:	61c3      	str	r3, [r0, #28]
  huart2.Init.BaudRate = 115200;
 8008706:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800870a:	f000 fe1f 	bl	800934c <HAL_UART_Init>
 800870e:	4603      	mov	r3, r0
 8008710:	b108      	cbz	r0, 8008716 <main+0xd2>
 8008712:	b672      	cpsid	i
  while (1)
 8008714:	e7fe      	b.n	8008714 <main+0xd0>
  huart3.Instance = USART3;
 8008716:	4813      	ldr	r0, [pc, #76]	; (8008764 <main+0x120>)
 8008718:	4a13      	ldr	r2, [pc, #76]	; (8008768 <main+0x124>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 800871a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 800871e:	e9c0 2500 	strd	r2, r5, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008722:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008726:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800872a:	f000 fe0f 	bl	800934c <HAL_UART_Init>
 800872e:	b940      	cbnz	r0, 8008742 <main+0xfe>
	  printMessages("BL USER APP MSG: Hello from the bootloader User Application\r\n");
 8008730:	4c0e      	ldr	r4, [pc, #56]	; (800876c <main+0x128>)
 8008732:	4620      	mov	r0, r4
 8008734:	f7ff ff26 	bl	8008584 <printMessages>
	  HAL_Delay(1000);
 8008738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800873c:	f000 f962 	bl	8008a04 <HAL_Delay>
  while (1)
 8008740:	e7f7      	b.n	8008732 <main+0xee>
 8008742:	b672      	cpsid	i
  while (1)
 8008744:	e7fe      	b.n	8008744 <main+0x100>
 8008746:	bf00      	nop
 8008748:	40023800 	.word	0x40023800
 800874c:	40020c00 	.word	0x40020c00
 8008750:	40020000 	.word	0x40020000
 8008754:	2000008c 	.word	0x2000008c
 8008758:	40023000 	.word	0x40023000
 800875c:	20000094 	.word	0x20000094
 8008760:	40004400 	.word	0x40004400
 8008764:	200000d8 	.word	0x200000d8
 8008768:	40004800 	.word	0x40004800
 800876c:	08009dac 	.word	0x08009dac

08008770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008770:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008772:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <HAL_MspInit+0x34>)
 8008774:	2100      	movs	r1, #0
 8008776:	9100      	str	r1, [sp, #0]
 8008778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800877a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800877e:	645a      	str	r2, [r3, #68]	; 0x44
 8008780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008782:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008786:	9200      	str	r2, [sp, #0]
 8008788:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800878a:	9101      	str	r1, [sp, #4]
 800878c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800878e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008792:	641a      	str	r2, [r3, #64]	; 0x40
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800879a:	9301      	str	r3, [sp, #4]
 800879c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800879e:	b002      	add	sp, #8
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40023800 	.word	0x40023800

080087a8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80087a8:	6802      	ldr	r2, [r0, #0]
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <HAL_CRC_MspInit+0x28>)
 80087ac:	429a      	cmp	r2, r3
{
 80087ae:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80087b0:	d10b      	bne.n	80087ca <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80087b2:	2300      	movs	r3, #0
 80087b4:	9301      	str	r3, [sp, #4]
 80087b6:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <HAL_CRC_MspInit+0x2c>)
 80087b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087be:	631a      	str	r2, [r3, #48]	; 0x30
 80087c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80087ca:	b002      	add	sp, #8
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40023000 	.word	0x40023000
 80087d4:	40023800 	.word	0x40023800

080087d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087d8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087da:	2214      	movs	r2, #20
{
 80087dc:	b08a      	sub	sp, #40	; 0x28
 80087de:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087e0:	2100      	movs	r1, #0
 80087e2:	eb0d 0002 	add.w	r0, sp, r2
 80087e6:	f000 fe5f 	bl	80094a8 <memset>
  if(huart->Instance==USART2)
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	4a25      	ldr	r2, [pc, #148]	; (8008884 <HAL_UART_MspInit+0xac>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d123      	bne.n	800883a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80087f2:	4b25      	ldr	r3, [pc, #148]	; (8008888 <HAL_UART_MspInit+0xb0>)
 80087f4:	2100      	movs	r1, #0
 80087f6:	9101      	str	r1, [sp, #4]
 80087f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80087fe:	641a      	str	r2, [r3, #64]	; 0x40
 8008800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008802:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8008806:	9201      	str	r2, [sp, #4]
 8008808:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800880a:	9102      	str	r1, [sp, #8]
 800880c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800880e:	f042 0201 	orr.w	r2, r2, #1
 8008812:	631a      	str	r2, [r3, #48]	; 0x30
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	9302      	str	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800881c:	200c      	movs	r0, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800881e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008820:	2302      	movs	r3, #2
 8008822:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008826:	2403      	movs	r4, #3
 8008828:	2307      	movs	r3, #7
 800882a:	e9cd 4308 	strd	r4, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800882e:	4817      	ldr	r0, [pc, #92]	; (800888c <HAL_UART_MspInit+0xb4>)
 8008830:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008832:	f000 f971 	bl	8008b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008836:	b00a      	add	sp, #40	; 0x28
 8008838:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 800883a:	4a15      	ldr	r2, [pc, #84]	; (8008890 <HAL_UART_MspInit+0xb8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d1fa      	bne.n	8008836 <HAL_UART_MspInit+0x5e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008840:	4b11      	ldr	r3, [pc, #68]	; (8008888 <HAL_UART_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008842:	4814      	ldr	r0, [pc, #80]	; (8008894 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8008844:	2100      	movs	r1, #0
 8008846:	9103      	str	r1, [sp, #12]
 8008848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800884a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800884e:	641a      	str	r2, [r3, #64]	; 0x40
 8008850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008852:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8008856:	9203      	str	r2, [sp, #12]
 8008858:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800885a:	9104      	str	r1, [sp, #16]
 800885c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800885e:	f042 0204 	orr.w	r2, r2, #4
 8008862:	631a      	str	r2, [r3, #48]	; 0x30
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f003 0304 	and.w	r3, r3, #4
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800886e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8008872:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008874:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008876:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800887a:	2307      	movs	r3, #7
 800887c:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008880:	a905      	add	r1, sp, #20
 8008882:	e7d6      	b.n	8008832 <HAL_UART_MspInit+0x5a>
 8008884:	40004400 	.word	0x40004400
 8008888:	40023800 	.word	0x40023800
 800888c:	40020000 	.word	0x40020000
 8008890:	40004800 	.word	0x40004800
 8008894:	40020800 	.word	0x40020800

08008898 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008898:	e7fe      	b.n	8008898 <NMI_Handler>

0800889a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800889a:	e7fe      	b.n	800889a <HardFault_Handler>

0800889c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800889c:	e7fe      	b.n	800889c <MemManage_Handler>

0800889e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800889e:	e7fe      	b.n	800889e <BusFault_Handler>

080088a0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088a0:	e7fe      	b.n	80088a0 <UsageFault_Handler>

080088a2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088a2:	4770      	bx	lr

080088a4 <DebugMon_Handler>:
 80088a4:	4770      	bx	lr

080088a6 <PendSV_Handler>:
 80088a6:	4770      	bx	lr

080088a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088a8:	f000 b89a 	b.w	80089e0 <HAL_IncTick>

080088ac <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80088ac:	2001      	movs	r0, #1
 80088ae:	f000 ba13 	b.w	8008cd8 <HAL_GPIO_EXTI_IRQHandler>
	...

080088b4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80088b4:	4a0b      	ldr	r2, [pc, #44]	; (80088e4 <_sbrk+0x30>)
 80088b6:	6811      	ldr	r1, [r2, #0]
{
 80088b8:	b510      	push	{r4, lr}
 80088ba:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80088bc:	b909      	cbnz	r1, 80088c2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80088be:	490a      	ldr	r1, [pc, #40]	; (80088e8 <_sbrk+0x34>)
 80088c0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80088c2:	6810      	ldr	r0, [r2, #0]
 80088c4:	4909      	ldr	r1, [pc, #36]	; (80088ec <_sbrk+0x38>)
 80088c6:	4c0a      	ldr	r4, [pc, #40]	; (80088f0 <_sbrk+0x3c>)
 80088c8:	4403      	add	r3, r0
 80088ca:	1b09      	subs	r1, r1, r4
 80088cc:	428b      	cmp	r3, r1
 80088ce:	d906      	bls.n	80088de <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80088d0:	f000 fdc0 	bl	8009454 <__errno>
 80088d4:	230c      	movs	r3, #12
 80088d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80088dc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80088de:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80088e0:	e7fc      	b.n	80088dc <_sbrk+0x28>
 80088e2:	bf00      	nop
 80088e4:	2000011c 	.word	0x2000011c
 80088e8:	20000138 	.word	0x20000138
 80088ec:	20020000 	.word	0x20020000
 80088f0:	00000400 	.word	0x00000400

080088f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088f4:	4b04      	ldr	r3, [pc, #16]	; (8008908 <SystemInit+0x14>)
 80088f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80088fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008902:	4a02      	ldr	r2, [pc, #8]	; (800890c <SystemInit+0x18>)
 8008904:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008906:	4770      	bx	lr
 8008908:	e000ed00 	.word	0xe000ed00
 800890c:	08008000 	.word	0x08008000

08008910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008914:	480d      	ldr	r0, [pc, #52]	; (800894c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008916:	490e      	ldr	r1, [pc, #56]	; (8008950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008918:	4a0e      	ldr	r2, [pc, #56]	; (8008954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800891a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800891c:	e002      	b.n	8008924 <LoopCopyDataInit>

0800891e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800891e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008922:	3304      	adds	r3, #4

08008924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008928:	d3f9      	bcc.n	800891e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800892a:	4a0b      	ldr	r2, [pc, #44]	; (8008958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800892c:	4c0b      	ldr	r4, [pc, #44]	; (800895c <LoopFillZerobss+0x26>)
  movs r3, #0
 800892e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008930:	e001      	b.n	8008936 <LoopFillZerobss>

08008932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008934:	3204      	adds	r2, #4

08008936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008938:	d3fb      	bcc.n	8008932 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800893a:	f7ff ffdb 	bl	80088f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800893e:	f000 fd8f 	bl	8009460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008942:	f7ff fe7f 	bl	8008644 <main>
  bx  lr    
 8008946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800894c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008950:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8008954:	08009e48 	.word	0x08009e48
  ldr r2, =_sbss
 8008958:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800895c:	20000134 	.word	0x20000134

08008960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008960:	e7fe      	b.n	8008960 <ADC_IRQHandler>
	...

08008964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008964:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008966:	4a0e      	ldr	r2, [pc, #56]	; (80089a0 <HAL_InitTick+0x3c>)
 8008968:	4b0e      	ldr	r3, [pc, #56]	; (80089a4 <HAL_InitTick+0x40>)
{
 800896a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800896c:	7818      	ldrb	r0, [r3, #0]
 800896e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008972:	fbb3 f3f0 	udiv	r3, r3, r0
 8008976:	6810      	ldr	r0, [r2, #0]
 8008978:	fbb0 f0f3 	udiv	r0, r0, r3
 800897c:	f000 f8a8 	bl	8008ad0 <HAL_SYSTICK_Config>
 8008980:	4604      	mov	r4, r0
 8008982:	b958      	cbnz	r0, 800899c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008984:	2d0f      	cmp	r5, #15
 8008986:	d809      	bhi.n	800899c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008988:	4602      	mov	r2, r0
 800898a:	4629      	mov	r1, r5
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	f000 f85e 	bl	8008a50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008994:	4b04      	ldr	r3, [pc, #16]	; (80089a8 <HAL_InitTick+0x44>)
 8008996:	4620      	mov	r0, r4
 8008998:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800899a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800899c:	2001      	movs	r0, #1
 800899e:	e7fc      	b.n	800899a <HAL_InitTick+0x36>
 80089a0:	20000000 	.word	0x20000000
 80089a4:	20000004 	.word	0x20000004
 80089a8:	20000008 	.word	0x20000008

080089ac <HAL_Init>:
{
 80089ac:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80089ae:	4b0b      	ldr	r3, [pc, #44]	; (80089dc <HAL_Init+0x30>)
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089c6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089c8:	2003      	movs	r0, #3
 80089ca:	f000 f82f 	bl	8008a2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80089ce:	200f      	movs	r0, #15
 80089d0:	f7ff ffc8 	bl	8008964 <HAL_InitTick>
  HAL_MspInit();
 80089d4:	f7ff fecc 	bl	8008770 <HAL_MspInit>
}
 80089d8:	2000      	movs	r0, #0
 80089da:	bd08      	pop	{r3, pc}
 80089dc:	40023c00 	.word	0x40023c00

080089e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80089e0:	4a03      	ldr	r2, [pc, #12]	; (80089f0 <HAL_IncTick+0x10>)
 80089e2:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <HAL_IncTick+0x14>)
 80089e4:	6811      	ldr	r1, [r2, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	440b      	add	r3, r1
 80089ea:	6013      	str	r3, [r2, #0]
}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000120 	.word	0x20000120
 80089f4:	20000004 	.word	0x20000004

080089f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80089f8:	4b01      	ldr	r3, [pc, #4]	; (8008a00 <HAL_GetTick+0x8>)
 80089fa:	6818      	ldr	r0, [r3, #0]
}
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	20000120 	.word	0x20000120

08008a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008a08:	f7ff fff6 	bl	80089f8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a0c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008a0e:	bf1c      	itt	ne
 8008a10:	4b05      	ldrne	r3, [pc, #20]	; (8008a28 <HAL_Delay+0x24>)
 8008a12:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8008a14:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8008a16:	bf18      	it	ne
 8008a18:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008a1a:	f7ff ffed 	bl	80089f8 <HAL_GetTick>
 8008a1e:	1b43      	subs	r3, r0, r5
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	d3fa      	bcc.n	8008a1a <HAL_Delay+0x16>
  {
  }
}
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	20000004 	.word	0x20000004

08008a2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a2c:	4907      	ldr	r1, [pc, #28]	; (8008a4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008a2e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a34:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a36:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a3c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008a48:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008a4a:	4770      	bx	lr
 8008a4c:	e000ed00 	.word	0xe000ed00

08008a50 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a50:	4b16      	ldr	r3, [pc, #88]	; (8008aac <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a52:	b530      	push	{r4, r5, lr}
 8008a54:	68dc      	ldr	r4, [r3, #12]
 8008a56:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a5a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a5e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a60:	2d04      	cmp	r5, #4
 8008a62:	bf28      	it	cs
 8008a64:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a66:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a68:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a6c:	bf8c      	ite	hi
 8008a6e:	3c03      	subhi	r4, #3
 8008a70:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a72:	fa03 f505 	lsl.w	r5, r3, r5
 8008a76:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a7a:	40a3      	lsls	r3, r4
 8008a7c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a80:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8008a82:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a84:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a88:	bfac      	ite	ge
 8008a8a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a8e:	4a08      	ldrlt	r2, [pc, #32]	; (8008ab0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a90:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a94:	bfb8      	it	lt
 8008a96:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	bfaa      	itet	ge
 8008a9e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008aa2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008aa4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008aa8:	bd30      	pop	{r4, r5, pc}
 8008aaa:	bf00      	nop
 8008aac:	e000ed00 	.word	0xe000ed00
 8008ab0:	e000ed14 	.word	0xe000ed14

08008ab4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	db08      	blt.n	8008aca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ab8:	0942      	lsrs	r2, r0, #5
 8008aba:	2301      	movs	r3, #1
 8008abc:	f000 001f 	and.w	r0, r0, #31
 8008ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8008ac4:	4b01      	ldr	r3, [pc, #4]	; (8008acc <HAL_NVIC_EnableIRQ+0x18>)
 8008ac6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008aca:	4770      	bx	lr
 8008acc:	e000e100 	.word	0xe000e100

08008ad0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ad0:	3801      	subs	r0, #1
 8008ad2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008ad6:	d20b      	bcs.n	8008af0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ad8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008adc:	4a05      	ldr	r2, [pc, #20]	; (8008af4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ade:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ae0:	21f0      	movs	r1, #240	; 0xf0
 8008ae2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ae6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ae8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008aea:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008aec:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008aee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008af0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008af2:	4770      	bx	lr
 8008af4:	e000ed00 	.word	0xe000ed00

08008af8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008af8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008afa:	4604      	mov	r4, r0
 8008afc:	b150      	cbz	r0, 8008b14 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008afe:	7943      	ldrb	r3, [r0, #5]
 8008b00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b04:	b913      	cbnz	r3, 8008b0c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008b06:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008b08:	f7ff fe4e 	bl	80087a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8008b10:	2000      	movs	r0, #0
}
 8008b12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b14:	2001      	movs	r0, #1
 8008b16:	e7fc      	b.n	8008b12 <HAL_CRC_Init+0x1a>

08008b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b1c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8008cc8 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008b20:	4a67      	ldr	r2, [pc, #412]	; (8008cc0 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b22:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b24:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8008b26:	2401      	movs	r4, #1
 8008b28:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b2a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8008b2e:	43ac      	bics	r4, r5
 8008b30:	f040 80b1 	bne.w	8008c96 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b34:	684d      	ldr	r5, [r1, #4]
 8008b36:	f005 0403 	and.w	r4, r5, #3
 8008b3a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b3e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b40:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b42:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b46:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b48:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b4c:	d834      	bhi.n	8008bb8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8008b4e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b50:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b54:	68cf      	ldr	r7, [r1, #12]
 8008b56:	fa07 f708 	lsl.w	r7, r7, r8
 8008b5a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8008b5e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008b60:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b62:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b66:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8008b6a:	409f      	lsls	r7, r3
 8008b6c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8008b70:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8008b72:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008b74:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b78:	688f      	ldr	r7, [r1, #8]
 8008b7a:	fa07 f708 	lsl.w	r7, r7, r8
 8008b7e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b82:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8008b84:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b86:	d119      	bne.n	8008bbc <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8008b88:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8008b8c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b90:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8008b94:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b98:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8008b9c:	f04f 0e0f 	mov.w	lr, #15
 8008ba0:	fa0e fe0b 	lsl.w	lr, lr, fp
 8008ba4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008ba8:	690f      	ldr	r7, [r1, #16]
 8008baa:	fa07 f70b 	lsl.w	r7, r7, fp
 8008bae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8008bb2:	f8ca 7020 	str.w	r7, [sl, #32]
 8008bb6:	e001      	b.n	8008bbc <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bb8:	2c03      	cmp	r4, #3
 8008bba:	d1da      	bne.n	8008b72 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8008bbc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008bbe:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008bc2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008bc4:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008bc6:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8008bca:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008bcc:	d063      	beq.n	8008c96 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bce:	f04f 0a00 	mov.w	sl, #0
 8008bd2:	f8cd a004 	str.w	sl, [sp, #4]
 8008bd6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bda:	4c3a      	ldr	r4, [pc, #232]	; (8008cc4 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bdc:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8008be0:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8008be4:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8008be8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8008bec:	9601      	str	r6, [sp, #4]
 8008bee:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008bf0:	f023 0603 	bic.w	r6, r3, #3
 8008bf4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8008bf8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008bfc:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8008c00:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008c04:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8008c08:	270f      	movs	r7, #15
 8008c0a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008c0e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008c10:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008c14:	d046      	beq.n	8008ca4 <HAL_GPIO_Init+0x18c>
 8008c16:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c1a:	42a0      	cmp	r0, r4
 8008c1c:	d044      	beq.n	8008ca8 <HAL_GPIO_Init+0x190>
 8008c1e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c22:	42a0      	cmp	r0, r4
 8008c24:	d042      	beq.n	8008cac <HAL_GPIO_Init+0x194>
 8008c26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c2a:	42a0      	cmp	r0, r4
 8008c2c:	d040      	beq.n	8008cb0 <HAL_GPIO_Init+0x198>
 8008c2e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c32:	42a0      	cmp	r0, r4
 8008c34:	d03e      	beq.n	8008cb4 <HAL_GPIO_Init+0x19c>
 8008c36:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c3a:	42a0      	cmp	r0, r4
 8008c3c:	d03c      	beq.n	8008cb8 <HAL_GPIO_Init+0x1a0>
 8008c3e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c42:	42a0      	cmp	r0, r4
 8008c44:	d03a      	beq.n	8008cbc <HAL_GPIO_Init+0x1a4>
 8008c46:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c4a:	42a0      	cmp	r0, r4
 8008c4c:	bf0c      	ite	eq
 8008c4e:	2407      	moveq	r4, #7
 8008c50:	2408      	movne	r4, #8
 8008c52:	fa04 f40e 	lsl.w	r4, r4, lr
 8008c56:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c58:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8008c5a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8008c5c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c60:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8008c62:	bf54      	ite	pl
 8008c64:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8008c66:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8008c6a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8008c6c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c6e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8008c70:	bf54      	ite	pl
 8008c72:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8008c74:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8008c78:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8008c7a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c7c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8008c7e:	bf54      	ite	pl
 8008c80:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8008c82:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8008c86:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c88:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c8a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8008c8c:	bf54      	ite	pl
 8008c8e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8008c90:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8008c94:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c96:	3301      	adds	r3, #1
 8008c98:	2b10      	cmp	r3, #16
 8008c9a:	f47f af43 	bne.w	8008b24 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8008c9e:	b003      	add	sp, #12
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008ca4:	4654      	mov	r4, sl
 8008ca6:	e7d4      	b.n	8008c52 <HAL_GPIO_Init+0x13a>
 8008ca8:	2401      	movs	r4, #1
 8008caa:	e7d2      	b.n	8008c52 <HAL_GPIO_Init+0x13a>
 8008cac:	2402      	movs	r4, #2
 8008cae:	e7d0      	b.n	8008c52 <HAL_GPIO_Init+0x13a>
 8008cb0:	2403      	movs	r4, #3
 8008cb2:	e7ce      	b.n	8008c52 <HAL_GPIO_Init+0x13a>
 8008cb4:	2404      	movs	r4, #4
 8008cb6:	e7cc      	b.n	8008c52 <HAL_GPIO_Init+0x13a>
 8008cb8:	2405      	movs	r4, #5
 8008cba:	e7ca      	b.n	8008c52 <HAL_GPIO_Init+0x13a>
 8008cbc:	2406      	movs	r4, #6
 8008cbe:	e7c8      	b.n	8008c52 <HAL_GPIO_Init+0x13a>
 8008cc0:	40013c00 	.word	0x40013c00
 8008cc4:	40020000 	.word	0x40020000
 8008cc8:	40023800 	.word	0x40023800

08008ccc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ccc:	b10a      	cbz	r2, 8008cd2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008cce:	6181      	str	r1, [r0, #24]
  }
}
 8008cd0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008cd2:	0409      	lsls	r1, r1, #16
 8008cd4:	e7fb      	b.n	8008cce <HAL_GPIO_WritePin+0x2>
	...

08008cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008cd8:	4a04      	ldr	r2, [pc, #16]	; (8008cec <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8008cda:	6951      	ldr	r1, [r2, #20]
 8008cdc:	4201      	tst	r1, r0
{
 8008cde:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008ce0:	d002      	beq.n	8008ce8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ce2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008ce4:	f7ff fc68 	bl	80085b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ce8:	bd08      	pop	{r3, pc}
 8008cea:	bf00      	nop
 8008cec:	40013c00 	.word	0x40013c00

08008cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	b340      	cbz	r0, 8008d4a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cf8:	6803      	ldr	r3, [r0, #0]
 8008cfa:	07dd      	lsls	r5, r3, #31
 8008cfc:	d410      	bmi.n	8008d20 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	0798      	lsls	r0, r3, #30
 8008d02:	d45e      	bmi.n	8008dc2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	071a      	lsls	r2, r3, #28
 8008d08:	f100 80a0 	bmi.w	8008e4c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	075b      	lsls	r3, r3, #29
 8008d10:	f100 80c0 	bmi.w	8008e94 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d14:	69a0      	ldr	r0, [r4, #24]
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f040 8128 	bne.w	8008f6c <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	e02b      	b.n	8008d78 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d20:	4b8f      	ldr	r3, [pc, #572]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	f002 020c 	and.w	r2, r2, #12
 8008d28:	2a04      	cmp	r2, #4
 8008d2a:	d007      	beq.n	8008d3c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d2c:	689a      	ldr	r2, [r3, #8]
 8008d2e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d32:	2a08      	cmp	r2, #8
 8008d34:	d10b      	bne.n	8008d4e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	0251      	lsls	r1, r2, #9
 8008d3a:	d508      	bpl.n	8008d4e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d3c:	4b88      	ldr	r3, [pc, #544]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	039a      	lsls	r2, r3, #14
 8008d42:	d5dc      	bpl.n	8008cfe <HAL_RCC_OscConfig+0xe>
 8008d44:	6863      	ldr	r3, [r4, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1d9      	bne.n	8008cfe <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	e014      	b.n	8008d78 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d4e:	6862      	ldr	r2, [r4, #4]
 8008d50:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008d54:	d113      	bne.n	8008d7e <HAL_RCC_OscConfig+0x8e>
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008d5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008d5e:	f7ff fe4b 	bl	80089f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d62:	4e7f      	ldr	r6, [pc, #508]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8008d64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d66:	6833      	ldr	r3, [r6, #0]
 8008d68:	039b      	lsls	r3, r3, #14
 8008d6a:	d4c8      	bmi.n	8008cfe <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d6c:	f7ff fe44 	bl	80089f8 <HAL_GetTick>
 8008d70:	1b40      	subs	r0, r0, r5
 8008d72:	2864      	cmp	r0, #100	; 0x64
 8008d74:	d9f7      	bls.n	8008d66 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8008d76:	2003      	movs	r0, #3
}
 8008d78:	b002      	add	sp, #8
 8008d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d7e:	4d78      	ldr	r5, [pc, #480]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
 8008d80:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	d107      	bne.n	8008d98 <HAL_RCC_OscConfig+0xa8>
 8008d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	682b      	ldr	r3, [r5, #0]
 8008d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d94:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d96:	e7e2      	b.n	8008d5e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	682b      	ldr	r3, [r5, #0]
 8008da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008da4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	d1d9      	bne.n	8008d5e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8008daa:	f7ff fe25 	bl	80089f8 <HAL_GetTick>
 8008dae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	039f      	lsls	r7, r3, #14
 8008db4:	d5a3      	bpl.n	8008cfe <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008db6:	f7ff fe1f 	bl	80089f8 <HAL_GetTick>
 8008dba:	1b80      	subs	r0, r0, r6
 8008dbc:	2864      	cmp	r0, #100	; 0x64
 8008dbe:	d9f7      	bls.n	8008db0 <HAL_RCC_OscConfig+0xc0>
 8008dc0:	e7d9      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008dc2:	4b67      	ldr	r3, [pc, #412]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
 8008dc4:	689a      	ldr	r2, [r3, #8]
 8008dc6:	f012 0f0c 	tst.w	r2, #12
 8008dca:	d007      	beq.n	8008ddc <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dcc:	689a      	ldr	r2, [r3, #8]
 8008dce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008dd2:	2a08      	cmp	r2, #8
 8008dd4:	d111      	bne.n	8008dfa <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	025e      	lsls	r6, r3, #9
 8008dda:	d40e      	bmi.n	8008dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ddc:	4a60      	ldr	r2, [pc, #384]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
 8008dde:	6813      	ldr	r3, [r2, #0]
 8008de0:	079d      	lsls	r5, r3, #30
 8008de2:	d502      	bpl.n	8008dea <HAL_RCC_OscConfig+0xfa>
 8008de4:	68e3      	ldr	r3, [r4, #12]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d1af      	bne.n	8008d4a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dea:	6813      	ldr	r3, [r2, #0]
 8008dec:	6921      	ldr	r1, [r4, #16]
 8008dee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008df2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008df6:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008df8:	e784      	b.n	8008d04 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008dfa:	68e2      	ldr	r2, [r4, #12]
 8008dfc:	4b59      	ldr	r3, [pc, #356]	; (8008f64 <HAL_RCC_OscConfig+0x274>)
 8008dfe:	b1b2      	cbz	r2, 8008e2e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8008e00:	2201      	movs	r2, #1
 8008e02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e04:	f7ff fdf8 	bl	80089f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e08:	4d55      	ldr	r5, [pc, #340]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8008e0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	0798      	lsls	r0, r3, #30
 8008e10:	d507      	bpl.n	8008e22 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	6922      	ldr	r2, [r4, #16]
 8008e16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e1a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	e770      	b.n	8008d04 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e22:	f7ff fde9 	bl	80089f8 <HAL_GetTick>
 8008e26:	1b80      	subs	r0, r0, r6
 8008e28:	2802      	cmp	r0, #2
 8008e2a:	d9ef      	bls.n	8008e0c <HAL_RCC_OscConfig+0x11c>
 8008e2c:	e7a3      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8008e2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e30:	f7ff fde2 	bl	80089f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e34:	4e4a      	ldr	r6, [pc, #296]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8008e36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	0799      	lsls	r1, r3, #30
 8008e3c:	f57f af62 	bpl.w	8008d04 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e40:	f7ff fdda 	bl	80089f8 <HAL_GetTick>
 8008e44:	1b40      	subs	r0, r0, r5
 8008e46:	2802      	cmp	r0, #2
 8008e48:	d9f6      	bls.n	8008e38 <HAL_RCC_OscConfig+0x148>
 8008e4a:	e794      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e4c:	6962      	ldr	r2, [r4, #20]
 8008e4e:	4b45      	ldr	r3, [pc, #276]	; (8008f64 <HAL_RCC_OscConfig+0x274>)
 8008e50:	b182      	cbz	r2, 8008e74 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8008e52:	2201      	movs	r2, #1
 8008e54:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8008e58:	f7ff fdce 	bl	80089f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e5c:	4e40      	ldr	r6, [pc, #256]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8008e5e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e60:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008e62:	079f      	lsls	r7, r3, #30
 8008e64:	f53f af52 	bmi.w	8008d0c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e68:	f7ff fdc6 	bl	80089f8 <HAL_GetTick>
 8008e6c:	1b40      	subs	r0, r0, r5
 8008e6e:	2802      	cmp	r0, #2
 8008e70:	d9f6      	bls.n	8008e60 <HAL_RCC_OscConfig+0x170>
 8008e72:	e780      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8008e74:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8008e78:	f7ff fdbe 	bl	80089f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e7c:	4e38      	ldr	r6, [pc, #224]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8008e7e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e80:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008e82:	0798      	lsls	r0, r3, #30
 8008e84:	f57f af42 	bpl.w	8008d0c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e88:	f7ff fdb6 	bl	80089f8 <HAL_GetTick>
 8008e8c:	1b40      	subs	r0, r0, r5
 8008e8e:	2802      	cmp	r0, #2
 8008e90:	d9f6      	bls.n	8008e80 <HAL_RCC_OscConfig+0x190>
 8008e92:	e770      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e94:	4b32      	ldr	r3, [pc, #200]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
 8008e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e98:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8008e9c:	d128      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e9e:	9201      	str	r2, [sp, #4]
 8008ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ea2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008ea6:	641a      	str	r2, [r3, #64]	; 0x40
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eae:	9301      	str	r3, [sp, #4]
 8008eb0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008eb2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb4:	4d2c      	ldr	r5, [pc, #176]	; (8008f68 <HAL_RCC_OscConfig+0x278>)
 8008eb6:	682b      	ldr	r3, [r5, #0]
 8008eb8:	05d9      	lsls	r1, r3, #23
 8008eba:	d51b      	bpl.n	8008ef4 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ebc:	68a3      	ldr	r3, [r4, #8]
 8008ebe:	4d28      	ldr	r5, [pc, #160]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d127      	bne.n	8008f14 <HAL_RCC_OscConfig+0x224>
 8008ec4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008ec6:	f043 0301 	orr.w	r3, r3, #1
 8008eca:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008ecc:	f7ff fd94 	bl	80089f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed0:	4e23      	ldr	r6, [pc, #140]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8008ed2:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ed4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008eda:	079b      	lsls	r3, r3, #30
 8008edc:	d539      	bpl.n	8008f52 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8008ede:	2f00      	cmp	r7, #0
 8008ee0:	f43f af18 	beq.w	8008d14 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ee4:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <HAL_RCC_OscConfig+0x270>)
 8008ee6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eec:	6413      	str	r3, [r2, #64]	; 0x40
 8008eee:	e711      	b.n	8008d14 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8008ef0:	2700      	movs	r7, #0
 8008ef2:	e7df      	b.n	8008eb4 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008efa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008efc:	f7ff fd7c 	bl	80089f8 <HAL_GetTick>
 8008f00:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f02:	682b      	ldr	r3, [r5, #0]
 8008f04:	05da      	lsls	r2, r3, #23
 8008f06:	d4d9      	bmi.n	8008ebc <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f08:	f7ff fd76 	bl	80089f8 <HAL_GetTick>
 8008f0c:	1b80      	subs	r0, r0, r6
 8008f0e:	2802      	cmp	r0, #2
 8008f10:	d9f7      	bls.n	8008f02 <HAL_RCC_OscConfig+0x212>
 8008f12:	e730      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f14:	2b05      	cmp	r3, #5
 8008f16:	d104      	bne.n	8008f22 <HAL_RCC_OscConfig+0x232>
 8008f18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008f1a:	f043 0304 	orr.w	r3, r3, #4
 8008f1e:	672b      	str	r3, [r5, #112]	; 0x70
 8008f20:	e7d0      	b.n	8008ec4 <HAL_RCC_OscConfig+0x1d4>
 8008f22:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8008f24:	f022 0201 	bic.w	r2, r2, #1
 8008f28:	672a      	str	r2, [r5, #112]	; 0x70
 8008f2a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8008f2c:	f022 0204 	bic.w	r2, r2, #4
 8008f30:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1ca      	bne.n	8008ecc <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8008f36:	f7ff fd5f 	bl	80089f8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f3a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008f3e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008f42:	0798      	lsls	r0, r3, #30
 8008f44:	d5cb      	bpl.n	8008ede <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f46:	f7ff fd57 	bl	80089f8 <HAL_GetTick>
 8008f4a:	1b80      	subs	r0, r0, r6
 8008f4c:	4540      	cmp	r0, r8
 8008f4e:	d9f7      	bls.n	8008f40 <HAL_RCC_OscConfig+0x250>
 8008f50:	e711      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f52:	f7ff fd51 	bl	80089f8 <HAL_GetTick>
 8008f56:	1b40      	subs	r0, r0, r5
 8008f58:	4540      	cmp	r0, r8
 8008f5a:	d9bd      	bls.n	8008ed8 <HAL_RCC_OscConfig+0x1e8>
 8008f5c:	e70b      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
 8008f5e:	bf00      	nop
 8008f60:	40023800 	.word	0x40023800
 8008f64:	42470000 	.word	0x42470000
 8008f68:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f6c:	4d36      	ldr	r5, [pc, #216]	; (8009048 <HAL_RCC_OscConfig+0x358>)
 8008f6e:	68ab      	ldr	r3, [r5, #8]
 8008f70:	f003 030c 	and.w	r3, r3, #12
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d03d      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f78:	4b34      	ldr	r3, [pc, #208]	; (800904c <HAL_RCC_OscConfig+0x35c>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008f7e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f80:	d12b      	bne.n	8008fda <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8008f82:	f7ff fd39 	bl	80089f8 <HAL_GetTick>
 8008f86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	0199      	lsls	r1, r3, #6
 8008f8c:	d41f      	bmi.n	8008fce <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f8e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008f96:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008f9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008fa0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008fa2:	0852      	lsrs	r2, r2, #1
 8008fa4:	3a01      	subs	r2, #1
 8008fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008faa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008fac:	4b27      	ldr	r3, [pc, #156]	; (800904c <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fae:	4d26      	ldr	r5, [pc, #152]	; (8009048 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008fb4:	f7ff fd20 	bl	80089f8 <HAL_GetTick>
 8008fb8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fba:	682b      	ldr	r3, [r5, #0]
 8008fbc:	019a      	lsls	r2, r3, #6
 8008fbe:	f53f aead 	bmi.w	8008d1c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fc2:	f7ff fd19 	bl	80089f8 <HAL_GetTick>
 8008fc6:	1b00      	subs	r0, r0, r4
 8008fc8:	2802      	cmp	r0, #2
 8008fca:	d9f6      	bls.n	8008fba <HAL_RCC_OscConfig+0x2ca>
 8008fcc:	e6d3      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fce:	f7ff fd13 	bl	80089f8 <HAL_GetTick>
 8008fd2:	1b80      	subs	r0, r0, r6
 8008fd4:	2802      	cmp	r0, #2
 8008fd6:	d9d7      	bls.n	8008f88 <HAL_RCC_OscConfig+0x298>
 8008fd8:	e6cd      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8008fda:	f7ff fd0d 	bl	80089f8 <HAL_GetTick>
 8008fde:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	019b      	lsls	r3, r3, #6
 8008fe4:	f57f ae9a 	bpl.w	8008d1c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fe8:	f7ff fd06 	bl	80089f8 <HAL_GetTick>
 8008fec:	1b00      	subs	r0, r0, r4
 8008fee:	2802      	cmp	r0, #2
 8008ff0:	d9f6      	bls.n	8008fe0 <HAL_RCC_OscConfig+0x2f0>
 8008ff2:	e6c0      	b.n	8008d76 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ff4:	2801      	cmp	r0, #1
 8008ff6:	f43f aebf 	beq.w	8008d78 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8008ffa:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ffc:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ffe:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009002:	4291      	cmp	r1, r2
 8009004:	f47f aea1 	bne.w	8008d4a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009008:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800900a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800900e:	428a      	cmp	r2, r1
 8009010:	f47f ae9b 	bne.w	8008d4a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009014:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009016:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800901a:	401a      	ands	r2, r3
 800901c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8009020:	f47f ae93 	bne.w	8008d4a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009024:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009026:	0852      	lsrs	r2, r2, #1
 8009028:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800902c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800902e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8009032:	f47f ae8a 	bne.w	8008d4a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009036:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009038:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800903c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8009040:	f43f ae6c 	beq.w	8008d1c <HAL_RCC_OscConfig+0x2c>
 8009044:	e681      	b.n	8008d4a <HAL_RCC_OscConfig+0x5a>
 8009046:	bf00      	nop
 8009048:	40023800 	.word	0x40023800
 800904c:	42470000 	.word	0x42470000

08009050 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009050:	4913      	ldr	r1, [pc, #76]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8009052:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009054:	688b      	ldr	r3, [r1, #8]
 8009056:	f003 030c 	and.w	r3, r3, #12
 800905a:	2b04      	cmp	r3, #4
 800905c:	d01c      	beq.n	8009098 <HAL_RCC_GetSysClockFreq+0x48>
 800905e:	2b08      	cmp	r3, #8
 8009060:	d11c      	bne.n	800909c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009062:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009064:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009066:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009068:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800906c:	bf14      	ite	ne
 800906e:	480d      	ldrne	r0, [pc, #52]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009070:	480d      	ldreq	r0, [pc, #52]	; (80090a8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009072:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009076:	bf18      	it	ne
 8009078:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800907a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800907e:	fba1 0100 	umull	r0, r1, r1, r0
 8009082:	f7ff f8fd 	bl	8008280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009086:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x50>)
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800908e:	3301      	adds	r3, #1
 8009090:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009092:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009096:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009098:	4802      	ldr	r0, [pc, #8]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x54>)
 800909a:	e7fc      	b.n	8009096 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800909c:	4802      	ldr	r0, [pc, #8]	; (80090a8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800909e:	e7fa      	b.n	8009096 <HAL_RCC_GetSysClockFreq+0x46>
 80090a0:	40023800 	.word	0x40023800
 80090a4:	017d7840 	.word	0x017d7840
 80090a8:	00f42400 	.word	0x00f42400

080090ac <HAL_RCC_ClockConfig>:
{
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80090b2:	4604      	mov	r4, r0
 80090b4:	b910      	cbnz	r0, 80090bc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80090b6:	2001      	movs	r0, #1
}
 80090b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090bc:	4b44      	ldr	r3, [pc, #272]	; (80091d0 <HAL_RCC_ClockConfig+0x124>)
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	f002 0207 	and.w	r2, r2, #7
 80090c4:	428a      	cmp	r2, r1
 80090c6:	d328      	bcc.n	800911a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	0797      	lsls	r7, r2, #30
 80090cc:	d42d      	bmi.n	800912a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ce:	07d0      	lsls	r0, r2, #31
 80090d0:	d441      	bmi.n	8009156 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090d2:	4b3f      	ldr	r3, [pc, #252]	; (80091d0 <HAL_RCC_ClockConfig+0x124>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	f002 0207 	and.w	r2, r2, #7
 80090da:	42aa      	cmp	r2, r5
 80090dc:	d866      	bhi.n	80091ac <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	0751      	lsls	r1, r2, #29
 80090e2:	d46c      	bmi.n	80091be <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090e4:	0713      	lsls	r3, r2, #28
 80090e6:	d507      	bpl.n	80090f8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090e8:	4a3a      	ldr	r2, [pc, #232]	; (80091d4 <HAL_RCC_ClockConfig+0x128>)
 80090ea:	6921      	ldr	r1, [r4, #16]
 80090ec:	6893      	ldr	r3, [r2, #8]
 80090ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80090f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80090f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80090f8:	f7ff ffaa 	bl	8009050 <HAL_RCC_GetSysClockFreq>
 80090fc:	4b35      	ldr	r3, [pc, #212]	; (80091d4 <HAL_RCC_ClockConfig+0x128>)
 80090fe:	4a36      	ldr	r2, [pc, #216]	; (80091d8 <HAL_RCC_ClockConfig+0x12c>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009106:	5cd3      	ldrb	r3, [r2, r3]
 8009108:	40d8      	lsrs	r0, r3
 800910a:	4b34      	ldr	r3, [pc, #208]	; (80091dc <HAL_RCC_ClockConfig+0x130>)
 800910c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800910e:	4b34      	ldr	r3, [pc, #208]	; (80091e0 <HAL_RCC_ClockConfig+0x134>)
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	f7ff fc27 	bl	8008964 <HAL_InitTick>
  return HAL_OK;
 8009116:	2000      	movs	r0, #0
 8009118:	e7ce      	b.n	80090b8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800911a:	b2ca      	uxtb	r2, r1
 800911c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	428b      	cmp	r3, r1
 8009126:	d1c6      	bne.n	80090b6 <HAL_RCC_ClockConfig+0xa>
 8009128:	e7ce      	b.n	80090c8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800912a:	4b2a      	ldr	r3, [pc, #168]	; (80091d4 <HAL_RCC_ClockConfig+0x128>)
 800912c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009130:	bf1e      	ittt	ne
 8009132:	6899      	ldrne	r1, [r3, #8]
 8009134:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8009138:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800913a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800913c:	bf42      	ittt	mi
 800913e:	6899      	ldrmi	r1, [r3, #8]
 8009140:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8009144:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009146:	4923      	ldr	r1, [pc, #140]	; (80091d4 <HAL_RCC_ClockConfig+0x128>)
 8009148:	68a0      	ldr	r0, [r4, #8]
 800914a:	688b      	ldr	r3, [r1, #8]
 800914c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009150:	4303      	orrs	r3, r0
 8009152:	608b      	str	r3, [r1, #8]
 8009154:	e7bb      	b.n	80090ce <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009156:	6862      	ldr	r2, [r4, #4]
 8009158:	4b1e      	ldr	r3, [pc, #120]	; (80091d4 <HAL_RCC_ClockConfig+0x128>)
 800915a:	2a01      	cmp	r2, #1
 800915c:	d11c      	bne.n	8009198 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009164:	d0a7      	beq.n	80090b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009166:	4e1b      	ldr	r6, [pc, #108]	; (80091d4 <HAL_RCC_ClockConfig+0x128>)
 8009168:	68b3      	ldr	r3, [r6, #8]
 800916a:	f023 0303 	bic.w	r3, r3, #3
 800916e:	4313      	orrs	r3, r2
 8009170:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009172:	f7ff fc41 	bl	80089f8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009176:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800917a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800917c:	68b3      	ldr	r3, [r6, #8]
 800917e:	6862      	ldr	r2, [r4, #4]
 8009180:	f003 030c 	and.w	r3, r3, #12
 8009184:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009188:	d0a3      	beq.n	80090d2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800918a:	f7ff fc35 	bl	80089f8 <HAL_GetTick>
 800918e:	1bc0      	subs	r0, r0, r7
 8009190:	4540      	cmp	r0, r8
 8009192:	d9f3      	bls.n	800917c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8009194:	2003      	movs	r0, #3
 8009196:	e78f      	b.n	80090b8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009198:	1e91      	subs	r1, r2, #2
 800919a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800919c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800919e:	d802      	bhi.n	80091a6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80091a4:	e7de      	b.n	8009164 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091a6:	f013 0f02 	tst.w	r3, #2
 80091aa:	e7db      	b.n	8009164 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ac:	b2ea      	uxtb	r2, r5
 80091ae:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	42ab      	cmp	r3, r5
 80091b8:	f47f af7d 	bne.w	80090b6 <HAL_RCC_ClockConfig+0xa>
 80091bc:	e78f      	b.n	80090de <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091be:	4905      	ldr	r1, [pc, #20]	; (80091d4 <HAL_RCC_ClockConfig+0x128>)
 80091c0:	68e0      	ldr	r0, [r4, #12]
 80091c2:	688b      	ldr	r3, [r1, #8]
 80091c4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80091c8:	4303      	orrs	r3, r0
 80091ca:	608b      	str	r3, [r1, #8]
 80091cc:	e78a      	b.n	80090e4 <HAL_RCC_ClockConfig+0x38>
 80091ce:	bf00      	nop
 80091d0:	40023c00 	.word	0x40023c00
 80091d4:	40023800 	.word	0x40023800
 80091d8:	08009dea 	.word	0x08009dea
 80091dc:	20000000 	.word	0x20000000
 80091e0:	20000008 	.word	0x20000008

080091e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80091e4:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80091e6:	4a05      	ldr	r2, [pc, #20]	; (80091fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80091ee:	5cd3      	ldrb	r3, [r2, r3]
 80091f0:	4a03      	ldr	r2, [pc, #12]	; (8009200 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80091f2:	6810      	ldr	r0, [r2, #0]
}
 80091f4:	40d8      	lsrs	r0, r3
 80091f6:	4770      	bx	lr
 80091f8:	40023800 	.word	0x40023800
 80091fc:	08009dfa 	.word	0x08009dfa
 8009200:	20000000 	.word	0x20000000

08009204 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009204:	4b04      	ldr	r3, [pc, #16]	; (8009218 <HAL_RCC_GetPCLK2Freq+0x14>)
 8009206:	4a05      	ldr	r2, [pc, #20]	; (800921c <HAL_RCC_GetPCLK2Freq+0x18>)
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800920e:	5cd3      	ldrb	r3, [r2, r3]
 8009210:	4a03      	ldr	r2, [pc, #12]	; (8009220 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009212:	6810      	ldr	r0, [r2, #0]
}
 8009214:	40d8      	lsrs	r0, r3
 8009216:	4770      	bx	lr
 8009218:	40023800 	.word	0x40023800
 800921c:	08009dfa 	.word	0x08009dfa
 8009220:	20000000 	.word	0x20000000

08009224 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009224:	6802      	ldr	r2, [r0, #0]
 8009226:	68c1      	ldr	r1, [r0, #12]
 8009228:	6913      	ldr	r3, [r2, #16]
 800922a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800922e:	430b      	orrs	r3, r1
{
 8009230:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009232:	6113      	str	r3, [r2, #16]
{
 8009234:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009236:	6883      	ldr	r3, [r0, #8]
 8009238:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800923a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800923c:	4303      	orrs	r3, r0
 800923e:	6968      	ldr	r0, [r5, #20]
 8009240:	4303      	orrs	r3, r0
 8009242:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8009244:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8009248:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800924c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800924e:	430b      	orrs	r3, r1
 8009250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009252:	6953      	ldr	r3, [r2, #20]
 8009254:	69a9      	ldr	r1, [r5, #24]
 8009256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800925a:	430b      	orrs	r3, r1
 800925c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800925e:	4b1f      	ldr	r3, [pc, #124]	; (80092dc <UART_SetConfig+0xb8>)
 8009260:	429a      	cmp	r2, r3
 8009262:	d003      	beq.n	800926c <UART_SetConfig+0x48>
 8009264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009268:	429a      	cmp	r2, r3
 800926a:	d123      	bne.n	80092b4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800926c:	f7ff ffca 	bl	8009204 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009270:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009272:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009278:	e9d5 4600 	ldrd	r4, r6, [r5]
 800927c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009280:	d11b      	bne.n	80092ba <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009282:	19b2      	adds	r2, r6, r6
 8009284:	f04f 0300 	mov.w	r3, #0
 8009288:	415b      	adcs	r3, r3
 800928a:	f7fe fff9 	bl	8008280 <__aeabi_uldivmod>
 800928e:	2164      	movs	r1, #100	; 0x64
 8009290:	fbb0 f5f1 	udiv	r5, r0, r1
 8009294:	fb01 0315 	mls	r3, r1, r5, r0
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	3332      	adds	r3, #50	; 0x32
 800929c:	fbb3 f3f1 	udiv	r3, r3, r1
 80092a0:	f003 0207 	and.w	r2, r3, #7
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80092aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092ae:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092b0:	60a3      	str	r3, [r4, #8]
  }
}
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80092b4:	f7ff ff96 	bl	80091e4 <HAL_RCC_GetPCLK1Freq>
 80092b8:	e7da      	b.n	8009270 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092ba:	00b2      	lsls	r2, r6, #2
 80092bc:	0fb3      	lsrs	r3, r6, #30
 80092be:	f7fe ffdf 	bl	8008280 <__aeabi_uldivmod>
 80092c2:	2264      	movs	r2, #100	; 0x64
 80092c4:	fbb0 f1f2 	udiv	r1, r0, r2
 80092c8:	fb02 0311 	mls	r3, r2, r1, r0
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	3332      	adds	r3, #50	; 0x32
 80092d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80092d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80092d8:	e7ea      	b.n	80092b0 <UART_SetConfig+0x8c>
 80092da:	bf00      	nop
 80092dc:	40011000 	.word	0x40011000

080092e0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	4604      	mov	r4, r0
 80092e4:	460e      	mov	r6, r1
 80092e6:	4617      	mov	r7, r2
 80092e8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ea:	6822      	ldr	r2, [r4, #0]
 80092ec:	6813      	ldr	r3, [r2, #0]
 80092ee:	ea36 0303 	bics.w	r3, r6, r3
 80092f2:	d101      	bne.n	80092f8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80092f4:	2000      	movs	r0, #0
 80092f6:	e028      	b.n	800934a <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80092f8:	1c6b      	adds	r3, r5, #1
 80092fa:	d0f7      	beq.n	80092ec <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092fc:	b125      	cbz	r5, 8009308 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80092fe:	f7ff fb7b 	bl	80089f8 <HAL_GetTick>
 8009302:	1bc0      	subs	r0, r0, r7
 8009304:	4285      	cmp	r5, r0
 8009306:	d2f0      	bcs.n	80092ea <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009308:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	f102 030c 	add.w	r3, r2, #12
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	320c      	adds	r2, #12
 8009318:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 800931c:	6821      	ldr	r1, [r4, #0]
 800931e:	2800      	cmp	r0, #0
 8009320:	d1f2      	bne.n	8009308 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	f101 0314 	add.w	r3, r1, #20
 8009326:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	f101 0014 	add.w	r0, r1, #20
 8009332:	e840 3200 	strex	r2, r3, [r0]
 8009336:	2a00      	cmp	r2, #0
 8009338:	d1f3      	bne.n	8009322 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800933a:	2320      	movs	r3, #32
 800933c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8009340:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8009344:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8009348:	2003      	movs	r0, #3
}
 800934a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800934c <HAL_UART_Init>:
{
 800934c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800934e:	4604      	mov	r4, r0
 8009350:	b340      	cbz	r0, 80093a4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009352:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009356:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800935a:	b91b      	cbnz	r3, 8009364 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800935c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8009360:	f7ff fa3a 	bl	80087d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8009364:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009366:	2324      	movs	r3, #36	; 0x24
 8009368:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800936c:	68d3      	ldr	r3, [r2, #12]
 800936e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009372:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009374:	4620      	mov	r0, r4
 8009376:	f7ff ff55 	bl	8009224 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	691a      	ldr	r2, [r3, #16]
 800937e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009382:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009384:	695a      	ldr	r2, [r3, #20]
 8009386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800938a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009392:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009394:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8009396:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009398:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800939a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800939e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80093a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80093a4:	2001      	movs	r0, #1
 80093a6:	e7fc      	b.n	80093a2 <HAL_UART_Init+0x56>

080093a8 <HAL_UART_Transmit>:
{
 80093a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093aa:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80093ac:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80093b0:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80093b2:	2a20      	cmp	r2, #32
{
 80093b4:	4604      	mov	r4, r0
 80093b6:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80093b8:	d149      	bne.n	800944e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80093ba:	2900      	cmp	r1, #0
 80093bc:	d045      	beq.n	800944a <HAL_UART_Transmit+0xa2>
 80093be:	2f00      	cmp	r7, #0
 80093c0:	d043      	beq.n	800944a <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80093c2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80093c6:	2a01      	cmp	r2, #1
 80093c8:	d041      	beq.n	800944e <HAL_UART_Transmit+0xa6>
 80093ca:	2201      	movs	r2, #1
 80093cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093d2:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d4:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093d6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80093da:	f7ff fb0d 	bl	80089f8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093de:	68a1      	ldr	r1, [r4, #8]
 80093e0:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 80093e2:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093e4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80093e8:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80093ea:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ec:	d103      	bne.n	80093f6 <HAL_UART_Transmit+0x4e>
 80093ee:	6921      	ldr	r1, [r4, #16]
 80093f0:	b909      	cbnz	r1, 80093f6 <HAL_UART_Transmit+0x4e>
 80093f2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80093f4:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 80093f6:	2100      	movs	r1, #0
 80093f8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80093fc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80093fe:	b289      	uxth	r1, r1
 8009400:	b941      	cbnz	r1, 8009414 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009402:	2140      	movs	r1, #64	; 0x40
 8009404:	4620      	mov	r0, r4
 8009406:	f7ff ff6b 	bl	80092e0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800940a:	b960      	cbnz	r0, 8009426 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800940c:	2320      	movs	r3, #32
 800940e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8009412:	e009      	b.n	8009428 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009414:	2180      	movs	r1, #128	; 0x80
 8009416:	4620      	mov	r0, r4
 8009418:	e9cd 2300 	strd	r2, r3, [sp]
 800941c:	f7ff ff60 	bl	80092e0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8009420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009424:	b110      	cbz	r0, 800942c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8009426:	2003      	movs	r0, #3
}
 8009428:	b003      	add	sp, #12
 800942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800942c:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 800942e:	b94e      	cbnz	r6, 8009444 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009430:	f835 1b02 	ldrh.w	r1, [r5], #2
 8009434:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009438:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800943a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800943c:	3901      	subs	r1, #1
 800943e:	b289      	uxth	r1, r1
 8009440:	84e1      	strh	r1, [r4, #38]	; 0x26
 8009442:	e7db      	b.n	80093fc <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009444:	f816 1b01 	ldrb.w	r1, [r6], #1
 8009448:	e7f6      	b.n	8009438 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800944a:	2001      	movs	r0, #1
 800944c:	e7ec      	b.n	8009428 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800944e:	2002      	movs	r0, #2
 8009450:	e7ea      	b.n	8009428 <HAL_UART_Transmit+0x80>
	...

08009454 <__errno>:
 8009454:	4b01      	ldr	r3, [pc, #4]	; (800945c <__errno+0x8>)
 8009456:	6818      	ldr	r0, [r3, #0]
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	2000000c 	.word	0x2000000c

08009460 <__libc_init_array>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	4d0d      	ldr	r5, [pc, #52]	; (8009498 <__libc_init_array+0x38>)
 8009464:	4c0d      	ldr	r4, [pc, #52]	; (800949c <__libc_init_array+0x3c>)
 8009466:	1b64      	subs	r4, r4, r5
 8009468:	10a4      	asrs	r4, r4, #2
 800946a:	2600      	movs	r6, #0
 800946c:	42a6      	cmp	r6, r4
 800946e:	d109      	bne.n	8009484 <__libc_init_array+0x24>
 8009470:	4d0b      	ldr	r5, [pc, #44]	; (80094a0 <__libc_init_array+0x40>)
 8009472:	4c0c      	ldr	r4, [pc, #48]	; (80094a4 <__libc_init_array+0x44>)
 8009474:	f000 fc8e 	bl	8009d94 <_init>
 8009478:	1b64      	subs	r4, r4, r5
 800947a:	10a4      	asrs	r4, r4, #2
 800947c:	2600      	movs	r6, #0
 800947e:	42a6      	cmp	r6, r4
 8009480:	d105      	bne.n	800948e <__libc_init_array+0x2e>
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	f855 3b04 	ldr.w	r3, [r5], #4
 8009488:	4798      	blx	r3
 800948a:	3601      	adds	r6, #1
 800948c:	e7ee      	b.n	800946c <__libc_init_array+0xc>
 800948e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009492:	4798      	blx	r3
 8009494:	3601      	adds	r6, #1
 8009496:	e7f2      	b.n	800947e <__libc_init_array+0x1e>
 8009498:	08009e40 	.word	0x08009e40
 800949c:	08009e40 	.word	0x08009e40
 80094a0:	08009e40 	.word	0x08009e40
 80094a4:	08009e44 	.word	0x08009e44

080094a8 <memset>:
 80094a8:	4402      	add	r2, r0
 80094aa:	4603      	mov	r3, r0
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d100      	bne.n	80094b2 <memset+0xa>
 80094b0:	4770      	bx	lr
 80094b2:	f803 1b01 	strb.w	r1, [r3], #1
 80094b6:	e7f9      	b.n	80094ac <memset+0x4>

080094b8 <_vsiprintf_r>:
 80094b8:	b500      	push	{lr}
 80094ba:	b09b      	sub	sp, #108	; 0x6c
 80094bc:	9100      	str	r1, [sp, #0]
 80094be:	9104      	str	r1, [sp, #16]
 80094c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094c4:	9105      	str	r1, [sp, #20]
 80094c6:	9102      	str	r1, [sp, #8]
 80094c8:	4905      	ldr	r1, [pc, #20]	; (80094e0 <_vsiprintf_r+0x28>)
 80094ca:	9103      	str	r1, [sp, #12]
 80094cc:	4669      	mov	r1, sp
 80094ce:	f000 f86f 	bl	80095b0 <_svfiprintf_r>
 80094d2:	9b00      	ldr	r3, [sp, #0]
 80094d4:	2200      	movs	r2, #0
 80094d6:	701a      	strb	r2, [r3, #0]
 80094d8:	b01b      	add	sp, #108	; 0x6c
 80094da:	f85d fb04 	ldr.w	pc, [sp], #4
 80094de:	bf00      	nop
 80094e0:	ffff0208 	.word	0xffff0208

080094e4 <vsiprintf>:
 80094e4:	4613      	mov	r3, r2
 80094e6:	460a      	mov	r2, r1
 80094e8:	4601      	mov	r1, r0
 80094ea:	4802      	ldr	r0, [pc, #8]	; (80094f4 <vsiprintf+0x10>)
 80094ec:	6800      	ldr	r0, [r0, #0]
 80094ee:	f7ff bfe3 	b.w	80094b8 <_vsiprintf_r>
 80094f2:	bf00      	nop
 80094f4:	2000000c 	.word	0x2000000c

080094f8 <__ssputs_r>:
 80094f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	688e      	ldr	r6, [r1, #8]
 80094fe:	429e      	cmp	r6, r3
 8009500:	4682      	mov	sl, r0
 8009502:	460c      	mov	r4, r1
 8009504:	4690      	mov	r8, r2
 8009506:	461f      	mov	r7, r3
 8009508:	d838      	bhi.n	800957c <__ssputs_r+0x84>
 800950a:	898a      	ldrh	r2, [r1, #12]
 800950c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009510:	d032      	beq.n	8009578 <__ssputs_r+0x80>
 8009512:	6825      	ldr	r5, [r4, #0]
 8009514:	6909      	ldr	r1, [r1, #16]
 8009516:	eba5 0901 	sub.w	r9, r5, r1
 800951a:	6965      	ldr	r5, [r4, #20]
 800951c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009524:	3301      	adds	r3, #1
 8009526:	444b      	add	r3, r9
 8009528:	106d      	asrs	r5, r5, #1
 800952a:	429d      	cmp	r5, r3
 800952c:	bf38      	it	cc
 800952e:	461d      	movcc	r5, r3
 8009530:	0553      	lsls	r3, r2, #21
 8009532:	d531      	bpl.n	8009598 <__ssputs_r+0xa0>
 8009534:	4629      	mov	r1, r5
 8009536:	f000 fb63 	bl	8009c00 <_malloc_r>
 800953a:	4606      	mov	r6, r0
 800953c:	b950      	cbnz	r0, 8009554 <__ssputs_r+0x5c>
 800953e:	230c      	movs	r3, #12
 8009540:	f8ca 3000 	str.w	r3, [sl]
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800954a:	81a3      	strh	r3, [r4, #12]
 800954c:	f04f 30ff 	mov.w	r0, #4294967295
 8009550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009554:	6921      	ldr	r1, [r4, #16]
 8009556:	464a      	mov	r2, r9
 8009558:	f000 fabe 	bl	8009ad8 <memcpy>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	6126      	str	r6, [r4, #16]
 800956a:	6165      	str	r5, [r4, #20]
 800956c:	444e      	add	r6, r9
 800956e:	eba5 0509 	sub.w	r5, r5, r9
 8009572:	6026      	str	r6, [r4, #0]
 8009574:	60a5      	str	r5, [r4, #8]
 8009576:	463e      	mov	r6, r7
 8009578:	42be      	cmp	r6, r7
 800957a:	d900      	bls.n	800957e <__ssputs_r+0x86>
 800957c:	463e      	mov	r6, r7
 800957e:	6820      	ldr	r0, [r4, #0]
 8009580:	4632      	mov	r2, r6
 8009582:	4641      	mov	r1, r8
 8009584:	f000 fab6 	bl	8009af4 <memmove>
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	1b9b      	subs	r3, r3, r6
 800958c:	60a3      	str	r3, [r4, #8]
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	4433      	add	r3, r6
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	2000      	movs	r0, #0
 8009596:	e7db      	b.n	8009550 <__ssputs_r+0x58>
 8009598:	462a      	mov	r2, r5
 800959a:	f000 fba5 	bl	8009ce8 <_realloc_r>
 800959e:	4606      	mov	r6, r0
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d1e1      	bne.n	8009568 <__ssputs_r+0x70>
 80095a4:	6921      	ldr	r1, [r4, #16]
 80095a6:	4650      	mov	r0, sl
 80095a8:	f000 fabe 	bl	8009b28 <_free_r>
 80095ac:	e7c7      	b.n	800953e <__ssputs_r+0x46>
	...

080095b0 <_svfiprintf_r>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	4698      	mov	r8, r3
 80095b6:	898b      	ldrh	r3, [r1, #12]
 80095b8:	061b      	lsls	r3, r3, #24
 80095ba:	b09d      	sub	sp, #116	; 0x74
 80095bc:	4607      	mov	r7, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	4614      	mov	r4, r2
 80095c2:	d50e      	bpl.n	80095e2 <_svfiprintf_r+0x32>
 80095c4:	690b      	ldr	r3, [r1, #16]
 80095c6:	b963      	cbnz	r3, 80095e2 <_svfiprintf_r+0x32>
 80095c8:	2140      	movs	r1, #64	; 0x40
 80095ca:	f000 fb19 	bl	8009c00 <_malloc_r>
 80095ce:	6028      	str	r0, [r5, #0]
 80095d0:	6128      	str	r0, [r5, #16]
 80095d2:	b920      	cbnz	r0, 80095de <_svfiprintf_r+0x2e>
 80095d4:	230c      	movs	r3, #12
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295
 80095dc:	e0d1      	b.n	8009782 <_svfiprintf_r+0x1d2>
 80095de:	2340      	movs	r3, #64	; 0x40
 80095e0:	616b      	str	r3, [r5, #20]
 80095e2:	2300      	movs	r3, #0
 80095e4:	9309      	str	r3, [sp, #36]	; 0x24
 80095e6:	2320      	movs	r3, #32
 80095e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80095f0:	2330      	movs	r3, #48	; 0x30
 80095f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800979c <_svfiprintf_r+0x1ec>
 80095f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095fa:	f04f 0901 	mov.w	r9, #1
 80095fe:	4623      	mov	r3, r4
 8009600:	469a      	mov	sl, r3
 8009602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009606:	b10a      	cbz	r2, 800960c <_svfiprintf_r+0x5c>
 8009608:	2a25      	cmp	r2, #37	; 0x25
 800960a:	d1f9      	bne.n	8009600 <_svfiprintf_r+0x50>
 800960c:	ebba 0b04 	subs.w	fp, sl, r4
 8009610:	d00b      	beq.n	800962a <_svfiprintf_r+0x7a>
 8009612:	465b      	mov	r3, fp
 8009614:	4622      	mov	r2, r4
 8009616:	4629      	mov	r1, r5
 8009618:	4638      	mov	r0, r7
 800961a:	f7ff ff6d 	bl	80094f8 <__ssputs_r>
 800961e:	3001      	adds	r0, #1
 8009620:	f000 80aa 	beq.w	8009778 <_svfiprintf_r+0x1c8>
 8009624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009626:	445a      	add	r2, fp
 8009628:	9209      	str	r2, [sp, #36]	; 0x24
 800962a:	f89a 3000 	ldrb.w	r3, [sl]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 80a2 	beq.w	8009778 <_svfiprintf_r+0x1c8>
 8009634:	2300      	movs	r3, #0
 8009636:	f04f 32ff 	mov.w	r2, #4294967295
 800963a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800963e:	f10a 0a01 	add.w	sl, sl, #1
 8009642:	9304      	str	r3, [sp, #16]
 8009644:	9307      	str	r3, [sp, #28]
 8009646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800964a:	931a      	str	r3, [sp, #104]	; 0x68
 800964c:	4654      	mov	r4, sl
 800964e:	2205      	movs	r2, #5
 8009650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009654:	4851      	ldr	r0, [pc, #324]	; (800979c <_svfiprintf_r+0x1ec>)
 8009656:	f7fe fdc3 	bl	80081e0 <memchr>
 800965a:	9a04      	ldr	r2, [sp, #16]
 800965c:	b9d8      	cbnz	r0, 8009696 <_svfiprintf_r+0xe6>
 800965e:	06d0      	lsls	r0, r2, #27
 8009660:	bf44      	itt	mi
 8009662:	2320      	movmi	r3, #32
 8009664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009668:	0711      	lsls	r1, r2, #28
 800966a:	bf44      	itt	mi
 800966c:	232b      	movmi	r3, #43	; 0x2b
 800966e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009672:	f89a 3000 	ldrb.w	r3, [sl]
 8009676:	2b2a      	cmp	r3, #42	; 0x2a
 8009678:	d015      	beq.n	80096a6 <_svfiprintf_r+0xf6>
 800967a:	9a07      	ldr	r2, [sp, #28]
 800967c:	4654      	mov	r4, sl
 800967e:	2000      	movs	r0, #0
 8009680:	f04f 0c0a 	mov.w	ip, #10
 8009684:	4621      	mov	r1, r4
 8009686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800968a:	3b30      	subs	r3, #48	; 0x30
 800968c:	2b09      	cmp	r3, #9
 800968e:	d94e      	bls.n	800972e <_svfiprintf_r+0x17e>
 8009690:	b1b0      	cbz	r0, 80096c0 <_svfiprintf_r+0x110>
 8009692:	9207      	str	r2, [sp, #28]
 8009694:	e014      	b.n	80096c0 <_svfiprintf_r+0x110>
 8009696:	eba0 0308 	sub.w	r3, r0, r8
 800969a:	fa09 f303 	lsl.w	r3, r9, r3
 800969e:	4313      	orrs	r3, r2
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	46a2      	mov	sl, r4
 80096a4:	e7d2      	b.n	800964c <_svfiprintf_r+0x9c>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	1d19      	adds	r1, r3, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9103      	str	r1, [sp, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfbb      	ittet	lt
 80096b2:	425b      	neglt	r3, r3
 80096b4:	f042 0202 	orrlt.w	r2, r2, #2
 80096b8:	9307      	strge	r3, [sp, #28]
 80096ba:	9307      	strlt	r3, [sp, #28]
 80096bc:	bfb8      	it	lt
 80096be:	9204      	strlt	r2, [sp, #16]
 80096c0:	7823      	ldrb	r3, [r4, #0]
 80096c2:	2b2e      	cmp	r3, #46	; 0x2e
 80096c4:	d10c      	bne.n	80096e0 <_svfiprintf_r+0x130>
 80096c6:	7863      	ldrb	r3, [r4, #1]
 80096c8:	2b2a      	cmp	r3, #42	; 0x2a
 80096ca:	d135      	bne.n	8009738 <_svfiprintf_r+0x188>
 80096cc:	9b03      	ldr	r3, [sp, #12]
 80096ce:	1d1a      	adds	r2, r3, #4
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	9203      	str	r2, [sp, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bfb8      	it	lt
 80096d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80096dc:	3402      	adds	r4, #2
 80096de:	9305      	str	r3, [sp, #20]
 80096e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097ac <_svfiprintf_r+0x1fc>
 80096e4:	7821      	ldrb	r1, [r4, #0]
 80096e6:	2203      	movs	r2, #3
 80096e8:	4650      	mov	r0, sl
 80096ea:	f7fe fd79 	bl	80081e0 <memchr>
 80096ee:	b140      	cbz	r0, 8009702 <_svfiprintf_r+0x152>
 80096f0:	2340      	movs	r3, #64	; 0x40
 80096f2:	eba0 000a 	sub.w	r0, r0, sl
 80096f6:	fa03 f000 	lsl.w	r0, r3, r0
 80096fa:	9b04      	ldr	r3, [sp, #16]
 80096fc:	4303      	orrs	r3, r0
 80096fe:	3401      	adds	r4, #1
 8009700:	9304      	str	r3, [sp, #16]
 8009702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009706:	4826      	ldr	r0, [pc, #152]	; (80097a0 <_svfiprintf_r+0x1f0>)
 8009708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800970c:	2206      	movs	r2, #6
 800970e:	f7fe fd67 	bl	80081e0 <memchr>
 8009712:	2800      	cmp	r0, #0
 8009714:	d038      	beq.n	8009788 <_svfiprintf_r+0x1d8>
 8009716:	4b23      	ldr	r3, [pc, #140]	; (80097a4 <_svfiprintf_r+0x1f4>)
 8009718:	bb1b      	cbnz	r3, 8009762 <_svfiprintf_r+0x1b2>
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	3307      	adds	r3, #7
 800971e:	f023 0307 	bic.w	r3, r3, #7
 8009722:	3308      	adds	r3, #8
 8009724:	9303      	str	r3, [sp, #12]
 8009726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009728:	4433      	add	r3, r6
 800972a:	9309      	str	r3, [sp, #36]	; 0x24
 800972c:	e767      	b.n	80095fe <_svfiprintf_r+0x4e>
 800972e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009732:	460c      	mov	r4, r1
 8009734:	2001      	movs	r0, #1
 8009736:	e7a5      	b.n	8009684 <_svfiprintf_r+0xd4>
 8009738:	2300      	movs	r3, #0
 800973a:	3401      	adds	r4, #1
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	4619      	mov	r1, r3
 8009740:	f04f 0c0a 	mov.w	ip, #10
 8009744:	4620      	mov	r0, r4
 8009746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800974a:	3a30      	subs	r2, #48	; 0x30
 800974c:	2a09      	cmp	r2, #9
 800974e:	d903      	bls.n	8009758 <_svfiprintf_r+0x1a8>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0c5      	beq.n	80096e0 <_svfiprintf_r+0x130>
 8009754:	9105      	str	r1, [sp, #20]
 8009756:	e7c3      	b.n	80096e0 <_svfiprintf_r+0x130>
 8009758:	fb0c 2101 	mla	r1, ip, r1, r2
 800975c:	4604      	mov	r4, r0
 800975e:	2301      	movs	r3, #1
 8009760:	e7f0      	b.n	8009744 <_svfiprintf_r+0x194>
 8009762:	ab03      	add	r3, sp, #12
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	462a      	mov	r2, r5
 8009768:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <_svfiprintf_r+0x1f8>)
 800976a:	a904      	add	r1, sp, #16
 800976c:	4638      	mov	r0, r7
 800976e:	f3af 8000 	nop.w
 8009772:	1c42      	adds	r2, r0, #1
 8009774:	4606      	mov	r6, r0
 8009776:	d1d6      	bne.n	8009726 <_svfiprintf_r+0x176>
 8009778:	89ab      	ldrh	r3, [r5, #12]
 800977a:	065b      	lsls	r3, r3, #25
 800977c:	f53f af2c 	bmi.w	80095d8 <_svfiprintf_r+0x28>
 8009780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009782:	b01d      	add	sp, #116	; 0x74
 8009784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009788:	ab03      	add	r3, sp, #12
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	462a      	mov	r2, r5
 800978e:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <_svfiprintf_r+0x1f8>)
 8009790:	a904      	add	r1, sp, #16
 8009792:	4638      	mov	r0, r7
 8009794:	f000 f87a 	bl	800988c <_printf_i>
 8009798:	e7eb      	b.n	8009772 <_svfiprintf_r+0x1c2>
 800979a:	bf00      	nop
 800979c:	08009e02 	.word	0x08009e02
 80097a0:	08009e0c 	.word	0x08009e0c
 80097a4:	00000000 	.word	0x00000000
 80097a8:	080094f9 	.word	0x080094f9
 80097ac:	08009e08 	.word	0x08009e08

080097b0 <_printf_common>:
 80097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	4616      	mov	r6, r2
 80097b6:	4699      	mov	r9, r3
 80097b8:	688a      	ldr	r2, [r1, #8]
 80097ba:	690b      	ldr	r3, [r1, #16]
 80097bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	bfb8      	it	lt
 80097c4:	4613      	movlt	r3, r2
 80097c6:	6033      	str	r3, [r6, #0]
 80097c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097cc:	4607      	mov	r7, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	b10a      	cbz	r2, 80097d6 <_printf_common+0x26>
 80097d2:	3301      	adds	r3, #1
 80097d4:	6033      	str	r3, [r6, #0]
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	0699      	lsls	r1, r3, #26
 80097da:	bf42      	ittt	mi
 80097dc:	6833      	ldrmi	r3, [r6, #0]
 80097de:	3302      	addmi	r3, #2
 80097e0:	6033      	strmi	r3, [r6, #0]
 80097e2:	6825      	ldr	r5, [r4, #0]
 80097e4:	f015 0506 	ands.w	r5, r5, #6
 80097e8:	d106      	bne.n	80097f8 <_printf_common+0x48>
 80097ea:	f104 0a19 	add.w	sl, r4, #25
 80097ee:	68e3      	ldr	r3, [r4, #12]
 80097f0:	6832      	ldr	r2, [r6, #0]
 80097f2:	1a9b      	subs	r3, r3, r2
 80097f4:	42ab      	cmp	r3, r5
 80097f6:	dc26      	bgt.n	8009846 <_printf_common+0x96>
 80097f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097fc:	1e13      	subs	r3, r2, #0
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	bf18      	it	ne
 8009802:	2301      	movne	r3, #1
 8009804:	0692      	lsls	r2, r2, #26
 8009806:	d42b      	bmi.n	8009860 <_printf_common+0xb0>
 8009808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800980c:	4649      	mov	r1, r9
 800980e:	4638      	mov	r0, r7
 8009810:	47c0      	blx	r8
 8009812:	3001      	adds	r0, #1
 8009814:	d01e      	beq.n	8009854 <_printf_common+0xa4>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	68e5      	ldr	r5, [r4, #12]
 800981a:	6832      	ldr	r2, [r6, #0]
 800981c:	f003 0306 	and.w	r3, r3, #6
 8009820:	2b04      	cmp	r3, #4
 8009822:	bf08      	it	eq
 8009824:	1aad      	subeq	r5, r5, r2
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	6922      	ldr	r2, [r4, #16]
 800982a:	bf0c      	ite	eq
 800982c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009830:	2500      	movne	r5, #0
 8009832:	4293      	cmp	r3, r2
 8009834:	bfc4      	itt	gt
 8009836:	1a9b      	subgt	r3, r3, r2
 8009838:	18ed      	addgt	r5, r5, r3
 800983a:	2600      	movs	r6, #0
 800983c:	341a      	adds	r4, #26
 800983e:	42b5      	cmp	r5, r6
 8009840:	d11a      	bne.n	8009878 <_printf_common+0xc8>
 8009842:	2000      	movs	r0, #0
 8009844:	e008      	b.n	8009858 <_printf_common+0xa8>
 8009846:	2301      	movs	r3, #1
 8009848:	4652      	mov	r2, sl
 800984a:	4649      	mov	r1, r9
 800984c:	4638      	mov	r0, r7
 800984e:	47c0      	blx	r8
 8009850:	3001      	adds	r0, #1
 8009852:	d103      	bne.n	800985c <_printf_common+0xac>
 8009854:	f04f 30ff 	mov.w	r0, #4294967295
 8009858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985c:	3501      	adds	r5, #1
 800985e:	e7c6      	b.n	80097ee <_printf_common+0x3e>
 8009860:	18e1      	adds	r1, r4, r3
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	2030      	movs	r0, #48	; 0x30
 8009866:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800986a:	4422      	add	r2, r4
 800986c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009874:	3302      	adds	r3, #2
 8009876:	e7c7      	b.n	8009808 <_printf_common+0x58>
 8009878:	2301      	movs	r3, #1
 800987a:	4622      	mov	r2, r4
 800987c:	4649      	mov	r1, r9
 800987e:	4638      	mov	r0, r7
 8009880:	47c0      	blx	r8
 8009882:	3001      	adds	r0, #1
 8009884:	d0e6      	beq.n	8009854 <_printf_common+0xa4>
 8009886:	3601      	adds	r6, #1
 8009888:	e7d9      	b.n	800983e <_printf_common+0x8e>
	...

0800988c <_printf_i>:
 800988c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009890:	7e0f      	ldrb	r7, [r1, #24]
 8009892:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009894:	2f78      	cmp	r7, #120	; 0x78
 8009896:	4691      	mov	r9, r2
 8009898:	4680      	mov	r8, r0
 800989a:	460c      	mov	r4, r1
 800989c:	469a      	mov	sl, r3
 800989e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098a2:	d807      	bhi.n	80098b4 <_printf_i+0x28>
 80098a4:	2f62      	cmp	r7, #98	; 0x62
 80098a6:	d80a      	bhi.n	80098be <_printf_i+0x32>
 80098a8:	2f00      	cmp	r7, #0
 80098aa:	f000 80d8 	beq.w	8009a5e <_printf_i+0x1d2>
 80098ae:	2f58      	cmp	r7, #88	; 0x58
 80098b0:	f000 80a3 	beq.w	80099fa <_printf_i+0x16e>
 80098b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098bc:	e03a      	b.n	8009934 <_printf_i+0xa8>
 80098be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098c2:	2b15      	cmp	r3, #21
 80098c4:	d8f6      	bhi.n	80098b4 <_printf_i+0x28>
 80098c6:	a101      	add	r1, pc, #4	; (adr r1, 80098cc <_printf_i+0x40>)
 80098c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098cc:	08009925 	.word	0x08009925
 80098d0:	08009939 	.word	0x08009939
 80098d4:	080098b5 	.word	0x080098b5
 80098d8:	080098b5 	.word	0x080098b5
 80098dc:	080098b5 	.word	0x080098b5
 80098e0:	080098b5 	.word	0x080098b5
 80098e4:	08009939 	.word	0x08009939
 80098e8:	080098b5 	.word	0x080098b5
 80098ec:	080098b5 	.word	0x080098b5
 80098f0:	080098b5 	.word	0x080098b5
 80098f4:	080098b5 	.word	0x080098b5
 80098f8:	08009a45 	.word	0x08009a45
 80098fc:	08009969 	.word	0x08009969
 8009900:	08009a27 	.word	0x08009a27
 8009904:	080098b5 	.word	0x080098b5
 8009908:	080098b5 	.word	0x080098b5
 800990c:	08009a67 	.word	0x08009a67
 8009910:	080098b5 	.word	0x080098b5
 8009914:	08009969 	.word	0x08009969
 8009918:	080098b5 	.word	0x080098b5
 800991c:	080098b5 	.word	0x080098b5
 8009920:	08009a2f 	.word	0x08009a2f
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	1d1a      	adds	r2, r3, #4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	602a      	str	r2, [r5, #0]
 800992c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009934:	2301      	movs	r3, #1
 8009936:	e0a3      	b.n	8009a80 <_printf_i+0x1f4>
 8009938:	6820      	ldr	r0, [r4, #0]
 800993a:	6829      	ldr	r1, [r5, #0]
 800993c:	0606      	lsls	r6, r0, #24
 800993e:	f101 0304 	add.w	r3, r1, #4
 8009942:	d50a      	bpl.n	800995a <_printf_i+0xce>
 8009944:	680e      	ldr	r6, [r1, #0]
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	2e00      	cmp	r6, #0
 800994a:	da03      	bge.n	8009954 <_printf_i+0xc8>
 800994c:	232d      	movs	r3, #45	; 0x2d
 800994e:	4276      	negs	r6, r6
 8009950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009954:	485e      	ldr	r0, [pc, #376]	; (8009ad0 <_printf_i+0x244>)
 8009956:	230a      	movs	r3, #10
 8009958:	e019      	b.n	800998e <_printf_i+0x102>
 800995a:	680e      	ldr	r6, [r1, #0]
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009962:	bf18      	it	ne
 8009964:	b236      	sxthne	r6, r6
 8009966:	e7ef      	b.n	8009948 <_printf_i+0xbc>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	6820      	ldr	r0, [r4, #0]
 800996c:	1d19      	adds	r1, r3, #4
 800996e:	6029      	str	r1, [r5, #0]
 8009970:	0601      	lsls	r1, r0, #24
 8009972:	d501      	bpl.n	8009978 <_printf_i+0xec>
 8009974:	681e      	ldr	r6, [r3, #0]
 8009976:	e002      	b.n	800997e <_printf_i+0xf2>
 8009978:	0646      	lsls	r6, r0, #25
 800997a:	d5fb      	bpl.n	8009974 <_printf_i+0xe8>
 800997c:	881e      	ldrh	r6, [r3, #0]
 800997e:	4854      	ldr	r0, [pc, #336]	; (8009ad0 <_printf_i+0x244>)
 8009980:	2f6f      	cmp	r7, #111	; 0x6f
 8009982:	bf0c      	ite	eq
 8009984:	2308      	moveq	r3, #8
 8009986:	230a      	movne	r3, #10
 8009988:	2100      	movs	r1, #0
 800998a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800998e:	6865      	ldr	r5, [r4, #4]
 8009990:	60a5      	str	r5, [r4, #8]
 8009992:	2d00      	cmp	r5, #0
 8009994:	bfa2      	ittt	ge
 8009996:	6821      	ldrge	r1, [r4, #0]
 8009998:	f021 0104 	bicge.w	r1, r1, #4
 800999c:	6021      	strge	r1, [r4, #0]
 800999e:	b90e      	cbnz	r6, 80099a4 <_printf_i+0x118>
 80099a0:	2d00      	cmp	r5, #0
 80099a2:	d04d      	beq.n	8009a40 <_printf_i+0x1b4>
 80099a4:	4615      	mov	r5, r2
 80099a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80099aa:	fb03 6711 	mls	r7, r3, r1, r6
 80099ae:	5dc7      	ldrb	r7, [r0, r7]
 80099b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099b4:	4637      	mov	r7, r6
 80099b6:	42bb      	cmp	r3, r7
 80099b8:	460e      	mov	r6, r1
 80099ba:	d9f4      	bls.n	80099a6 <_printf_i+0x11a>
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d10b      	bne.n	80099d8 <_printf_i+0x14c>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	07de      	lsls	r6, r3, #31
 80099c4:	d508      	bpl.n	80099d8 <_printf_i+0x14c>
 80099c6:	6923      	ldr	r3, [r4, #16]
 80099c8:	6861      	ldr	r1, [r4, #4]
 80099ca:	4299      	cmp	r1, r3
 80099cc:	bfde      	ittt	le
 80099ce:	2330      	movle	r3, #48	; 0x30
 80099d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099d8:	1b52      	subs	r2, r2, r5
 80099da:	6122      	str	r2, [r4, #16]
 80099dc:	f8cd a000 	str.w	sl, [sp]
 80099e0:	464b      	mov	r3, r9
 80099e2:	aa03      	add	r2, sp, #12
 80099e4:	4621      	mov	r1, r4
 80099e6:	4640      	mov	r0, r8
 80099e8:	f7ff fee2 	bl	80097b0 <_printf_common>
 80099ec:	3001      	adds	r0, #1
 80099ee:	d14c      	bne.n	8009a8a <_printf_i+0x1fe>
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295
 80099f4:	b004      	add	sp, #16
 80099f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fa:	4835      	ldr	r0, [pc, #212]	; (8009ad0 <_printf_i+0x244>)
 80099fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a00:	6829      	ldr	r1, [r5, #0]
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a08:	6029      	str	r1, [r5, #0]
 8009a0a:	061d      	lsls	r5, r3, #24
 8009a0c:	d514      	bpl.n	8009a38 <_printf_i+0x1ac>
 8009a0e:	07df      	lsls	r7, r3, #31
 8009a10:	bf44      	itt	mi
 8009a12:	f043 0320 	orrmi.w	r3, r3, #32
 8009a16:	6023      	strmi	r3, [r4, #0]
 8009a18:	b91e      	cbnz	r6, 8009a22 <_printf_i+0x196>
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	f023 0320 	bic.w	r3, r3, #32
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	2310      	movs	r3, #16
 8009a24:	e7b0      	b.n	8009988 <_printf_i+0xfc>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	f043 0320 	orr.w	r3, r3, #32
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	2378      	movs	r3, #120	; 0x78
 8009a30:	4828      	ldr	r0, [pc, #160]	; (8009ad4 <_printf_i+0x248>)
 8009a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a36:	e7e3      	b.n	8009a00 <_printf_i+0x174>
 8009a38:	0659      	lsls	r1, r3, #25
 8009a3a:	bf48      	it	mi
 8009a3c:	b2b6      	uxthmi	r6, r6
 8009a3e:	e7e6      	b.n	8009a0e <_printf_i+0x182>
 8009a40:	4615      	mov	r5, r2
 8009a42:	e7bb      	b.n	80099bc <_printf_i+0x130>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	6826      	ldr	r6, [r4, #0]
 8009a48:	6961      	ldr	r1, [r4, #20]
 8009a4a:	1d18      	adds	r0, r3, #4
 8009a4c:	6028      	str	r0, [r5, #0]
 8009a4e:	0635      	lsls	r5, r6, #24
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	d501      	bpl.n	8009a58 <_printf_i+0x1cc>
 8009a54:	6019      	str	r1, [r3, #0]
 8009a56:	e002      	b.n	8009a5e <_printf_i+0x1d2>
 8009a58:	0670      	lsls	r0, r6, #25
 8009a5a:	d5fb      	bpl.n	8009a54 <_printf_i+0x1c8>
 8009a5c:	8019      	strh	r1, [r3, #0]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6123      	str	r3, [r4, #16]
 8009a62:	4615      	mov	r5, r2
 8009a64:	e7ba      	b.n	80099dc <_printf_i+0x150>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	1d1a      	adds	r2, r3, #4
 8009a6a:	602a      	str	r2, [r5, #0]
 8009a6c:	681d      	ldr	r5, [r3, #0]
 8009a6e:	6862      	ldr	r2, [r4, #4]
 8009a70:	2100      	movs	r1, #0
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7fe fbb4 	bl	80081e0 <memchr>
 8009a78:	b108      	cbz	r0, 8009a7e <_printf_i+0x1f2>
 8009a7a:	1b40      	subs	r0, r0, r5
 8009a7c:	6060      	str	r0, [r4, #4]
 8009a7e:	6863      	ldr	r3, [r4, #4]
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	2300      	movs	r3, #0
 8009a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a88:	e7a8      	b.n	80099dc <_printf_i+0x150>
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	462a      	mov	r2, r5
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4640      	mov	r0, r8
 8009a92:	47d0      	blx	sl
 8009a94:	3001      	adds	r0, #1
 8009a96:	d0ab      	beq.n	80099f0 <_printf_i+0x164>
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	079b      	lsls	r3, r3, #30
 8009a9c:	d413      	bmi.n	8009ac6 <_printf_i+0x23a>
 8009a9e:	68e0      	ldr	r0, [r4, #12]
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	4298      	cmp	r0, r3
 8009aa4:	bfb8      	it	lt
 8009aa6:	4618      	movlt	r0, r3
 8009aa8:	e7a4      	b.n	80099f4 <_printf_i+0x168>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4632      	mov	r2, r6
 8009aae:	4649      	mov	r1, r9
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	47d0      	blx	sl
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d09b      	beq.n	80099f0 <_printf_i+0x164>
 8009ab8:	3501      	adds	r5, #1
 8009aba:	68e3      	ldr	r3, [r4, #12]
 8009abc:	9903      	ldr	r1, [sp, #12]
 8009abe:	1a5b      	subs	r3, r3, r1
 8009ac0:	42ab      	cmp	r3, r5
 8009ac2:	dcf2      	bgt.n	8009aaa <_printf_i+0x21e>
 8009ac4:	e7eb      	b.n	8009a9e <_printf_i+0x212>
 8009ac6:	2500      	movs	r5, #0
 8009ac8:	f104 0619 	add.w	r6, r4, #25
 8009acc:	e7f5      	b.n	8009aba <_printf_i+0x22e>
 8009ace:	bf00      	nop
 8009ad0:	08009e13 	.word	0x08009e13
 8009ad4:	08009e24 	.word	0x08009e24

08009ad8 <memcpy>:
 8009ad8:	440a      	add	r2, r1
 8009ada:	4291      	cmp	r1, r2
 8009adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ae0:	d100      	bne.n	8009ae4 <memcpy+0xc>
 8009ae2:	4770      	bx	lr
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aee:	4291      	cmp	r1, r2
 8009af0:	d1f9      	bne.n	8009ae6 <memcpy+0xe>
 8009af2:	bd10      	pop	{r4, pc}

08009af4 <memmove>:
 8009af4:	4288      	cmp	r0, r1
 8009af6:	b510      	push	{r4, lr}
 8009af8:	eb01 0402 	add.w	r4, r1, r2
 8009afc:	d902      	bls.n	8009b04 <memmove+0x10>
 8009afe:	4284      	cmp	r4, r0
 8009b00:	4623      	mov	r3, r4
 8009b02:	d807      	bhi.n	8009b14 <memmove+0x20>
 8009b04:	1e43      	subs	r3, r0, #1
 8009b06:	42a1      	cmp	r1, r4
 8009b08:	d008      	beq.n	8009b1c <memmove+0x28>
 8009b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b12:	e7f8      	b.n	8009b06 <memmove+0x12>
 8009b14:	4402      	add	r2, r0
 8009b16:	4601      	mov	r1, r0
 8009b18:	428a      	cmp	r2, r1
 8009b1a:	d100      	bne.n	8009b1e <memmove+0x2a>
 8009b1c:	bd10      	pop	{r4, pc}
 8009b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b26:	e7f7      	b.n	8009b18 <memmove+0x24>

08009b28 <_free_r>:
 8009b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b2a:	2900      	cmp	r1, #0
 8009b2c:	d044      	beq.n	8009bb8 <_free_r+0x90>
 8009b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b32:	9001      	str	r0, [sp, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f1a1 0404 	sub.w	r4, r1, #4
 8009b3a:	bfb8      	it	lt
 8009b3c:	18e4      	addlt	r4, r4, r3
 8009b3e:	f000 f913 	bl	8009d68 <__malloc_lock>
 8009b42:	4a1e      	ldr	r2, [pc, #120]	; (8009bbc <_free_r+0x94>)
 8009b44:	9801      	ldr	r0, [sp, #4]
 8009b46:	6813      	ldr	r3, [r2, #0]
 8009b48:	b933      	cbnz	r3, 8009b58 <_free_r+0x30>
 8009b4a:	6063      	str	r3, [r4, #4]
 8009b4c:	6014      	str	r4, [r2, #0]
 8009b4e:	b003      	add	sp, #12
 8009b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b54:	f000 b90e 	b.w	8009d74 <__malloc_unlock>
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	d908      	bls.n	8009b6e <_free_r+0x46>
 8009b5c:	6825      	ldr	r5, [r4, #0]
 8009b5e:	1961      	adds	r1, r4, r5
 8009b60:	428b      	cmp	r3, r1
 8009b62:	bf01      	itttt	eq
 8009b64:	6819      	ldreq	r1, [r3, #0]
 8009b66:	685b      	ldreq	r3, [r3, #4]
 8009b68:	1949      	addeq	r1, r1, r5
 8009b6a:	6021      	streq	r1, [r4, #0]
 8009b6c:	e7ed      	b.n	8009b4a <_free_r+0x22>
 8009b6e:	461a      	mov	r2, r3
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	b10b      	cbz	r3, 8009b78 <_free_r+0x50>
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	d9fa      	bls.n	8009b6e <_free_r+0x46>
 8009b78:	6811      	ldr	r1, [r2, #0]
 8009b7a:	1855      	adds	r5, r2, r1
 8009b7c:	42a5      	cmp	r5, r4
 8009b7e:	d10b      	bne.n	8009b98 <_free_r+0x70>
 8009b80:	6824      	ldr	r4, [r4, #0]
 8009b82:	4421      	add	r1, r4
 8009b84:	1854      	adds	r4, r2, r1
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	6011      	str	r1, [r2, #0]
 8009b8a:	d1e0      	bne.n	8009b4e <_free_r+0x26>
 8009b8c:	681c      	ldr	r4, [r3, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	6053      	str	r3, [r2, #4]
 8009b92:	4421      	add	r1, r4
 8009b94:	6011      	str	r1, [r2, #0]
 8009b96:	e7da      	b.n	8009b4e <_free_r+0x26>
 8009b98:	d902      	bls.n	8009ba0 <_free_r+0x78>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	6003      	str	r3, [r0, #0]
 8009b9e:	e7d6      	b.n	8009b4e <_free_r+0x26>
 8009ba0:	6825      	ldr	r5, [r4, #0]
 8009ba2:	1961      	adds	r1, r4, r5
 8009ba4:	428b      	cmp	r3, r1
 8009ba6:	bf04      	itt	eq
 8009ba8:	6819      	ldreq	r1, [r3, #0]
 8009baa:	685b      	ldreq	r3, [r3, #4]
 8009bac:	6063      	str	r3, [r4, #4]
 8009bae:	bf04      	itt	eq
 8009bb0:	1949      	addeq	r1, r1, r5
 8009bb2:	6021      	streq	r1, [r4, #0]
 8009bb4:	6054      	str	r4, [r2, #4]
 8009bb6:	e7ca      	b.n	8009b4e <_free_r+0x26>
 8009bb8:	b003      	add	sp, #12
 8009bba:	bd30      	pop	{r4, r5, pc}
 8009bbc:	20000124 	.word	0x20000124

08009bc0 <sbrk_aligned>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	4e0e      	ldr	r6, [pc, #56]	; (8009bfc <sbrk_aligned+0x3c>)
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	6831      	ldr	r1, [r6, #0]
 8009bc8:	4605      	mov	r5, r0
 8009bca:	b911      	cbnz	r1, 8009bd2 <sbrk_aligned+0x12>
 8009bcc:	f000 f8bc 	bl	8009d48 <_sbrk_r>
 8009bd0:	6030      	str	r0, [r6, #0]
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 f8b7 	bl	8009d48 <_sbrk_r>
 8009bda:	1c43      	adds	r3, r0, #1
 8009bdc:	d00a      	beq.n	8009bf4 <sbrk_aligned+0x34>
 8009bde:	1cc4      	adds	r4, r0, #3
 8009be0:	f024 0403 	bic.w	r4, r4, #3
 8009be4:	42a0      	cmp	r0, r4
 8009be6:	d007      	beq.n	8009bf8 <sbrk_aligned+0x38>
 8009be8:	1a21      	subs	r1, r4, r0
 8009bea:	4628      	mov	r0, r5
 8009bec:	f000 f8ac 	bl	8009d48 <_sbrk_r>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d101      	bne.n	8009bf8 <sbrk_aligned+0x38>
 8009bf4:	f04f 34ff 	mov.w	r4, #4294967295
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	20000128 	.word	0x20000128

08009c00 <_malloc_r>:
 8009c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c04:	1ccd      	adds	r5, r1, #3
 8009c06:	f025 0503 	bic.w	r5, r5, #3
 8009c0a:	3508      	adds	r5, #8
 8009c0c:	2d0c      	cmp	r5, #12
 8009c0e:	bf38      	it	cc
 8009c10:	250c      	movcc	r5, #12
 8009c12:	2d00      	cmp	r5, #0
 8009c14:	4607      	mov	r7, r0
 8009c16:	db01      	blt.n	8009c1c <_malloc_r+0x1c>
 8009c18:	42a9      	cmp	r1, r5
 8009c1a:	d905      	bls.n	8009c28 <_malloc_r+0x28>
 8009c1c:	230c      	movs	r3, #12
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	2600      	movs	r6, #0
 8009c22:	4630      	mov	r0, r6
 8009c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c28:	4e2e      	ldr	r6, [pc, #184]	; (8009ce4 <_malloc_r+0xe4>)
 8009c2a:	f000 f89d 	bl	8009d68 <__malloc_lock>
 8009c2e:	6833      	ldr	r3, [r6, #0]
 8009c30:	461c      	mov	r4, r3
 8009c32:	bb34      	cbnz	r4, 8009c82 <_malloc_r+0x82>
 8009c34:	4629      	mov	r1, r5
 8009c36:	4638      	mov	r0, r7
 8009c38:	f7ff ffc2 	bl	8009bc0 <sbrk_aligned>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	4604      	mov	r4, r0
 8009c40:	d14d      	bne.n	8009cde <_malloc_r+0xde>
 8009c42:	6834      	ldr	r4, [r6, #0]
 8009c44:	4626      	mov	r6, r4
 8009c46:	2e00      	cmp	r6, #0
 8009c48:	d140      	bne.n	8009ccc <_malloc_r+0xcc>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4638      	mov	r0, r7
 8009c50:	eb04 0803 	add.w	r8, r4, r3
 8009c54:	f000 f878 	bl	8009d48 <_sbrk_r>
 8009c58:	4580      	cmp	r8, r0
 8009c5a:	d13a      	bne.n	8009cd2 <_malloc_r+0xd2>
 8009c5c:	6821      	ldr	r1, [r4, #0]
 8009c5e:	3503      	adds	r5, #3
 8009c60:	1a6d      	subs	r5, r5, r1
 8009c62:	f025 0503 	bic.w	r5, r5, #3
 8009c66:	3508      	adds	r5, #8
 8009c68:	2d0c      	cmp	r5, #12
 8009c6a:	bf38      	it	cc
 8009c6c:	250c      	movcc	r5, #12
 8009c6e:	4629      	mov	r1, r5
 8009c70:	4638      	mov	r0, r7
 8009c72:	f7ff ffa5 	bl	8009bc0 <sbrk_aligned>
 8009c76:	3001      	adds	r0, #1
 8009c78:	d02b      	beq.n	8009cd2 <_malloc_r+0xd2>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	442b      	add	r3, r5
 8009c7e:	6023      	str	r3, [r4, #0]
 8009c80:	e00e      	b.n	8009ca0 <_malloc_r+0xa0>
 8009c82:	6822      	ldr	r2, [r4, #0]
 8009c84:	1b52      	subs	r2, r2, r5
 8009c86:	d41e      	bmi.n	8009cc6 <_malloc_r+0xc6>
 8009c88:	2a0b      	cmp	r2, #11
 8009c8a:	d916      	bls.n	8009cba <_malloc_r+0xba>
 8009c8c:	1961      	adds	r1, r4, r5
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	6025      	str	r5, [r4, #0]
 8009c92:	bf18      	it	ne
 8009c94:	6059      	strne	r1, [r3, #4]
 8009c96:	6863      	ldr	r3, [r4, #4]
 8009c98:	bf08      	it	eq
 8009c9a:	6031      	streq	r1, [r6, #0]
 8009c9c:	5162      	str	r2, [r4, r5]
 8009c9e:	604b      	str	r3, [r1, #4]
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f104 060b 	add.w	r6, r4, #11
 8009ca6:	f000 f865 	bl	8009d74 <__malloc_unlock>
 8009caa:	f026 0607 	bic.w	r6, r6, #7
 8009cae:	1d23      	adds	r3, r4, #4
 8009cb0:	1af2      	subs	r2, r6, r3
 8009cb2:	d0b6      	beq.n	8009c22 <_malloc_r+0x22>
 8009cb4:	1b9b      	subs	r3, r3, r6
 8009cb6:	50a3      	str	r3, [r4, r2]
 8009cb8:	e7b3      	b.n	8009c22 <_malloc_r+0x22>
 8009cba:	6862      	ldr	r2, [r4, #4]
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	bf0c      	ite	eq
 8009cc0:	6032      	streq	r2, [r6, #0]
 8009cc2:	605a      	strne	r2, [r3, #4]
 8009cc4:	e7ec      	b.n	8009ca0 <_malloc_r+0xa0>
 8009cc6:	4623      	mov	r3, r4
 8009cc8:	6864      	ldr	r4, [r4, #4]
 8009cca:	e7b2      	b.n	8009c32 <_malloc_r+0x32>
 8009ccc:	4634      	mov	r4, r6
 8009cce:	6876      	ldr	r6, [r6, #4]
 8009cd0:	e7b9      	b.n	8009c46 <_malloc_r+0x46>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	603b      	str	r3, [r7, #0]
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f000 f84c 	bl	8009d74 <__malloc_unlock>
 8009cdc:	e7a1      	b.n	8009c22 <_malloc_r+0x22>
 8009cde:	6025      	str	r5, [r4, #0]
 8009ce0:	e7de      	b.n	8009ca0 <_malloc_r+0xa0>
 8009ce2:	bf00      	nop
 8009ce4:	20000124 	.word	0x20000124

08009ce8 <_realloc_r>:
 8009ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cec:	4680      	mov	r8, r0
 8009cee:	4614      	mov	r4, r2
 8009cf0:	460e      	mov	r6, r1
 8009cf2:	b921      	cbnz	r1, 8009cfe <_realloc_r+0x16>
 8009cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	f7ff bf81 	b.w	8009c00 <_malloc_r>
 8009cfe:	b92a      	cbnz	r2, 8009d0c <_realloc_r+0x24>
 8009d00:	f7ff ff12 	bl	8009b28 <_free_r>
 8009d04:	4625      	mov	r5, r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d0c:	f000 f838 	bl	8009d80 <_malloc_usable_size_r>
 8009d10:	4284      	cmp	r4, r0
 8009d12:	4607      	mov	r7, r0
 8009d14:	d802      	bhi.n	8009d1c <_realloc_r+0x34>
 8009d16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d1a:	d812      	bhi.n	8009d42 <_realloc_r+0x5a>
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	4640      	mov	r0, r8
 8009d20:	f7ff ff6e 	bl	8009c00 <_malloc_r>
 8009d24:	4605      	mov	r5, r0
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d0ed      	beq.n	8009d06 <_realloc_r+0x1e>
 8009d2a:	42bc      	cmp	r4, r7
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	4631      	mov	r1, r6
 8009d30:	bf28      	it	cs
 8009d32:	463a      	movcs	r2, r7
 8009d34:	f7ff fed0 	bl	8009ad8 <memcpy>
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	f7ff fef4 	bl	8009b28 <_free_r>
 8009d40:	e7e1      	b.n	8009d06 <_realloc_r+0x1e>
 8009d42:	4635      	mov	r5, r6
 8009d44:	e7df      	b.n	8009d06 <_realloc_r+0x1e>
	...

08009d48 <_sbrk_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d06      	ldr	r5, [pc, #24]	; (8009d64 <_sbrk_r+0x1c>)
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4604      	mov	r4, r0
 8009d50:	4608      	mov	r0, r1
 8009d52:	602b      	str	r3, [r5, #0]
 8009d54:	f7fe fdae 	bl	80088b4 <_sbrk>
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	d102      	bne.n	8009d62 <_sbrk_r+0x1a>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	b103      	cbz	r3, 8009d62 <_sbrk_r+0x1a>
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	2000012c 	.word	0x2000012c

08009d68 <__malloc_lock>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__malloc_lock+0x8>)
 8009d6a:	f000 b811 	b.w	8009d90 <__retarget_lock_acquire_recursive>
 8009d6e:	bf00      	nop
 8009d70:	20000130 	.word	0x20000130

08009d74 <__malloc_unlock>:
 8009d74:	4801      	ldr	r0, [pc, #4]	; (8009d7c <__malloc_unlock+0x8>)
 8009d76:	f000 b80c 	b.w	8009d92 <__retarget_lock_release_recursive>
 8009d7a:	bf00      	nop
 8009d7c:	20000130 	.word	0x20000130

08009d80 <_malloc_usable_size_r>:
 8009d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d84:	1f18      	subs	r0, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfbc      	itt	lt
 8009d8a:	580b      	ldrlt	r3, [r1, r0]
 8009d8c:	18c0      	addlt	r0, r0, r3
 8009d8e:	4770      	bx	lr

08009d90 <__retarget_lock_acquire_recursive>:
 8009d90:	4770      	bx	lr

08009d92 <__retarget_lock_release_recursive>:
 8009d92:	4770      	bx	lr

08009d94 <_init>:
 8009d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d96:	bf00      	nop
 8009d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9a:	bc08      	pop	{r3}
 8009d9c:	469e      	mov	lr, r3
 8009d9e:	4770      	bx	lr

08009da0 <_fini>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr
