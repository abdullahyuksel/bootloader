
bootloader_HAL_UserApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e9c  08008190  08008190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800a02c  0800a02c  0000a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b8  0800a0b8  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0b8  0800a0b8  0000a0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0c0  0800a0c0  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0c0  0800a0c0  0000a0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0c4  0800a0c4  0000a0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a0c8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010070  2**0
                  CONTENTS
 10 .bss          000000c4  20000070  20000070  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00010070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b64  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e9  00000000  00000000  00019c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000640  00000000  00000000  0001b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000618  00000000  00000000  0001b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020482  00000000  00000000  0001bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000acaf  00000000  00000000  0003c3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2daa  00000000  00000000  00047079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00109e23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001334  00000000  00000000  00109e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00006169  00000000  00000000  0010b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	; (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000070 	.word	0x20000070
 80081ac:	00000000 	.word	0x00000000
 80081b0:	0800a014 	.word	0x0800a014

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	; (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	; (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20000074 	.word	0x20000074
 80081cc:	0800a014 	.word	0x0800a014

080081d0 <strlen>:
 80081d0:	4603      	mov	r3, r0
 80081d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	d1fb      	bne.n	80081d2 <strlen+0x2>
 80081da:	1a18      	subs	r0, r3, r0
 80081dc:	3801      	subs	r0, #1
 80081de:	4770      	bx	lr

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <__aeabi_uldivmod>:
 8008280:	b953      	cbnz	r3, 8008298 <__aeabi_uldivmod+0x18>
 8008282:	b94a      	cbnz	r2, 8008298 <__aeabi_uldivmod+0x18>
 8008284:	2900      	cmp	r1, #0
 8008286:	bf08      	it	eq
 8008288:	2800      	cmpeq	r0, #0
 800828a:	bf1c      	itt	ne
 800828c:	f04f 31ff 	movne.w	r1, #4294967295
 8008290:	f04f 30ff 	movne.w	r0, #4294967295
 8008294:	f000 b974 	b.w	8008580 <__aeabi_idiv0>
 8008298:	f1ad 0c08 	sub.w	ip, sp, #8
 800829c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082a0:	f000 f806 	bl	80082b0 <__udivmoddi4>
 80082a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr

080082b0 <__udivmoddi4>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	9d08      	ldr	r5, [sp, #32]
 80082b6:	4604      	mov	r4, r0
 80082b8:	468e      	mov	lr, r1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d14d      	bne.n	800835a <__udivmoddi4+0xaa>
 80082be:	428a      	cmp	r2, r1
 80082c0:	4694      	mov	ip, r2
 80082c2:	d969      	bls.n	8008398 <__udivmoddi4+0xe8>
 80082c4:	fab2 f282 	clz	r2, r2
 80082c8:	b152      	cbz	r2, 80082e0 <__udivmoddi4+0x30>
 80082ca:	fa01 f302 	lsl.w	r3, r1, r2
 80082ce:	f1c2 0120 	rsb	r1, r2, #32
 80082d2:	fa20 f101 	lsr.w	r1, r0, r1
 80082d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80082da:	ea41 0e03 	orr.w	lr, r1, r3
 80082de:	4094      	lsls	r4, r2
 80082e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80082e4:	0c21      	lsrs	r1, r4, #16
 80082e6:	fbbe f6f8 	udiv	r6, lr, r8
 80082ea:	fa1f f78c 	uxth.w	r7, ip
 80082ee:	fb08 e316 	mls	r3, r8, r6, lr
 80082f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082f6:	fb06 f107 	mul.w	r1, r6, r7
 80082fa:	4299      	cmp	r1, r3
 80082fc:	d90a      	bls.n	8008314 <__udivmoddi4+0x64>
 80082fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008302:	f106 30ff 	add.w	r0, r6, #4294967295
 8008306:	f080 811f 	bcs.w	8008548 <__udivmoddi4+0x298>
 800830a:	4299      	cmp	r1, r3
 800830c:	f240 811c 	bls.w	8008548 <__udivmoddi4+0x298>
 8008310:	3e02      	subs	r6, #2
 8008312:	4463      	add	r3, ip
 8008314:	1a5b      	subs	r3, r3, r1
 8008316:	b2a4      	uxth	r4, r4
 8008318:	fbb3 f0f8 	udiv	r0, r3, r8
 800831c:	fb08 3310 	mls	r3, r8, r0, r3
 8008320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008324:	fb00 f707 	mul.w	r7, r0, r7
 8008328:	42a7      	cmp	r7, r4
 800832a:	d90a      	bls.n	8008342 <__udivmoddi4+0x92>
 800832c:	eb1c 0404 	adds.w	r4, ip, r4
 8008330:	f100 33ff 	add.w	r3, r0, #4294967295
 8008334:	f080 810a 	bcs.w	800854c <__udivmoddi4+0x29c>
 8008338:	42a7      	cmp	r7, r4
 800833a:	f240 8107 	bls.w	800854c <__udivmoddi4+0x29c>
 800833e:	4464      	add	r4, ip
 8008340:	3802      	subs	r0, #2
 8008342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008346:	1be4      	subs	r4, r4, r7
 8008348:	2600      	movs	r6, #0
 800834a:	b11d      	cbz	r5, 8008354 <__udivmoddi4+0xa4>
 800834c:	40d4      	lsrs	r4, r2
 800834e:	2300      	movs	r3, #0
 8008350:	e9c5 4300 	strd	r4, r3, [r5]
 8008354:	4631      	mov	r1, r6
 8008356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835a:	428b      	cmp	r3, r1
 800835c:	d909      	bls.n	8008372 <__udivmoddi4+0xc2>
 800835e:	2d00      	cmp	r5, #0
 8008360:	f000 80ef 	beq.w	8008542 <__udivmoddi4+0x292>
 8008364:	2600      	movs	r6, #0
 8008366:	e9c5 0100 	strd	r0, r1, [r5]
 800836a:	4630      	mov	r0, r6
 800836c:	4631      	mov	r1, r6
 800836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008372:	fab3 f683 	clz	r6, r3
 8008376:	2e00      	cmp	r6, #0
 8008378:	d14a      	bne.n	8008410 <__udivmoddi4+0x160>
 800837a:	428b      	cmp	r3, r1
 800837c:	d302      	bcc.n	8008384 <__udivmoddi4+0xd4>
 800837e:	4282      	cmp	r2, r0
 8008380:	f200 80f9 	bhi.w	8008576 <__udivmoddi4+0x2c6>
 8008384:	1a84      	subs	r4, r0, r2
 8008386:	eb61 0303 	sbc.w	r3, r1, r3
 800838a:	2001      	movs	r0, #1
 800838c:	469e      	mov	lr, r3
 800838e:	2d00      	cmp	r5, #0
 8008390:	d0e0      	beq.n	8008354 <__udivmoddi4+0xa4>
 8008392:	e9c5 4e00 	strd	r4, lr, [r5]
 8008396:	e7dd      	b.n	8008354 <__udivmoddi4+0xa4>
 8008398:	b902      	cbnz	r2, 800839c <__udivmoddi4+0xec>
 800839a:	deff      	udf	#255	; 0xff
 800839c:	fab2 f282 	clz	r2, r2
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	f040 8092 	bne.w	80084ca <__udivmoddi4+0x21a>
 80083a6:	eba1 010c 	sub.w	r1, r1, ip
 80083aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083ae:	fa1f fe8c 	uxth.w	lr, ip
 80083b2:	2601      	movs	r6, #1
 80083b4:	0c20      	lsrs	r0, r4, #16
 80083b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80083ba:	fb07 1113 	mls	r1, r7, r3, r1
 80083be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80083c2:	fb0e f003 	mul.w	r0, lr, r3
 80083c6:	4288      	cmp	r0, r1
 80083c8:	d908      	bls.n	80083dc <__udivmoddi4+0x12c>
 80083ca:	eb1c 0101 	adds.w	r1, ip, r1
 80083ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80083d2:	d202      	bcs.n	80083da <__udivmoddi4+0x12a>
 80083d4:	4288      	cmp	r0, r1
 80083d6:	f200 80cb 	bhi.w	8008570 <__udivmoddi4+0x2c0>
 80083da:	4643      	mov	r3, r8
 80083dc:	1a09      	subs	r1, r1, r0
 80083de:	b2a4      	uxth	r4, r4
 80083e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80083e4:	fb07 1110 	mls	r1, r7, r0, r1
 80083e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80083ec:	fb0e fe00 	mul.w	lr, lr, r0
 80083f0:	45a6      	cmp	lr, r4
 80083f2:	d908      	bls.n	8008406 <__udivmoddi4+0x156>
 80083f4:	eb1c 0404 	adds.w	r4, ip, r4
 80083f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80083fc:	d202      	bcs.n	8008404 <__udivmoddi4+0x154>
 80083fe:	45a6      	cmp	lr, r4
 8008400:	f200 80bb 	bhi.w	800857a <__udivmoddi4+0x2ca>
 8008404:	4608      	mov	r0, r1
 8008406:	eba4 040e 	sub.w	r4, r4, lr
 800840a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800840e:	e79c      	b.n	800834a <__udivmoddi4+0x9a>
 8008410:	f1c6 0720 	rsb	r7, r6, #32
 8008414:	40b3      	lsls	r3, r6
 8008416:	fa22 fc07 	lsr.w	ip, r2, r7
 800841a:	ea4c 0c03 	orr.w	ip, ip, r3
 800841e:	fa20 f407 	lsr.w	r4, r0, r7
 8008422:	fa01 f306 	lsl.w	r3, r1, r6
 8008426:	431c      	orrs	r4, r3
 8008428:	40f9      	lsrs	r1, r7
 800842a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800842e:	fa00 f306 	lsl.w	r3, r0, r6
 8008432:	fbb1 f8f9 	udiv	r8, r1, r9
 8008436:	0c20      	lsrs	r0, r4, #16
 8008438:	fa1f fe8c 	uxth.w	lr, ip
 800843c:	fb09 1118 	mls	r1, r9, r8, r1
 8008440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008444:	fb08 f00e 	mul.w	r0, r8, lr
 8008448:	4288      	cmp	r0, r1
 800844a:	fa02 f206 	lsl.w	r2, r2, r6
 800844e:	d90b      	bls.n	8008468 <__udivmoddi4+0x1b8>
 8008450:	eb1c 0101 	adds.w	r1, ip, r1
 8008454:	f108 3aff 	add.w	sl, r8, #4294967295
 8008458:	f080 8088 	bcs.w	800856c <__udivmoddi4+0x2bc>
 800845c:	4288      	cmp	r0, r1
 800845e:	f240 8085 	bls.w	800856c <__udivmoddi4+0x2bc>
 8008462:	f1a8 0802 	sub.w	r8, r8, #2
 8008466:	4461      	add	r1, ip
 8008468:	1a09      	subs	r1, r1, r0
 800846a:	b2a4      	uxth	r4, r4
 800846c:	fbb1 f0f9 	udiv	r0, r1, r9
 8008470:	fb09 1110 	mls	r1, r9, r0, r1
 8008474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008478:	fb00 fe0e 	mul.w	lr, r0, lr
 800847c:	458e      	cmp	lr, r1
 800847e:	d908      	bls.n	8008492 <__udivmoddi4+0x1e2>
 8008480:	eb1c 0101 	adds.w	r1, ip, r1
 8008484:	f100 34ff 	add.w	r4, r0, #4294967295
 8008488:	d26c      	bcs.n	8008564 <__udivmoddi4+0x2b4>
 800848a:	458e      	cmp	lr, r1
 800848c:	d96a      	bls.n	8008564 <__udivmoddi4+0x2b4>
 800848e:	3802      	subs	r0, #2
 8008490:	4461      	add	r1, ip
 8008492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008496:	fba0 9402 	umull	r9, r4, r0, r2
 800849a:	eba1 010e 	sub.w	r1, r1, lr
 800849e:	42a1      	cmp	r1, r4
 80084a0:	46c8      	mov	r8, r9
 80084a2:	46a6      	mov	lr, r4
 80084a4:	d356      	bcc.n	8008554 <__udivmoddi4+0x2a4>
 80084a6:	d053      	beq.n	8008550 <__udivmoddi4+0x2a0>
 80084a8:	b15d      	cbz	r5, 80084c2 <__udivmoddi4+0x212>
 80084aa:	ebb3 0208 	subs.w	r2, r3, r8
 80084ae:	eb61 010e 	sbc.w	r1, r1, lr
 80084b2:	fa01 f707 	lsl.w	r7, r1, r7
 80084b6:	fa22 f306 	lsr.w	r3, r2, r6
 80084ba:	40f1      	lsrs	r1, r6
 80084bc:	431f      	orrs	r7, r3
 80084be:	e9c5 7100 	strd	r7, r1, [r5]
 80084c2:	2600      	movs	r6, #0
 80084c4:	4631      	mov	r1, r6
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	f1c2 0320 	rsb	r3, r2, #32
 80084ce:	40d8      	lsrs	r0, r3
 80084d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80084d4:	fa21 f303 	lsr.w	r3, r1, r3
 80084d8:	4091      	lsls	r1, r2
 80084da:	4301      	orrs	r1, r0
 80084dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80084e0:	fa1f fe8c 	uxth.w	lr, ip
 80084e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80084e8:	fb07 3610 	mls	r6, r7, r0, r3
 80084ec:	0c0b      	lsrs	r3, r1, #16
 80084ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80084f2:	fb00 f60e 	mul.w	r6, r0, lr
 80084f6:	429e      	cmp	r6, r3
 80084f8:	fa04 f402 	lsl.w	r4, r4, r2
 80084fc:	d908      	bls.n	8008510 <__udivmoddi4+0x260>
 80084fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008502:	f100 38ff 	add.w	r8, r0, #4294967295
 8008506:	d22f      	bcs.n	8008568 <__udivmoddi4+0x2b8>
 8008508:	429e      	cmp	r6, r3
 800850a:	d92d      	bls.n	8008568 <__udivmoddi4+0x2b8>
 800850c:	3802      	subs	r0, #2
 800850e:	4463      	add	r3, ip
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	b289      	uxth	r1, r1
 8008514:	fbb3 f6f7 	udiv	r6, r3, r7
 8008518:	fb07 3316 	mls	r3, r7, r6, r3
 800851c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008520:	fb06 f30e 	mul.w	r3, r6, lr
 8008524:	428b      	cmp	r3, r1
 8008526:	d908      	bls.n	800853a <__udivmoddi4+0x28a>
 8008528:	eb1c 0101 	adds.w	r1, ip, r1
 800852c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008530:	d216      	bcs.n	8008560 <__udivmoddi4+0x2b0>
 8008532:	428b      	cmp	r3, r1
 8008534:	d914      	bls.n	8008560 <__udivmoddi4+0x2b0>
 8008536:	3e02      	subs	r6, #2
 8008538:	4461      	add	r1, ip
 800853a:	1ac9      	subs	r1, r1, r3
 800853c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008540:	e738      	b.n	80083b4 <__udivmoddi4+0x104>
 8008542:	462e      	mov	r6, r5
 8008544:	4628      	mov	r0, r5
 8008546:	e705      	b.n	8008354 <__udivmoddi4+0xa4>
 8008548:	4606      	mov	r6, r0
 800854a:	e6e3      	b.n	8008314 <__udivmoddi4+0x64>
 800854c:	4618      	mov	r0, r3
 800854e:	e6f8      	b.n	8008342 <__udivmoddi4+0x92>
 8008550:	454b      	cmp	r3, r9
 8008552:	d2a9      	bcs.n	80084a8 <__udivmoddi4+0x1f8>
 8008554:	ebb9 0802 	subs.w	r8, r9, r2
 8008558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800855c:	3801      	subs	r0, #1
 800855e:	e7a3      	b.n	80084a8 <__udivmoddi4+0x1f8>
 8008560:	4646      	mov	r6, r8
 8008562:	e7ea      	b.n	800853a <__udivmoddi4+0x28a>
 8008564:	4620      	mov	r0, r4
 8008566:	e794      	b.n	8008492 <__udivmoddi4+0x1e2>
 8008568:	4640      	mov	r0, r8
 800856a:	e7d1      	b.n	8008510 <__udivmoddi4+0x260>
 800856c:	46d0      	mov	r8, sl
 800856e:	e77b      	b.n	8008468 <__udivmoddi4+0x1b8>
 8008570:	3b02      	subs	r3, #2
 8008572:	4461      	add	r1, ip
 8008574:	e732      	b.n	80083dc <__udivmoddi4+0x12c>
 8008576:	4630      	mov	r0, r6
 8008578:	e709      	b.n	800838e <__udivmoddi4+0xde>
 800857a:	4464      	add	r4, ip
 800857c:	3802      	subs	r0, #2
 800857e:	e742      	b.n	8008406 <__udivmoddi4+0x156>

08008580 <__aeabi_idiv0>:
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop

08008584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008588:	2400      	movs	r4, #0
 800858a:	9403      	str	r4, [sp, #12]
 800858c:	9404      	str	r4, [sp, #16]
 800858e:	9405      	str	r4, [sp, #20]
 8008590:	9406      	str	r4, [sp, #24]
 8008592:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008594:	9400      	str	r4, [sp, #0]
 8008596:	4b21      	ldr	r3, [pc, #132]	; (800861c <MX_GPIO_Init+0x98>)
 8008598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800859a:	f042 0201 	orr.w	r2, r2, #1
 800859e:	631a      	str	r2, [r3, #48]	; 0x30
 80085a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085a2:	f002 0201 	and.w	r2, r2, #1
 80085a6:	9200      	str	r2, [sp, #0]
 80085a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80085aa:	9401      	str	r4, [sp, #4]
 80085ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ae:	f042 0208 	orr.w	r2, r2, #8
 80085b2:	631a      	str	r2, [r3, #48]	; 0x30
 80085b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085b6:	f002 0208 	and.w	r2, r2, #8
 80085ba:	9201      	str	r2, [sp, #4]
 80085bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80085be:	9402      	str	r4, [sp, #8]
 80085c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085c2:	f042 0204 	orr.w	r2, r2, #4
 80085c6:	631a      	str	r2, [r3, #48]	; 0x30
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f003 0304 	and.w	r3, r3, #4
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led1_Pin|led2_Pin|led3_Pin|led4_Pin, GPIO_PIN_RESET);
 80085d2:	4d13      	ldr	r5, [pc, #76]	; (8008620 <MX_GPIO_Init+0x9c>)
 80085d4:	4622      	mov	r2, r4
 80085d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 fbd0 	bl	8008d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80085e0:	2601      	movs	r6, #1
 80085e2:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80085e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80085e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ea:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ec:	a903      	add	r1, sp, #12
 80085ee:	480d      	ldr	r0, [pc, #52]	; (8008624 <MX_GPIO_Init+0xa0>)
 80085f0:	f000 fad4 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin;
 80085f4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80085f8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085fa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085fc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085fe:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008600:	a903      	add	r1, sp, #12
 8008602:	4628      	mov	r0, r5
 8008604:	f000 faca 	bl	8008b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008608:	4622      	mov	r2, r4
 800860a:	4621      	mov	r1, r4
 800860c:	2006      	movs	r0, #6
 800860e:	f000 fa5b 	bl	8008ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008612:	2006      	movs	r0, #6
 8008614:	f000 fa90 	bl	8008b38 <HAL_NVIC_EnableIRQ>

}
 8008618:	b008      	add	sp, #32
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	40023800 	.word	0x40023800
 8008620:	40020c00 	.word	0x40020c00
 8008624:	40020000 	.word	0x40020000

08008628 <printMessages>:
{
 8008628:	b40f      	push	{r0, r1, r2, r3}
 800862a:	b500      	push	{lr}
 800862c:	b09b      	sub	sp, #108	; 0x6c
 800862e:	aa1c      	add	r2, sp, #112	; 0x70
 8008630:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(vaList, format);
 8008634:	9200      	str	r2, [sp, #0]
	vsprintf(comingMessage, format, vaList);
 8008636:	a801      	add	r0, sp, #4
 8008638:	f001 f894 	bl	8009764 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)comingMessage, strlen(comingMessage), 100);
 800863c:	a801      	add	r0, sp, #4
 800863e:	f7ff fdc7 	bl	80081d0 <strlen>
 8008642:	2364      	movs	r3, #100	; 0x64
 8008644:	b282      	uxth	r2, r0
 8008646:	a901      	add	r1, sp, #4
 8008648:	4803      	ldr	r0, [pc, #12]	; (8008658 <printMessages+0x30>)
 800864a:	f000 ffd6 	bl	80095fa <HAL_UART_Transmit>
}
 800864e:	b01b      	add	sp, #108	; 0x6c
 8008650:	f85d eb04 	ldr.w	lr, [sp], #4
 8008654:	b004      	add	sp, #16
 8008656:	4770      	bx	lr
 8008658:	20000094 	.word	0x20000094

0800865c <HAL_GPIO_EXTI_Callback>:
}
 800865c:	4770      	bx	lr

0800865e <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800865e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008660:	e7fe      	b.n	8008660 <Error_Handler+0x2>
	...

08008664 <MX_CRC_Init>:
{
 8008664:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8008666:	4804      	ldr	r0, [pc, #16]	; (8008678 <MX_CRC_Init+0x14>)
 8008668:	4b04      	ldr	r3, [pc, #16]	; (800867c <MX_CRC_Init+0x18>)
 800866a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800866c:	f000 fa86 	bl	8008b7c <HAL_CRC_Init>
 8008670:	b900      	cbnz	r0, 8008674 <MX_CRC_Init+0x10>
}
 8008672:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008674:	f7ff fff3 	bl	800865e <Error_Handler>
 8008678:	2000008c 	.word	0x2000008c
 800867c:	40023000 	.word	0x40023000

08008680 <MX_USART2_UART_Init>:
{
 8008680:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8008682:	480a      	ldr	r0, [pc, #40]	; (80086ac <MX_USART2_UART_Init+0x2c>)
 8008684:	4b0a      	ldr	r3, [pc, #40]	; (80086b0 <MX_USART2_UART_Init+0x30>)
 8008686:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8008688:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800868c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800868e:	2300      	movs	r3, #0
 8008690:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008692:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008694:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008696:	220c      	movs	r2, #12
 8008698:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800869a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800869c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800869e:	f000 ff7d 	bl	800959c <HAL_UART_Init>
 80086a2:	b900      	cbnz	r0, 80086a6 <MX_USART2_UART_Init+0x26>
}
 80086a4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80086a6:	f7ff ffda 	bl	800865e <Error_Handler>
 80086aa:	bf00      	nop
 80086ac:	20000094 	.word	0x20000094
 80086b0:	40004400 	.word	0x40004400

080086b4 <MX_USART3_UART_Init>:
{
 80086b4:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80086b6:	480a      	ldr	r0, [pc, #40]	; (80086e0 <MX_USART3_UART_Init+0x2c>)
 80086b8:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <MX_USART3_UART_Init+0x30>)
 80086ba:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80086bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80086c0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80086c2:	2300      	movs	r3, #0
 80086c4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80086c6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80086c8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80086ca:	220c      	movs	r2, #12
 80086cc:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086ce:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80086d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80086d2:	f000 ff63 	bl	800959c <HAL_UART_Init>
 80086d6:	b900      	cbnz	r0, 80086da <MX_USART3_UART_Init+0x26>
}
 80086d8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80086da:	f7ff ffc0 	bl	800865e <Error_Handler>
 80086de:	bf00      	nop
 80086e0:	200000d8 	.word	0x200000d8
 80086e4:	40004800 	.word	0x40004800

080086e8 <SystemClock_Config>:
{
 80086e8:	b500      	push	{lr}
 80086ea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80086ec:	2230      	movs	r2, #48	; 0x30
 80086ee:	2100      	movs	r1, #0
 80086f0:	a808      	add	r0, sp, #32
 80086f2:	f001 f819 	bl	8009728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80086f6:	2300      	movs	r3, #0
 80086f8:	9303      	str	r3, [sp, #12]
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	9305      	str	r3, [sp, #20]
 80086fe:	9306      	str	r3, [sp, #24]
 8008700:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	4a18      	ldr	r2, [pc, #96]	; (8008768 <SystemClock_Config+0x80>)
 8008706:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8008708:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800870c:	6411      	str	r1, [r2, #64]	; 0x40
 800870e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008710:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8008714:	9201      	str	r2, [sp, #4]
 8008716:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008718:	9302      	str	r3, [sp, #8]
 800871a:	4a14      	ldr	r2, [pc, #80]	; (800876c <SystemClock_Config+0x84>)
 800871c:	6811      	ldr	r1, [r2, #0]
 800871e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8008722:	6011      	str	r1, [r2, #0]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800872a:	9202      	str	r2, [sp, #8]
 800872c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800872e:	2202      	movs	r2, #2
 8008730:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008732:	2201      	movs	r2, #1
 8008734:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008736:	2210      	movs	r2, #16
 8008738:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800873a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800873c:	a808      	add	r0, sp, #32
 800873e:	f000 fb3d 	bl	8008dbc <HAL_RCC_OscConfig>
 8008742:	b968      	cbnz	r0, 8008760 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008744:	230f      	movs	r3, #15
 8008746:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008748:	2100      	movs	r1, #0
 800874a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800874c:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800874e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008750:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008752:	a803      	add	r0, sp, #12
 8008754:	f000 fd80 	bl	8009258 <HAL_RCC_ClockConfig>
 8008758:	b920      	cbnz	r0, 8008764 <SystemClock_Config+0x7c>
}
 800875a:	b015      	add	sp, #84	; 0x54
 800875c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008760:	f7ff ff7d 	bl	800865e <Error_Handler>
    Error_Handler();
 8008764:	f7ff ff7b 	bl	800865e <Error_Handler>
 8008768:	40023800 	.word	0x40023800
 800876c:	40007000 	.word	0x40007000

08008770 <main>:
{
 8008770:	b508      	push	{r3, lr}
  HAL_Init();
 8008772:	f000 f957 	bl	8008a24 <HAL_Init>
  SystemClock_Config();
 8008776:	f7ff ffb7 	bl	80086e8 <SystemClock_Config>
  MX_GPIO_Init();
 800877a:	f7ff ff03 	bl	8008584 <MX_GPIO_Init>
  MX_CRC_Init();
 800877e:	f7ff ff71 	bl	8008664 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8008782:	f7ff ff7d 	bl	8008680 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8008786:	f7ff ff95 	bl	80086b4 <MX_USART3_UART_Init>
	  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 800878a:	4c0e      	ldr	r4, [pc, #56]	; (80087c4 <main+0x54>)
 800878c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008790:	4620      	mov	r0, r4
 8008792:	f000 fafb 	bl	8008d8c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8008796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800879a:	4620      	mov	r0, r4
 800879c:	f000 faf6 	bl	8008d8c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 80087a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 faf1 	bl	8008d8c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 80087aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 faec 	bl	8008d8c <HAL_GPIO_TogglePin>
	  printMessages("BL USER APP MSG: Hello from the bootloader User Application\r\n");
 80087b4:	4804      	ldr	r0, [pc, #16]	; (80087c8 <main+0x58>)
 80087b6:	f7ff ff37 	bl	8008628 <printMessages>
	  HAL_Delay(100);
 80087ba:	2064      	movs	r0, #100	; 0x64
 80087bc:	f000 f95e 	bl	8008a7c <HAL_Delay>
  while (1)
 80087c0:	e7e3      	b.n	800878a <main+0x1a>
 80087c2:	bf00      	nop
 80087c4:	40020c00 	.word	0x40020c00
 80087c8:	0800a02c 	.word	0x0800a02c

080087cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087cc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087ce:	2100      	movs	r1, #0
 80087d0:	9100      	str	r1, [sp, #0]
 80087d2:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <HAL_MspInit+0x34>)
 80087d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087da:	645a      	str	r2, [r3, #68]	; 0x44
 80087dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80087e2:	9200      	str	r2, [sp, #0]
 80087e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087e6:	9101      	str	r1, [sp, #4]
 80087e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80087ee:	641a      	str	r2, [r3, #64]	; 0x40
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087fa:	b002      	add	sp, #8
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	40023800 	.word	0x40023800

08008804 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8008804:	6802      	ldr	r2, [r0, #0]
 8008806:	4b09      	ldr	r3, [pc, #36]	; (800882c <HAL_CRC_MspInit+0x28>)
 8008808:	429a      	cmp	r2, r3
 800880a:	d000      	beq.n	800880e <HAL_CRC_MspInit+0xa>
 800880c:	4770      	bx	lr
{
 800880e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008810:	2300      	movs	r3, #0
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	4b06      	ldr	r3, [pc, #24]	; (8008830 <HAL_CRC_MspInit+0x2c>)
 8008816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800881c:	631a      	str	r2, [r3, #48]	; 0x30
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008828:	b002      	add	sp, #8
 800882a:	4770      	bx	lr
 800882c:	40023000 	.word	0x40023000
 8008830:	40023800 	.word	0x40023800

08008834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008834:	b500      	push	{lr}
 8008836:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008838:	2300      	movs	r3, #0
 800883a:	9305      	str	r3, [sp, #20]
 800883c:	9306      	str	r3, [sp, #24]
 800883e:	9307      	str	r3, [sp, #28]
 8008840:	9308      	str	r3, [sp, #32]
 8008842:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8008844:	6803      	ldr	r3, [r0, #0]
 8008846:	4a28      	ldr	r2, [pc, #160]	; (80088e8 <HAL_UART_MspInit+0xb4>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d005      	beq.n	8008858 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800884c:	4a27      	ldr	r2, [pc, #156]	; (80088ec <HAL_UART_MspInit+0xb8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d025      	beq.n	800889e <HAL_UART_MspInit+0x6a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008852:	b00b      	add	sp, #44	; 0x2c
 8008854:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8008858:	2100      	movs	r1, #0
 800885a:	9101      	str	r1, [sp, #4]
 800885c:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <HAL_UART_MspInit+0xbc>)
 800885e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008860:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008864:	641a      	str	r2, [r3, #64]	; 0x40
 8008866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008868:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800886c:	9201      	str	r2, [sp, #4]
 800886e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008870:	9102      	str	r1, [sp, #8]
 8008872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008874:	f042 0201 	orr.w	r2, r2, #1
 8008878:	631a      	str	r2, [r3, #48]	; 0x30
 800887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	9302      	str	r3, [sp, #8]
 8008882:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008884:	230c      	movs	r3, #12
 8008886:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008888:	2302      	movs	r3, #2
 800888a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800888c:	2303      	movs	r3, #3
 800888e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008890:	2307      	movs	r3, #7
 8008892:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008894:	a905      	add	r1, sp, #20
 8008896:	4817      	ldr	r0, [pc, #92]	; (80088f4 <HAL_UART_MspInit+0xc0>)
 8008898:	f000 f980 	bl	8008b9c <HAL_GPIO_Init>
 800889c:	e7d9      	b.n	8008852 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800889e:	2100      	movs	r1, #0
 80088a0:	9103      	str	r1, [sp, #12]
 80088a2:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <HAL_UART_MspInit+0xbc>)
 80088a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80088aa:	641a      	str	r2, [r3, #64]	; 0x40
 80088ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088ae:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80088b2:	9203      	str	r2, [sp, #12]
 80088b4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80088b6:	9104      	str	r1, [sp, #16]
 80088b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ba:	f042 0204 	orr.w	r2, r2, #4
 80088be:	631a      	str	r2, [r3, #48]	; 0x30
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	9304      	str	r3, [sp, #16]
 80088c8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80088ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80088ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088d0:	2302      	movs	r3, #2
 80088d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088d4:	2303      	movs	r3, #3
 80088d6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80088d8:	2307      	movs	r3, #7
 80088da:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088dc:	a905      	add	r1, sp, #20
 80088de:	4806      	ldr	r0, [pc, #24]	; (80088f8 <HAL_UART_MspInit+0xc4>)
 80088e0:	f000 f95c 	bl	8008b9c <HAL_GPIO_Init>
}
 80088e4:	e7b5      	b.n	8008852 <HAL_UART_MspInit+0x1e>
 80088e6:	bf00      	nop
 80088e8:	40004400 	.word	0x40004400
 80088ec:	40004800 	.word	0x40004800
 80088f0:	40023800 	.word	0x40023800
 80088f4:	40020000 	.word	0x40020000
 80088f8:	40020800 	.word	0x40020800

080088fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80088fc:	e7fe      	b.n	80088fc <NMI_Handler>

080088fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088fe:	e7fe      	b.n	80088fe <HardFault_Handler>

08008900 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008900:	e7fe      	b.n	8008900 <MemManage_Handler>

08008902 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008902:	e7fe      	b.n	8008902 <BusFault_Handler>

08008904 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008904:	e7fe      	b.n	8008904 <UsageFault_Handler>

08008906 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008906:	4770      	bx	lr

08008908 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008908:	4770      	bx	lr

0800890a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800890a:	4770      	bx	lr

0800890c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800890c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800890e:	f000 f8a3 	bl	8008a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008912:	bd08      	pop	{r3, pc}

08008914 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008916:	2001      	movs	r0, #1
 8008918:	f000 fa42 	bl	8008da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800891c:	bd08      	pop	{r3, pc}
	...

08008920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008920:	b510      	push	{r4, lr}
 8008922:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008924:	4a0c      	ldr	r2, [pc, #48]	; (8008958 <_sbrk+0x38>)
 8008926:	490d      	ldr	r1, [pc, #52]	; (800895c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008928:	480d      	ldr	r0, [pc, #52]	; (8008960 <_sbrk+0x40>)
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	b140      	cbz	r0, 8008940 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800892e:	480c      	ldr	r0, [pc, #48]	; (8008960 <_sbrk+0x40>)
 8008930:	6800      	ldr	r0, [r0, #0]
 8008932:	4403      	add	r3, r0
 8008934:	1a52      	subs	r2, r2, r1
 8008936:	4293      	cmp	r3, r2
 8008938:	d806      	bhi.n	8008948 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800893a:	4a09      	ldr	r2, [pc, #36]	; (8008960 <_sbrk+0x40>)
 800893c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800893e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8008940:	4807      	ldr	r0, [pc, #28]	; (8008960 <_sbrk+0x40>)
 8008942:	4c08      	ldr	r4, [pc, #32]	; (8008964 <_sbrk+0x44>)
 8008944:	6004      	str	r4, [r0, #0]
 8008946:	e7f2      	b.n	800892e <_sbrk+0xe>
    errno = ENOMEM;
 8008948:	f000 fec4 	bl	80096d4 <__errno>
 800894c:	230c      	movs	r3, #12
 800894e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
 8008954:	e7f3      	b.n	800893e <_sbrk+0x1e>
 8008956:	bf00      	nop
 8008958:	20020000 	.word	0x20020000
 800895c:	00000400 	.word	0x00000400
 8008960:	2000011c 	.word	0x2000011c
 8008964:	20000138 	.word	0x20000138

08008968 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008968:	4b04      	ldr	r3, [pc, #16]	; (800897c <SystemInit+0x14>)
 800896a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800896e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008976:	4a02      	ldr	r2, [pc, #8]	; (8008980 <SystemInit+0x18>)
 8008978:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800897a:	4770      	bx	lr
 800897c:	e000ed00 	.word	0xe000ed00
 8008980:	08008000 	.word	0x08008000

08008984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80089bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008988:	480d      	ldr	r0, [pc, #52]	; (80089c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800898a:	490e      	ldr	r1, [pc, #56]	; (80089c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800898c:	4a0e      	ldr	r2, [pc, #56]	; (80089c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800898e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008990:	e002      	b.n	8008998 <LoopCopyDataInit>

08008992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008996:	3304      	adds	r3, #4

08008998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800899a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800899c:	d3f9      	bcc.n	8008992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800899e:	4a0b      	ldr	r2, [pc, #44]	; (80089cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80089a0:	4c0b      	ldr	r4, [pc, #44]	; (80089d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80089a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089a4:	e001      	b.n	80089aa <LoopFillZerobss>

080089a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089a8:	3204      	adds	r2, #4

080089aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089ac:	d3fb      	bcc.n	80089a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80089ae:	f7ff ffdb 	bl	8008968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80089b2:	f000 fe95 	bl	80096e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80089b6:	f7ff fedb 	bl	8008770 <main>
  bx  lr    
 80089ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80089bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80089c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80089c8:	0800a0c8 	.word	0x0800a0c8
  ldr r2, =_sbss
 80089cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80089d0:	20000134 	.word	0x20000134

080089d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80089d4:	e7fe      	b.n	80089d4 <ADC_IRQHandler>
	...

080089d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089d8:	b510      	push	{r4, lr}
 80089da:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80089dc:	4b0e      	ldr	r3, [pc, #56]	; (8008a18 <HAL_InitTick+0x40>)
 80089de:	7818      	ldrb	r0, [r3, #0]
 80089e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80089e8:	4a0c      	ldr	r2, [pc, #48]	; (8008a1c <HAL_InitTick+0x44>)
 80089ea:	6810      	ldr	r0, [r2, #0]
 80089ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80089f0:	f000 f8b0 	bl	8008b54 <HAL_SYSTICK_Config>
 80089f4:	b968      	cbnz	r0, 8008a12 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089f6:	2c0f      	cmp	r4, #15
 80089f8:	d901      	bls.n	80089fe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80089fa:	2001      	movs	r0, #1
 80089fc:	e00a      	b.n	8008a14 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089fe:	2200      	movs	r2, #0
 8008a00:	4621      	mov	r1, r4
 8008a02:	f04f 30ff 	mov.w	r0, #4294967295
 8008a06:	f000 f85f 	bl	8008ac8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <HAL_InitTick+0x48>)
 8008a0c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e000      	b.n	8008a14 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8008a12:	2001      	movs	r0, #1
}
 8008a14:	bd10      	pop	{r4, pc}
 8008a16:	bf00      	nop
 8008a18:	20000004 	.word	0x20000004
 8008a1c:	20000000 	.word	0x20000000
 8008a20:	20000008 	.word	0x20000008

08008a24 <HAL_Init>:
{
 8008a24:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008a26:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <HAL_Init+0x30>)
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a2e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a3e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a40:	2003      	movs	r0, #3
 8008a42:	f000 f82f 	bl	8008aa4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a46:	200f      	movs	r0, #15
 8008a48:	f7ff ffc6 	bl	80089d8 <HAL_InitTick>
  HAL_MspInit();
 8008a4c:	f7ff febe 	bl	80087cc <HAL_MspInit>
}
 8008a50:	2000      	movs	r0, #0
 8008a52:	bd08      	pop	{r3, pc}
 8008a54:	40023c00 	.word	0x40023c00

08008a58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008a58:	4a03      	ldr	r2, [pc, #12]	; (8008a68 <HAL_IncTick+0x10>)
 8008a5a:	6811      	ldr	r1, [r2, #0]
 8008a5c:	4b03      	ldr	r3, [pc, #12]	; (8008a6c <HAL_IncTick+0x14>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	440b      	add	r3, r1
 8008a62:	6013      	str	r3, [r2, #0]
}
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	20000120 	.word	0x20000120
 8008a6c:	20000004 	.word	0x20000004

08008a70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008a70:	4b01      	ldr	r3, [pc, #4]	; (8008a78 <HAL_GetTick+0x8>)
 8008a72:	6818      	ldr	r0, [r3, #0]
}
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	20000120 	.word	0x20000120

08008a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008a80:	f7ff fff6 	bl	8008a70 <HAL_GetTick>
 8008a84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a86:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008a8a:	d002      	beq.n	8008a92 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a8c:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <HAL_Delay+0x24>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008a92:	f7ff ffed 	bl	8008a70 <HAL_GetTick>
 8008a96:	1b40      	subs	r0, r0, r5
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d3fa      	bcc.n	8008a92 <HAL_Delay+0x16>
  {
  }
}
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000004 	.word	0x20000004

08008aa4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008aa4:	4a07      	ldr	r2, [pc, #28]	; (8008ac4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008aa6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008aa8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008aac:	041b      	lsls	r3, r3, #16
 8008aae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ab0:	0200      	lsls	r0, r0, #8
 8008ab2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ab6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8008ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008ac0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008ac2:	4770      	bx	lr
 8008ac4:	e000ed00 	.word	0xe000ed00

08008ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ac8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008aca:	4b19      	ldr	r3, [pc, #100]	; (8008b30 <HAL_NVIC_SetPriority+0x68>)
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ad2:	f1c3 0c07 	rsb	ip, r3, #7
 8008ad6:	f1bc 0f04 	cmp.w	ip, #4
 8008ada:	bf28      	it	cs
 8008adc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ae0:	f103 0e04 	add.w	lr, r3, #4
 8008ae4:	f1be 0f06 	cmp.w	lr, #6
 8008ae8:	d918      	bls.n	8008b1c <HAL_NVIC_SetPriority+0x54>
 8008aea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008aec:	f04f 3eff 	mov.w	lr, #4294967295
 8008af0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008af4:	ea21 010c 	bic.w	r1, r1, ip
 8008af8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008afa:	fa0e f303 	lsl.w	r3, lr, r3
 8008afe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b02:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8008b04:	2800      	cmp	r0, #0
 8008b06:	db0b      	blt.n	8008b20 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b08:	0109      	lsls	r1, r1, #4
 8008b0a:	b2c9      	uxtb	r1, r1
 8008b0c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008b10:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8008b14:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008b18:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e7e5      	b.n	8008aec <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b20:	f000 000f 	and.w	r0, r0, #15
 8008b24:	0109      	lsls	r1, r1, #4
 8008b26:	b2c9      	uxtb	r1, r1
 8008b28:	4b02      	ldr	r3, [pc, #8]	; (8008b34 <HAL_NVIC_SetPriority+0x6c>)
 8008b2a:	5419      	strb	r1, [r3, r0]
 8008b2c:	e7f4      	b.n	8008b18 <HAL_NVIC_SetPriority+0x50>
 8008b2e:	bf00      	nop
 8008b30:	e000ed00 	.word	0xe000ed00
 8008b34:	e000ed14 	.word	0xe000ed14

08008b38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	db07      	blt.n	8008b4c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b3c:	f000 021f 	and.w	r2, r0, #31
 8008b40:	0940      	lsrs	r0, r0, #5
 8008b42:	2301      	movs	r3, #1
 8008b44:	4093      	lsls	r3, r2
 8008b46:	4a02      	ldr	r2, [pc, #8]	; (8008b50 <HAL_NVIC_EnableIRQ+0x18>)
 8008b48:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	e000e100 	.word	0xe000e100

08008b54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b54:	3801      	subs	r0, #1
 8008b56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008b5a:	d20b      	bcs.n	8008b74 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b60:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b62:	4a05      	ldr	r2, [pc, #20]	; (8008b78 <HAL_SYSTICK_Config+0x24>)
 8008b64:	21f0      	movs	r1, #240	; 0xf0
 8008b66:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b6e:	2207      	movs	r2, #7
 8008b70:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b72:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008b74:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008b76:	4770      	bx	lr
 8008b78:	e000ed00 	.word	0xe000ed00

08008b7c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008b7c:	b158      	cbz	r0, 8008b96 <HAL_CRC_Init+0x1a>
{
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008b82:	7943      	ldrb	r3, [r0, #5]
 8008b84:	b11b      	cbz	r3, 8008b8e <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008b86:	2301      	movs	r3, #1
 8008b88:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8008b8a:	2000      	movs	r0, #0
}
 8008b8c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8008b8e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8008b90:	f7ff fe38 	bl	8008804 <HAL_CRC_MspInit>
 8008b94:	e7f7      	b.n	8008b86 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8008b96:	2001      	movs	r0, #1
}
 8008b98:	4770      	bx	lr
	...

08008b9c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	2b0f      	cmp	r3, #15
 8008ba0:	f200 80e4 	bhi.w	8008d6c <HAL_GPIO_Init+0x1d0>
{
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	e060      	b.n	8008c6c <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008baa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008bac:	005e      	lsls	r6, r3, #1
 8008bae:	2403      	movs	r4, #3
 8008bb0:	40b4      	lsls	r4, r6
 8008bb2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bb6:	68cc      	ldr	r4, [r1, #12]
 8008bb8:	40b4      	lsls	r4, r6
 8008bba:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8008bbc:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bbe:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bc0:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bc4:	684c      	ldr	r4, [r1, #4]
 8008bc6:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8008bca:	409a      	lsls	r2, r3
 8008bcc:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8008bce:	6042      	str	r2, [r0, #4]
 8008bd0:	e05a      	b.n	8008c88 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bd2:	08dc      	lsrs	r4, r3, #3
 8008bd4:	3408      	adds	r4, #8
 8008bd6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008bda:	f003 0207 	and.w	r2, r3, #7
 8008bde:	0095      	lsls	r5, r2, #2
 8008be0:	220f      	movs	r2, #15
 8008be2:	40aa      	lsls	r2, r5
 8008be4:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008be8:	690a      	ldr	r2, [r1, #16]
 8008bea:	40aa      	lsls	r2, r5
 8008bec:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8008bf0:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8008bf4:	e05c      	b.n	8008cb0 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bf6:	2207      	movs	r2, #7
 8008bf8:	e000      	b.n	8008bfc <HAL_GPIO_Init+0x60>
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	fa02 f20e 	lsl.w	r2, r2, lr
 8008c00:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c02:	3402      	adds	r4, #2
 8008c04:	4d5a      	ldr	r5, [pc, #360]	; (8008d70 <HAL_GPIO_Init+0x1d4>)
 8008c06:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c0a:	4a5a      	ldr	r2, [pc, #360]	; (8008d74 <HAL_GPIO_Init+0x1d8>)
 8008c0c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8008c0e:	ea6f 020c 	mvn.w	r2, ip
 8008c12:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c16:	684e      	ldr	r6, [r1, #4]
 8008c18:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8008c1c:	d001      	beq.n	8008c22 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8008c1e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8008c22:	4c54      	ldr	r4, [pc, #336]	; (8008d74 <HAL_GPIO_Init+0x1d8>)
 8008c24:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8008c26:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8008c28:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c2c:	684e      	ldr	r6, [r1, #4]
 8008c2e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8008c32:	d001      	beq.n	8008c38 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8008c34:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8008c38:	4c4e      	ldr	r4, [pc, #312]	; (8008d74 <HAL_GPIO_Init+0x1d8>)
 8008c3a:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8008c3c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8008c3e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c42:	684e      	ldr	r6, [r1, #4]
 8008c44:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8008c48:	d001      	beq.n	8008c4e <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8008c4a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8008c4e:	4c49      	ldr	r4, [pc, #292]	; (8008d74 <HAL_GPIO_Init+0x1d8>)
 8008c50:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c52:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8008c54:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c56:	684d      	ldr	r5, [r1, #4]
 8008c58:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8008c5c:	d001      	beq.n	8008c62 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8008c5e:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8008c62:	4c44      	ldr	r4, [pc, #272]	; (8008d74 <HAL_GPIO_Init+0x1d8>)
 8008c64:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c66:	3301      	adds	r3, #1
 8008c68:	2b0f      	cmp	r3, #15
 8008c6a:	d87d      	bhi.n	8008d68 <HAL_GPIO_Init+0x1cc>
    ioposition = 0x01U << position;
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c70:	680c      	ldr	r4, [r1, #0]
 8008c72:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8008c76:	ea32 0404 	bics.w	r4, r2, r4
 8008c7a:	d1f4      	bne.n	8008c66 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c7c:	684c      	ldr	r4, [r1, #4]
 8008c7e:	f004 0403 	and.w	r4, r4, #3
 8008c82:	3c01      	subs	r4, #1
 8008c84:	2c01      	cmp	r4, #1
 8008c86:	d990      	bls.n	8008baa <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c88:	684a      	ldr	r2, [r1, #4]
 8008c8a:	f002 0203 	and.w	r2, r2, #3
 8008c8e:	2a03      	cmp	r2, #3
 8008c90:	d009      	beq.n	8008ca6 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8008c92:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c94:	005d      	lsls	r5, r3, #1
 8008c96:	2203      	movs	r2, #3
 8008c98:	40aa      	lsls	r2, r5
 8008c9a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c9e:	688a      	ldr	r2, [r1, #8]
 8008ca0:	40aa      	lsls	r2, r5
 8008ca2:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8008ca4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ca6:	684a      	ldr	r2, [r1, #4]
 8008ca8:	f002 0203 	and.w	r2, r2, #3
 8008cac:	2a02      	cmp	r2, #2
 8008cae:	d090      	beq.n	8008bd2 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8008cb0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008cb2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	fa02 f20e 	lsl.w	r2, r2, lr
 8008cbc:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cc0:	684a      	ldr	r2, [r1, #4]
 8008cc2:	f002 0203 	and.w	r2, r2, #3
 8008cc6:	fa02 f20e 	lsl.w	r2, r2, lr
 8008cca:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8008ccc:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008cce:	684a      	ldr	r2, [r1, #4]
 8008cd0:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8008cd4:	d0c7      	beq.n	8008c66 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	9201      	str	r2, [sp, #4]
 8008cda:	4a27      	ldr	r2, [pc, #156]	; (8008d78 <HAL_GPIO_Init+0x1dc>)
 8008cdc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8008cde:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8008ce2:	6454      	str	r4, [r2, #68]	; 0x44
 8008ce4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008ce6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008cea:	9201      	str	r2, [sp, #4]
 8008cec:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008cee:	089c      	lsrs	r4, r3, #2
 8008cf0:	1ca5      	adds	r5, r4, #2
 8008cf2:	4a1f      	ldr	r2, [pc, #124]	; (8008d70 <HAL_GPIO_Init+0x1d4>)
 8008cf4:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008cf8:	f003 0203 	and.w	r2, r3, #3
 8008cfc:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8008d00:	220f      	movs	r2, #15
 8008d02:	fa02 f20e 	lsl.w	r2, r2, lr
 8008d06:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d0a:	4a1c      	ldr	r2, [pc, #112]	; (8008d7c <HAL_GPIO_Init+0x1e0>)
 8008d0c:	4290      	cmp	r0, r2
 8008d0e:	f43f af74 	beq.w	8008bfa <HAL_GPIO_Init+0x5e>
 8008d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d16:	4290      	cmp	r0, r2
 8008d18:	d01a      	beq.n	8008d50 <HAL_GPIO_Init+0x1b4>
 8008d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d1e:	4290      	cmp	r0, r2
 8008d20:	d018      	beq.n	8008d54 <HAL_GPIO_Init+0x1b8>
 8008d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d26:	4290      	cmp	r0, r2
 8008d28:	d016      	beq.n	8008d58 <HAL_GPIO_Init+0x1bc>
 8008d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d2e:	4290      	cmp	r0, r2
 8008d30:	d014      	beq.n	8008d5c <HAL_GPIO_Init+0x1c0>
 8008d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d36:	4290      	cmp	r0, r2
 8008d38:	d012      	beq.n	8008d60 <HAL_GPIO_Init+0x1c4>
 8008d3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d3e:	4290      	cmp	r0, r2
 8008d40:	d010      	beq.n	8008d64 <HAL_GPIO_Init+0x1c8>
 8008d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d46:	4290      	cmp	r0, r2
 8008d48:	f43f af55 	beq.w	8008bf6 <HAL_GPIO_Init+0x5a>
 8008d4c:	2208      	movs	r2, #8
 8008d4e:	e755      	b.n	8008bfc <HAL_GPIO_Init+0x60>
 8008d50:	2201      	movs	r2, #1
 8008d52:	e753      	b.n	8008bfc <HAL_GPIO_Init+0x60>
 8008d54:	2202      	movs	r2, #2
 8008d56:	e751      	b.n	8008bfc <HAL_GPIO_Init+0x60>
 8008d58:	2203      	movs	r2, #3
 8008d5a:	e74f      	b.n	8008bfc <HAL_GPIO_Init+0x60>
 8008d5c:	2204      	movs	r2, #4
 8008d5e:	e74d      	b.n	8008bfc <HAL_GPIO_Init+0x60>
 8008d60:	2205      	movs	r2, #5
 8008d62:	e74b      	b.n	8008bfc <HAL_GPIO_Init+0x60>
 8008d64:	2206      	movs	r2, #6
 8008d66:	e749      	b.n	8008bfc <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8008d68:	b002      	add	sp, #8
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	40013800 	.word	0x40013800
 8008d74:	40013c00 	.word	0x40013c00
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	40020000 	.word	0x40020000

08008d80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d80:	b10a      	cbz	r2, 8008d86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d82:	6181      	str	r1, [r0, #24]
 8008d84:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008d86:	0409      	lsls	r1, r1, #16
 8008d88:	6181      	str	r1, [r0, #24]
  }
}
 8008d8a:	4770      	bx	lr

08008d8c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008d8c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008d8e:	ea01 0203 	and.w	r2, r1, r3
 8008d92:	ea21 0103 	bic.w	r1, r1, r3
 8008d96:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d9a:	6181      	str	r1, [r0, #24]
}
 8008d9c:	4770      	bx	lr
	...

08008da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008da0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008da2:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	4203      	tst	r3, r0
 8008da8:	d100      	bne.n	8008dac <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8008daa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8008dae:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008db0:	f7ff fc54 	bl	800865c <HAL_GPIO_EXTI_Callback>
}
 8008db4:	e7f9      	b.n	8008daa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8008db6:	bf00      	nop
 8008db8:	40013c00 	.word	0x40013c00

08008dbc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	f000 81e0 	beq.w	8009182 <HAL_RCC_OscConfig+0x3c6>
{
 8008dc2:	b570      	push	{r4, r5, r6, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dc8:	6803      	ldr	r3, [r0, #0]
 8008dca:	f013 0f01 	tst.w	r3, #1
 8008dce:	d03b      	beq.n	8008e48 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008dd0:	4b9f      	ldr	r3, [pc, #636]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f003 030c 	and.w	r3, r3, #12
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d02c      	beq.n	8008e36 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ddc:	4b9c      	ldr	r3, [pc, #624]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d021      	beq.n	8008e2c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008de8:	6863      	ldr	r3, [r4, #4]
 8008dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dee:	d04f      	beq.n	8008e90 <HAL_RCC_OscConfig+0xd4>
 8008df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008df4:	d052      	beq.n	8008e9c <HAL_RCC_OscConfig+0xe0>
 8008df6:	4b96      	ldr	r3, [pc, #600]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d050      	beq.n	8008eb0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e0e:	f7ff fe2f 	bl	8008a70 <HAL_GetTick>
 8008e12:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e14:	4b8e      	ldr	r3, [pc, #568]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008e1c:	d114      	bne.n	8008e48 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e1e:	f7ff fe27 	bl	8008a70 <HAL_GetTick>
 8008e22:	1b40      	subs	r0, r0, r5
 8008e24:	2864      	cmp	r0, #100	; 0x64
 8008e26:	d9f5      	bls.n	8008e14 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8008e28:	2003      	movs	r0, #3
 8008e2a:	e1b1      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e2c:	4b88      	ldr	r3, [pc, #544]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008e34:	d0d8      	beq.n	8008de8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e36:	4b86      	ldr	r3, [pc, #536]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008e3e:	d003      	beq.n	8008e48 <HAL_RCC_OscConfig+0x8c>
 8008e40:	6863      	ldr	r3, [r4, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 819f 	beq.w	8009186 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	f013 0f02 	tst.w	r3, #2
 8008e4e:	d054      	beq.n	8008efa <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e50:	4b7f      	ldr	r3, [pc, #508]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f013 0f0c 	tst.w	r3, #12
 8008e58:	d03e      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e5a:	4b7d      	ldr	r3, [pc, #500]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	d033      	beq.n	8008ece <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e66:	68e3      	ldr	r3, [r4, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d068      	beq.n	8008f3e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e6c:	4b79      	ldr	r3, [pc, #484]	; (8009054 <HAL_RCC_OscConfig+0x298>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e72:	f7ff fdfd 	bl	8008a70 <HAL_GetTick>
 8008e76:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e78:	4b75      	ldr	r3, [pc, #468]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f013 0f02 	tst.w	r3, #2
 8008e80:	d154      	bne.n	8008f2c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e82:	f7ff fdf5 	bl	8008a70 <HAL_GetTick>
 8008e86:	1b40      	subs	r0, r0, r5
 8008e88:	2802      	cmp	r0, #2
 8008e8a:	d9f5      	bls.n	8008e78 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8008e8c:	2003      	movs	r0, #3
 8008e8e:	e17f      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e90:	4a6f      	ldr	r2, [pc, #444]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	e7b5      	b.n	8008e08 <HAL_RCC_OscConfig+0x4c>
 8008e9c:	4b6c      	ldr	r3, [pc, #432]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e7ab      	b.n	8008e08 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8008eb0:	f7ff fdde 	bl	8008a70 <HAL_GetTick>
 8008eb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eb6:	4b66      	ldr	r3, [pc, #408]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008ebe:	d0c3      	beq.n	8008e48 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ec0:	f7ff fdd6 	bl	8008a70 <HAL_GetTick>
 8008ec4:	1b40      	subs	r0, r0, r5
 8008ec6:	2864      	cmp	r0, #100	; 0x64
 8008ec8:	d9f5      	bls.n	8008eb6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8008eca:	2003      	movs	r0, #3
 8008ecc:	e160      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ece:	4b60      	ldr	r3, [pc, #384]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008ed6:	d1c6      	bne.n	8008e66 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ed8:	4b5d      	ldr	r3, [pc, #372]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f013 0f02 	tst.w	r3, #2
 8008ee0:	d003      	beq.n	8008eea <HAL_RCC_OscConfig+0x12e>
 8008ee2:	68e3      	ldr	r3, [r4, #12]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	f040 8150 	bne.w	800918a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eea:	4a59      	ldr	r2, [pc, #356]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008eec:	6813      	ldr	r3, [r2, #0]
 8008eee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008ef2:	6921      	ldr	r1, [r4, #16]
 8008ef4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008ef8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	f013 0f08 	tst.w	r3, #8
 8008f00:	d042      	beq.n	8008f88 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f02:	6963      	ldr	r3, [r4, #20]
 8008f04:	b36b      	cbz	r3, 8008f62 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f06:	4b53      	ldr	r3, [pc, #332]	; (8009054 <HAL_RCC_OscConfig+0x298>)
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f0e:	f7ff fdaf 	bl	8008a70 <HAL_GetTick>
 8008f12:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f14:	4b4e      	ldr	r3, [pc, #312]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f18:	f013 0f02 	tst.w	r3, #2
 8008f1c:	d134      	bne.n	8008f88 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f1e:	f7ff fda7 	bl	8008a70 <HAL_GetTick>
 8008f22:	1b40      	subs	r0, r0, r5
 8008f24:	2802      	cmp	r0, #2
 8008f26:	d9f5      	bls.n	8008f14 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8008f28:	2003      	movs	r0, #3
 8008f2a:	e131      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f2c:	4a48      	ldr	r2, [pc, #288]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008f2e:	6813      	ldr	r3, [r2, #0]
 8008f30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008f34:	6921      	ldr	r1, [r4, #16]
 8008f36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	e7dd      	b.n	8008efa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8008f3e:	4b45      	ldr	r3, [pc, #276]	; (8009054 <HAL_RCC_OscConfig+0x298>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008f44:	f7ff fd94 	bl	8008a70 <HAL_GetTick>
 8008f48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f4a:	4b41      	ldr	r3, [pc, #260]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f013 0f02 	tst.w	r3, #2
 8008f52:	d0d2      	beq.n	8008efa <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f54:	f7ff fd8c 	bl	8008a70 <HAL_GetTick>
 8008f58:	1b40      	subs	r0, r0, r5
 8008f5a:	2802      	cmp	r0, #2
 8008f5c:	d9f5      	bls.n	8008f4a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8008f5e:	2003      	movs	r0, #3
 8008f60:	e116      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f62:	4b3c      	ldr	r3, [pc, #240]	; (8009054 <HAL_RCC_OscConfig+0x298>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f6a:	f7ff fd81 	bl	8008a70 <HAL_GetTick>
 8008f6e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f70:	4b37      	ldr	r3, [pc, #220]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f74:	f013 0f02 	tst.w	r3, #2
 8008f78:	d006      	beq.n	8008f88 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f7a:	f7ff fd79 	bl	8008a70 <HAL_GetTick>
 8008f7e:	1b40      	subs	r0, r0, r5
 8008f80:	2802      	cmp	r0, #2
 8008f82:	d9f5      	bls.n	8008f70 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8008f84:	2003      	movs	r0, #3
 8008f86:	e103      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	f013 0f04 	tst.w	r3, #4
 8008f8e:	d077      	beq.n	8009080 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f90:	4b2f      	ldr	r3, [pc, #188]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008f98:	d133      	bne.n	8009002 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	4b2c      	ldr	r3, [pc, #176]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008fa6:	641a      	str	r2, [r3, #64]	; 0x40
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008fb2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fb4:	4b28      	ldr	r3, [pc, #160]	; (8009058 <HAL_RCC_OscConfig+0x29c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008fbc:	d023      	beq.n	8009006 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d034      	beq.n	800902e <HAL_RCC_OscConfig+0x272>
 8008fc4:	2b05      	cmp	r3, #5
 8008fc6:	d038      	beq.n	800903a <HAL_RCC_OscConfig+0x27e>
 8008fc8:	4b21      	ldr	r3, [pc, #132]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008fca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fcc:	f022 0201 	bic.w	r2, r2, #1
 8008fd0:	671a      	str	r2, [r3, #112]	; 0x70
 8008fd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fd4:	f022 0204 	bic.w	r2, r2, #4
 8008fd8:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fda:	68a3      	ldr	r3, [r4, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d03d      	beq.n	800905c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe0:	f7ff fd46 	bl	8008a70 <HAL_GetTick>
 8008fe4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fe6:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8008fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fea:	f013 0f02 	tst.w	r3, #2
 8008fee:	d146      	bne.n	800907e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ff0:	f7ff fd3e 	bl	8008a70 <HAL_GetTick>
 8008ff4:	1b80      	subs	r0, r0, r6
 8008ff6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ffa:	4298      	cmp	r0, r3
 8008ffc:	d9f3      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8008ffe:	2003      	movs	r0, #3
 8009000:	e0c6      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8009002:	2500      	movs	r5, #0
 8009004:	e7d6      	b.n	8008fb4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009006:	4a14      	ldr	r2, [pc, #80]	; (8009058 <HAL_RCC_OscConfig+0x29c>)
 8009008:	6813      	ldr	r3, [r2, #0]
 800900a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800900e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009010:	f7ff fd2e 	bl	8008a70 <HAL_GetTick>
 8009014:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009016:	4b10      	ldr	r3, [pc, #64]	; (8009058 <HAL_RCC_OscConfig+0x29c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800901e:	d1ce      	bne.n	8008fbe <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009020:	f7ff fd26 	bl	8008a70 <HAL_GetTick>
 8009024:	1b80      	subs	r0, r0, r6
 8009026:	2802      	cmp	r0, #2
 8009028:	d9f5      	bls.n	8009016 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800902a:	2003      	movs	r0, #3
 800902c:	e0b0      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800902e:	4a08      	ldr	r2, [pc, #32]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 8009030:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009032:	f043 0301 	orr.w	r3, r3, #1
 8009036:	6713      	str	r3, [r2, #112]	; 0x70
 8009038:	e7cf      	b.n	8008fda <HAL_RCC_OscConfig+0x21e>
 800903a:	4b05      	ldr	r3, [pc, #20]	; (8009050 <HAL_RCC_OscConfig+0x294>)
 800903c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800903e:	f042 0204 	orr.w	r2, r2, #4
 8009042:	671a      	str	r2, [r3, #112]	; 0x70
 8009044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	671a      	str	r2, [r3, #112]	; 0x70
 800904c:	e7c5      	b.n	8008fda <HAL_RCC_OscConfig+0x21e>
 800904e:	bf00      	nop
 8009050:	40023800 	.word	0x40023800
 8009054:	42470000 	.word	0x42470000
 8009058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800905c:	f7ff fd08 	bl	8008a70 <HAL_GetTick>
 8009060:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009062:	4b52      	ldr	r3, [pc, #328]	; (80091ac <HAL_RCC_OscConfig+0x3f0>)
 8009064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009066:	f013 0f02 	tst.w	r3, #2
 800906a:	d008      	beq.n	800907e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800906c:	f7ff fd00 	bl	8008a70 <HAL_GetTick>
 8009070:	1b80      	subs	r0, r0, r6
 8009072:	f241 3388 	movw	r3, #5000	; 0x1388
 8009076:	4298      	cmp	r0, r3
 8009078:	d9f3      	bls.n	8009062 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800907a:	2003      	movs	r0, #3
 800907c:	e088      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800907e:	b9ed      	cbnz	r5, 80090bc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009080:	69a3      	ldr	r3, [r4, #24]
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 8083 	beq.w	800918e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009088:	4a48      	ldr	r2, [pc, #288]	; (80091ac <HAL_RCC_OscConfig+0x3f0>)
 800908a:	6892      	ldr	r2, [r2, #8]
 800908c:	f002 020c 	and.w	r2, r2, #12
 8009090:	2a08      	cmp	r2, #8
 8009092:	d051      	beq.n	8009138 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009094:	2b02      	cmp	r3, #2
 8009096:	d017      	beq.n	80090c8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009098:	4b45      	ldr	r3, [pc, #276]	; (80091b0 <HAL_RCC_OscConfig+0x3f4>)
 800909a:	2200      	movs	r2, #0
 800909c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800909e:	f7ff fce7 	bl	8008a70 <HAL_GetTick>
 80090a2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090a4:	4b41      	ldr	r3, [pc, #260]	; (80091ac <HAL_RCC_OscConfig+0x3f0>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80090ac:	d042      	beq.n	8009134 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090ae:	f7ff fcdf 	bl	8008a70 <HAL_GetTick>
 80090b2:	1b00      	subs	r0, r0, r4
 80090b4:	2802      	cmp	r0, #2
 80090b6:	d9f5      	bls.n	80090a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80090b8:	2003      	movs	r0, #3
 80090ba:	e069      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80090bc:	4a3b      	ldr	r2, [pc, #236]	; (80091ac <HAL_RCC_OscConfig+0x3f0>)
 80090be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80090c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090c4:	6413      	str	r3, [r2, #64]	; 0x40
 80090c6:	e7db      	b.n	8009080 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80090c8:	4b39      	ldr	r3, [pc, #228]	; (80091b0 <HAL_RCC_OscConfig+0x3f4>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80090ce:	f7ff fccf 	bl	8008a70 <HAL_GetTick>
 80090d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090d4:	4b35      	ldr	r3, [pc, #212]	; (80091ac <HAL_RCC_OscConfig+0x3f0>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80090dc:	d006      	beq.n	80090ec <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090de:	f7ff fcc7 	bl	8008a70 <HAL_GetTick>
 80090e2:	1b40      	subs	r0, r0, r5
 80090e4:	2802      	cmp	r0, #2
 80090e6:	d9f5      	bls.n	80090d4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80090e8:	2003      	movs	r0, #3
 80090ea:	e051      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80090ec:	69e3      	ldr	r3, [r4, #28]
 80090ee:	6a22      	ldr	r2, [r4, #32]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80090f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80090f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80090fa:	0852      	lsrs	r2, r2, #1
 80090fc:	3a01      	subs	r2, #1
 80090fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009102:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009104:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009108:	4a28      	ldr	r2, [pc, #160]	; (80091ac <HAL_RCC_OscConfig+0x3f0>)
 800910a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800910c:	4b28      	ldr	r3, [pc, #160]	; (80091b0 <HAL_RCC_OscConfig+0x3f4>)
 800910e:	2201      	movs	r2, #1
 8009110:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009112:	f7ff fcad 	bl	8008a70 <HAL_GetTick>
 8009116:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009118:	4b24      	ldr	r3, [pc, #144]	; (80091ac <HAL_RCC_OscConfig+0x3f0>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009120:	d106      	bne.n	8009130 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009122:	f7ff fca5 	bl	8008a70 <HAL_GetTick>
 8009126:	1b00      	subs	r0, r0, r4
 8009128:	2802      	cmp	r0, #2
 800912a:	d9f5      	bls.n	8009118 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800912c:	2003      	movs	r0, #3
 800912e:	e02f      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8009130:	2000      	movs	r0, #0
 8009132:	e02d      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
 8009134:	2000      	movs	r0, #0
 8009136:	e02b      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009138:	2b01      	cmp	r3, #1
 800913a:	d02b      	beq.n	8009194 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <HAL_RCC_OscConfig+0x3f0>)
 800913e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009140:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8009144:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009146:	4291      	cmp	r1, r2
 8009148:	d126      	bne.n	8009198 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800914a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800914e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009150:	428a      	cmp	r2, r1
 8009152:	d123      	bne.n	800919c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009154:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009156:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800915a:	401a      	ands	r2, r3
 800915c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8009160:	d11e      	bne.n	80091a0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009162:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8009166:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009168:	0852      	lsrs	r2, r2, #1
 800916a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800916c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8009170:	d118      	bne.n	80091a4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009172:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8009176:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009178:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800917c:	d114      	bne.n	80091a8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800917e:	2000      	movs	r0, #0
 8009180:	e006      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8009182:	2001      	movs	r0, #1
}
 8009184:	4770      	bx	lr
        return HAL_ERROR;
 8009186:	2001      	movs	r0, #1
 8009188:	e002      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800918a:	2001      	movs	r0, #1
 800918c:	e000      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800918e:	2000      	movs	r0, #0
}
 8009190:	b002      	add	sp, #8
 8009192:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8009194:	2001      	movs	r0, #1
 8009196:	e7fb      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8009198:	2001      	movs	r0, #1
 800919a:	e7f9      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
 800919c:	2001      	movs	r0, #1
 800919e:	e7f7      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
 80091a0:	2001      	movs	r0, #1
 80091a2:	e7f5      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
 80091a4:	2001      	movs	r0, #1
 80091a6:	e7f3      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
 80091a8:	2001      	movs	r0, #1
 80091aa:	e7f1      	b.n	8009190 <HAL_RCC_OscConfig+0x3d4>
 80091ac:	40023800 	.word	0x40023800
 80091b0:	42470000 	.word	0x42470000

080091b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091b4:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091b6:	4b25      	ldr	r3, [pc, #148]	; (800924c <HAL_RCC_GetSysClockFreq+0x98>)
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f003 030c 	and.w	r3, r3, #12
 80091be:	2b04      	cmp	r3, #4
 80091c0:	d03f      	beq.n	8009242 <HAL_RCC_GetSysClockFreq+0x8e>
 80091c2:	2b08      	cmp	r3, #8
 80091c4:	d13f      	bne.n	8009246 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091c6:	4b21      	ldr	r3, [pc, #132]	; (800924c <HAL_RCC_GetSysClockFreq+0x98>)
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80091d4:	d012      	beq.n	80091fc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091d6:	4b1d      	ldr	r3, [pc, #116]	; (800924c <HAL_RCC_GetSysClockFreq+0x98>)
 80091d8:	6859      	ldr	r1, [r3, #4]
 80091da:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80091de:	481c      	ldr	r0, [pc, #112]	; (8009250 <HAL_RCC_GetSysClockFreq+0x9c>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	fba1 0100 	umull	r0, r1, r1, r0
 80091e6:	f7ff f84b 	bl	8008280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80091ea:	4b18      	ldr	r3, [pc, #96]	; (800924c <HAL_RCC_GetSysClockFreq+0x98>)
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80091f2:	3301      	adds	r3, #1
 80091f4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80091f6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80091fa:	e025      	b.n	8009248 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091fc:	4b13      	ldr	r3, [pc, #76]	; (800924c <HAL_RCC_GetSysClockFreq+0x98>)
 80091fe:	6859      	ldr	r1, [r3, #4]
 8009200:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8009204:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8009208:	ebb1 000c 	subs.w	r0, r1, ip
 800920c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8009210:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009214:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009218:	0181      	lsls	r1, r0, #6
 800921a:	1a09      	subs	r1, r1, r0
 800921c:	eb63 030e 	sbc.w	r3, r3, lr
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009226:	00c9      	lsls	r1, r1, #3
 8009228:	eb11 0c0c 	adds.w	ip, r1, ip
 800922c:	f143 0300 	adc.w	r3, r3, #0
 8009230:	0299      	lsls	r1, r3, #10
 8009232:	2300      	movs	r3, #0
 8009234:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8009238:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800923c:	f7ff f820 	bl	8008280 <__aeabi_uldivmod>
 8009240:	e7d3      	b.n	80091ea <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8009242:	4803      	ldr	r0, [pc, #12]	; (8009250 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009244:	e000      	b.n	8009248 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009246:	4803      	ldr	r0, [pc, #12]	; (8009254 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009248:	bd08      	pop	{r3, pc}
 800924a:	bf00      	nop
 800924c:	40023800 	.word	0x40023800
 8009250:	017d7840 	.word	0x017d7840
 8009254:	00f42400 	.word	0x00f42400

08009258 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009258:	2800      	cmp	r0, #0
 800925a:	f000 809b 	beq.w	8009394 <HAL_RCC_ClockConfig+0x13c>
{
 800925e:	b570      	push	{r4, r5, r6, lr}
 8009260:	460d      	mov	r5, r1
 8009262:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009264:	4b4f      	ldr	r3, [pc, #316]	; (80093a4 <HAL_RCC_ClockConfig+0x14c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	428b      	cmp	r3, r1
 800926e:	d208      	bcs.n	8009282 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009270:	b2cb      	uxtb	r3, r1
 8009272:	4a4c      	ldr	r2, [pc, #304]	; (80093a4 <HAL_RCC_ClockConfig+0x14c>)
 8009274:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009276:	6813      	ldr	r3, [r2, #0]
 8009278:	f003 0307 	and.w	r3, r3, #7
 800927c:	428b      	cmp	r3, r1
 800927e:	f040 808b 	bne.w	8009398 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	f013 0f02 	tst.w	r3, #2
 8009288:	d017      	beq.n	80092ba <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800928a:	f013 0f04 	tst.w	r3, #4
 800928e:	d004      	beq.n	800929a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009290:	4a45      	ldr	r2, [pc, #276]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 8009292:	6893      	ldr	r3, [r2, #8]
 8009294:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009298:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	f013 0f08 	tst.w	r3, #8
 80092a0:	d004      	beq.n	80092ac <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80092a2:	4a41      	ldr	r2, [pc, #260]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 80092a4:	6893      	ldr	r3, [r2, #8]
 80092a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80092aa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092ac:	4a3e      	ldr	r2, [pc, #248]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 80092ae:	6893      	ldr	r3, [r2, #8]
 80092b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092b4:	68a1      	ldr	r1, [r4, #8]
 80092b6:	430b      	orrs	r3, r1
 80092b8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	f013 0f01 	tst.w	r3, #1
 80092c0:	d032      	beq.n	8009328 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092c2:	6863      	ldr	r3, [r4, #4]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d021      	beq.n	800930c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092c8:	1e9a      	subs	r2, r3, #2
 80092ca:	2a01      	cmp	r2, #1
 80092cc:	d925      	bls.n	800931a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ce:	4a36      	ldr	r2, [pc, #216]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 80092d0:	6812      	ldr	r2, [r2, #0]
 80092d2:	f012 0f02 	tst.w	r2, #2
 80092d6:	d061      	beq.n	800939c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092d8:	4933      	ldr	r1, [pc, #204]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 80092da:	688a      	ldr	r2, [r1, #8]
 80092dc:	f022 0203 	bic.w	r2, r2, #3
 80092e0:	4313      	orrs	r3, r2
 80092e2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80092e4:	f7ff fbc4 	bl	8008a70 <HAL_GetTick>
 80092e8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ea:	4b2f      	ldr	r3, [pc, #188]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f003 030c 	and.w	r3, r3, #12
 80092f2:	6862      	ldr	r2, [r4, #4]
 80092f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80092f8:	d016      	beq.n	8009328 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092fa:	f7ff fbb9 	bl	8008a70 <HAL_GetTick>
 80092fe:	1b80      	subs	r0, r0, r6
 8009300:	f241 3388 	movw	r3, #5000	; 0x1388
 8009304:	4298      	cmp	r0, r3
 8009306:	d9f0      	bls.n	80092ea <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8009308:	2003      	movs	r0, #3
 800930a:	e042      	b.n	8009392 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800930c:	4a26      	ldr	r2, [pc, #152]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 800930e:	6812      	ldr	r2, [r2, #0]
 8009310:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8009314:	d1e0      	bne.n	80092d8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009316:	2001      	movs	r0, #1
 8009318:	e03b      	b.n	8009392 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800931a:	4a23      	ldr	r2, [pc, #140]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 800931c:	6812      	ldr	r2, [r2, #0]
 800931e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8009322:	d1d9      	bne.n	80092d8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009324:	2001      	movs	r0, #1
 8009326:	e034      	b.n	8009392 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009328:	4b1e      	ldr	r3, [pc, #120]	; (80093a4 <HAL_RCC_ClockConfig+0x14c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0307 	and.w	r3, r3, #7
 8009330:	42ab      	cmp	r3, r5
 8009332:	d907      	bls.n	8009344 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009334:	b2ea      	uxtb	r2, r5
 8009336:	4b1b      	ldr	r3, [pc, #108]	; (80093a4 <HAL_RCC_ClockConfig+0x14c>)
 8009338:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	42ab      	cmp	r3, r5
 8009342:	d12d      	bne.n	80093a0 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	f013 0f04 	tst.w	r3, #4
 800934a:	d006      	beq.n	800935a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800934c:	4a16      	ldr	r2, [pc, #88]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 800934e:	6893      	ldr	r3, [r2, #8]
 8009350:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009354:	68e1      	ldr	r1, [r4, #12]
 8009356:	430b      	orrs	r3, r1
 8009358:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	f013 0f08 	tst.w	r3, #8
 8009360:	d007      	beq.n	8009372 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009362:	4a11      	ldr	r2, [pc, #68]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 8009364:	6893      	ldr	r3, [r2, #8]
 8009366:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800936a:	6921      	ldr	r1, [r4, #16]
 800936c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009370:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009372:	f7ff ff1f 	bl	80091b4 <HAL_RCC_GetSysClockFreq>
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <HAL_RCC_ClockConfig+0x150>)
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800937e:	4a0b      	ldr	r2, [pc, #44]	; (80093ac <HAL_RCC_ClockConfig+0x154>)
 8009380:	5cd3      	ldrb	r3, [r2, r3]
 8009382:	40d8      	lsrs	r0, r3
 8009384:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <HAL_RCC_ClockConfig+0x158>)
 8009386:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <HAL_RCC_ClockConfig+0x15c>)
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	f7ff fb24 	bl	80089d8 <HAL_InitTick>
  return HAL_OK;
 8009390:	2000      	movs	r0, #0
}
 8009392:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009394:	2001      	movs	r0, #1
}
 8009396:	4770      	bx	lr
      return HAL_ERROR;
 8009398:	2001      	movs	r0, #1
 800939a:	e7fa      	b.n	8009392 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800939c:	2001      	movs	r0, #1
 800939e:	e7f8      	b.n	8009392 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80093a0:	2001      	movs	r0, #1
 80093a2:	e7f6      	b.n	8009392 <HAL_RCC_ClockConfig+0x13a>
 80093a4:	40023c00 	.word	0x40023c00
 80093a8:	40023800 	.word	0x40023800
 80093ac:	0800a06c 	.word	0x0800a06c
 80093b0:	20000000 	.word	0x20000000
 80093b4:	20000008 	.word	0x20000008

080093b8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80093b8:	4b01      	ldr	r3, [pc, #4]	; (80093c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	20000000 	.word	0x20000000

080093c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093c4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093c6:	f7ff fff7 	bl	80093b8 <HAL_RCC_GetHCLKFreq>
 80093ca:	4b04      	ldr	r3, [pc, #16]	; (80093dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80093d2:	4a03      	ldr	r2, [pc, #12]	; (80093e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80093d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80093d6:	40d8      	lsrs	r0, r3
 80093d8:	bd08      	pop	{r3, pc}
 80093da:	bf00      	nop
 80093dc:	40023800 	.word	0x40023800
 80093e0:	0800a07c 	.word	0x0800a07c

080093e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093e6:	f7ff ffe7 	bl	80093b8 <HAL_RCC_GetHCLKFreq>
 80093ea:	4b04      	ldr	r3, [pc, #16]	; (80093fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80093f2:	4a03      	ldr	r2, [pc, #12]	; (8009400 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80093f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80093f6:	40d8      	lsrs	r0, r3
 80093f8:	bd08      	pop	{r3, pc}
 80093fa:	bf00      	nop
 80093fc:	40023800 	.word	0x40023800
 8009400:	0800a07c 	.word	0x0800a07c

08009404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009408:	6802      	ldr	r2, [r0, #0]
 800940a:	6913      	ldr	r3, [r2, #16]
 800940c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009410:	68c1      	ldr	r1, [r0, #12]
 8009412:	430b      	orrs	r3, r1
 8009414:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009416:	6883      	ldr	r3, [r0, #8]
 8009418:	6902      	ldr	r2, [r0, #16]
 800941a:	4313      	orrs	r3, r2
 800941c:	6942      	ldr	r2, [r0, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	69c2      	ldr	r2, [r0, #28]
 8009422:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8009424:	6801      	ldr	r1, [r0, #0]
 8009426:	68cb      	ldr	r3, [r1, #12]
 8009428:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800942c:	f023 030c 	bic.w	r3, r3, #12
 8009430:	4313      	orrs	r3, r2
 8009432:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009434:	6802      	ldr	r2, [r0, #0]
 8009436:	6953      	ldr	r3, [r2, #20]
 8009438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800943c:	6981      	ldr	r1, [r0, #24]
 800943e:	430b      	orrs	r3, r1
 8009440:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009442:	6803      	ldr	r3, [r0, #0]
 8009444:	4a31      	ldr	r2, [pc, #196]	; (800950c <UART_SetConfig+0x108>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d006      	beq.n	8009458 <UART_SetConfig+0x54>
 800944a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800944e:	4293      	cmp	r3, r2
 8009450:	d002      	beq.n	8009458 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009452:	f7ff ffb7 	bl	80093c4 <HAL_RCC_GetPCLK1Freq>
 8009456:	e001      	b.n	800945c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009458:	f7ff ffc4 	bl	80093e4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800945c:	69e3      	ldr	r3, [r4, #28]
 800945e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009462:	d029      	beq.n	80094b8 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009464:	2100      	movs	r1, #0
 8009466:	1803      	adds	r3, r0, r0
 8009468:	4149      	adcs	r1, r1
 800946a:	181b      	adds	r3, r3, r0
 800946c:	f141 0100 	adc.w	r1, r1, #0
 8009470:	00c9      	lsls	r1, r1, #3
 8009472:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	1818      	adds	r0, r3, r0
 800947a:	6863      	ldr	r3, [r4, #4]
 800947c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009480:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8009484:	f141 0100 	adc.w	r1, r1, #0
 8009488:	f7fe fefa 	bl	8008280 <__aeabi_uldivmod>
 800948c:	4d20      	ldr	r5, [pc, #128]	; (8009510 <UART_SetConfig+0x10c>)
 800948e:	fba5 3200 	umull	r3, r2, r5, r0
 8009492:	0951      	lsrs	r1, r2, #5
 8009494:	2364      	movs	r3, #100	; 0x64
 8009496:	fb03 0311 	mls	r3, r3, r1, r0
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	3332      	adds	r3, #50	; 0x32
 800949e:	fba5 2303 	umull	r2, r3, r5, r3
 80094a2:	095b      	lsrs	r3, r3, #5
 80094a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80094a8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80094ac:	f003 030f 	and.w	r3, r3, #15
 80094b0:	6821      	ldr	r1, [r4, #0]
 80094b2:	4413      	add	r3, r2
 80094b4:	608b      	str	r3, [r1, #8]
  }
}
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094b8:	2300      	movs	r3, #0
 80094ba:	1802      	adds	r2, r0, r0
 80094bc:	eb43 0103 	adc.w	r1, r3, r3
 80094c0:	1812      	adds	r2, r2, r0
 80094c2:	f141 0100 	adc.w	r1, r1, #0
 80094c6:	00c9      	lsls	r1, r1, #3
 80094c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094cc:	00d2      	lsls	r2, r2, #3
 80094ce:	1810      	adds	r0, r2, r0
 80094d0:	f141 0100 	adc.w	r1, r1, #0
 80094d4:	6862      	ldr	r2, [r4, #4]
 80094d6:	1892      	adds	r2, r2, r2
 80094d8:	415b      	adcs	r3, r3
 80094da:	f7fe fed1 	bl	8008280 <__aeabi_uldivmod>
 80094de:	4d0c      	ldr	r5, [pc, #48]	; (8009510 <UART_SetConfig+0x10c>)
 80094e0:	fba5 3200 	umull	r3, r2, r5, r0
 80094e4:	0951      	lsrs	r1, r2, #5
 80094e6:	2364      	movs	r3, #100	; 0x64
 80094e8:	fb03 0311 	mls	r3, r3, r1, r0
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	3332      	adds	r3, #50	; 0x32
 80094f0:	fba5 2303 	umull	r2, r3, r5, r3
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	005a      	lsls	r2, r3, #1
 80094f8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80094fc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	6821      	ldr	r1, [r4, #0]
 8009506:	4413      	add	r3, r2
 8009508:	608b      	str	r3, [r1, #8]
 800950a:	e7d4      	b.n	80094b6 <UART_SetConfig+0xb2>
 800950c:	40011000 	.word	0x40011000
 8009510:	51eb851f 	.word	0x51eb851f

08009514 <UART_WaitOnFlagUntilTimeout>:
{
 8009514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009518:	4605      	mov	r5, r0
 800951a:	460f      	mov	r7, r1
 800951c:	4616      	mov	r6, r2
 800951e:	4699      	mov	r9, r3
 8009520:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009524:	682c      	ldr	r4, [r5, #0]
 8009526:	6824      	ldr	r4, [r4, #0]
 8009528:	ea37 0304 	bics.w	r3, r7, r4
 800952c:	bf0c      	ite	eq
 800952e:	f04f 0c01 	moveq.w	ip, #1
 8009532:	f04f 0c00 	movne.w	ip, #0
 8009536:	45b4      	cmp	ip, r6
 8009538:	d12d      	bne.n	8009596 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 800953a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800953e:	d0f1      	beq.n	8009524 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009540:	f1b8 0f00 	cmp.w	r8, #0
 8009544:	d005      	beq.n	8009552 <UART_WaitOnFlagUntilTimeout+0x3e>
 8009546:	f7ff fa93 	bl	8008a70 <HAL_GetTick>
 800954a:	eba0 0009 	sub.w	r0, r0, r9
 800954e:	4540      	cmp	r0, r8
 8009550:	d9e8      	bls.n	8009524 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009552:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	f102 030c 	add.w	r3, r2, #12
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	320c      	adds	r2, #12
 8009562:	e842 3100 	strex	r1, r3, [r2]
 8009566:	2900      	cmp	r1, #0
 8009568:	d1f3      	bne.n	8009552 <UART_WaitOnFlagUntilTimeout+0x3e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	f102 0314 	add.w	r3, r2, #20
 8009570:	e853 3f00 	ldrex	r3, [r3]
 8009574:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	3214      	adds	r2, #20
 800957a:	e842 3100 	strex	r1, r3, [r2]
 800957e:	2900      	cmp	r1, #0
 8009580:	d1f3      	bne.n	800956a <UART_WaitOnFlagUntilTimeout+0x56>
        huart->gState  = HAL_UART_STATE_READY;
 8009582:	2320      	movs	r3, #32
 8009584:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009588:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800958c:	2300      	movs	r3, #0
 800958e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8009592:	2003      	movs	r0, #3
 8009594:	e000      	b.n	8009598 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 8009596:	2000      	movs	r0, #0
}
 8009598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800959c <HAL_UART_Init>:
  if (huart == NULL)
 800959c:	b358      	cbz	r0, 80095f6 <HAL_UART_Init+0x5a>
{
 800959e:	b510      	push	{r4, lr}
 80095a0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80095a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80095a6:	b30b      	cbz	r3, 80095ec <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80095a8:	2324      	movs	r3, #36	; 0x24
 80095aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80095ae:	6822      	ldr	r2, [r4, #0]
 80095b0:	68d3      	ldr	r3, [r2, #12]
 80095b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80095b8:	4620      	mov	r0, r4
 80095ba:	f7ff ff23 	bl	8009404 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095be:	6822      	ldr	r2, [r4, #0]
 80095c0:	6913      	ldr	r3, [r2, #16]
 80095c2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80095c6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	6953      	ldr	r3, [r2, #20]
 80095cc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80095d0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80095d2:	6822      	ldr	r2, [r4, #0]
 80095d4:	68d3      	ldr	r3, [r2, #12]
 80095d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80095da:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095dc:	2000      	movs	r0, #0
 80095de:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80095e0:	2320      	movs	r3, #32
 80095e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80095e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80095ea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80095ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80095f0:	f7ff f920 	bl	8008834 <HAL_UART_MspInit>
 80095f4:	e7d8      	b.n	80095a8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80095f6:	2001      	movs	r0, #1
}
 80095f8:	4770      	bx	lr

080095fa <HAL_UART_Transmit>:
{
 80095fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8009602:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b20      	cmp	r3, #32
 800960a:	d154      	bne.n	80096b6 <HAL_UART_Transmit+0xbc>
 800960c:	4604      	mov	r4, r0
 800960e:	460d      	mov	r5, r1
 8009610:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8009612:	2900      	cmp	r1, #0
 8009614:	d053      	beq.n	80096be <HAL_UART_Transmit+0xc4>
 8009616:	2a00      	cmp	r2, #0
 8009618:	d053      	beq.n	80096c2 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800961a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800961e:	2b01      	cmp	r3, #1
 8009620:	d051      	beq.n	80096c6 <HAL_UART_Transmit+0xcc>
 8009622:	2301      	movs	r3, #1
 8009624:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009628:	2300      	movs	r3, #0
 800962a:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800962c:	2321      	movs	r3, #33	; 0x21
 800962e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8009632:	f7ff fa1d 	bl	8008a70 <HAL_GetTick>
 8009636:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8009638:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800963c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009640:	68a3      	ldr	r3, [r4, #8]
 8009642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009646:	d005      	beq.n	8009654 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8009648:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 800964c:	2300      	movs	r3, #0
 800964e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8009652:	e012      	b.n	800967a <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	b113      	cbz	r3, 800965e <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8009658:	f04f 0800 	mov.w	r8, #0
 800965c:	e7f6      	b.n	800964c <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 800965e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8009660:	2500      	movs	r5, #0
 8009662:	e7f3      	b.n	800964c <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009664:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009668:	6822      	ldr	r2, [r4, #0]
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8009670:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8009672:	b292      	uxth	r2, r2
 8009674:	3a01      	subs	r2, #1
 8009676:	b292      	uxth	r2, r2
 8009678:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800967a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800967c:	b29b      	uxth	r3, r3
 800967e:	b173      	cbz	r3, 800969e <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009680:	9600      	str	r6, [sp, #0]
 8009682:	463b      	mov	r3, r7
 8009684:	2200      	movs	r2, #0
 8009686:	2180      	movs	r1, #128	; 0x80
 8009688:	4620      	mov	r0, r4
 800968a:	f7ff ff43 	bl	8009514 <UART_WaitOnFlagUntilTimeout>
 800968e:	b9e0      	cbnz	r0, 80096ca <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8009690:	2d00      	cmp	r5, #0
 8009692:	d0e7      	beq.n	8009664 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009694:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800969c:	e7e8      	b.n	8009670 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800969e:	9600      	str	r6, [sp, #0]
 80096a0:	463b      	mov	r3, r7
 80096a2:	2200      	movs	r2, #0
 80096a4:	2140      	movs	r1, #64	; 0x40
 80096a6:	4620      	mov	r0, r4
 80096a8:	f7ff ff34 	bl	8009514 <UART_WaitOnFlagUntilTimeout>
 80096ac:	b978      	cbnz	r0, 80096ce <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80096ae:	2320      	movs	r3, #32
 80096b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80096b4:	e000      	b.n	80096b8 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80096b6:	2002      	movs	r0, #2
}
 80096b8:	b002      	add	sp, #8
 80096ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80096be:	2001      	movs	r0, #1
 80096c0:	e7fa      	b.n	80096b8 <HAL_UART_Transmit+0xbe>
 80096c2:	2001      	movs	r0, #1
 80096c4:	e7f8      	b.n	80096b8 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80096c6:	2002      	movs	r0, #2
 80096c8:	e7f6      	b.n	80096b8 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80096ca:	2003      	movs	r0, #3
 80096cc:	e7f4      	b.n	80096b8 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80096ce:	2003      	movs	r0, #3
 80096d0:	e7f2      	b.n	80096b8 <HAL_UART_Transmit+0xbe>
	...

080096d4 <__errno>:
 80096d4:	4b01      	ldr	r3, [pc, #4]	; (80096dc <__errno+0x8>)
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	2000000c 	.word	0x2000000c

080096e0 <__libc_init_array>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	4d0d      	ldr	r5, [pc, #52]	; (8009718 <__libc_init_array+0x38>)
 80096e4:	4c0d      	ldr	r4, [pc, #52]	; (800971c <__libc_init_array+0x3c>)
 80096e6:	1b64      	subs	r4, r4, r5
 80096e8:	10a4      	asrs	r4, r4, #2
 80096ea:	2600      	movs	r6, #0
 80096ec:	42a6      	cmp	r6, r4
 80096ee:	d109      	bne.n	8009704 <__libc_init_array+0x24>
 80096f0:	4d0b      	ldr	r5, [pc, #44]	; (8009720 <__libc_init_array+0x40>)
 80096f2:	4c0c      	ldr	r4, [pc, #48]	; (8009724 <__libc_init_array+0x44>)
 80096f4:	f000 fc8e 	bl	800a014 <_init>
 80096f8:	1b64      	subs	r4, r4, r5
 80096fa:	10a4      	asrs	r4, r4, #2
 80096fc:	2600      	movs	r6, #0
 80096fe:	42a6      	cmp	r6, r4
 8009700:	d105      	bne.n	800970e <__libc_init_array+0x2e>
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	f855 3b04 	ldr.w	r3, [r5], #4
 8009708:	4798      	blx	r3
 800970a:	3601      	adds	r6, #1
 800970c:	e7ee      	b.n	80096ec <__libc_init_array+0xc>
 800970e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009712:	4798      	blx	r3
 8009714:	3601      	adds	r6, #1
 8009716:	e7f2      	b.n	80096fe <__libc_init_array+0x1e>
 8009718:	0800a0c0 	.word	0x0800a0c0
 800971c:	0800a0c0 	.word	0x0800a0c0
 8009720:	0800a0c0 	.word	0x0800a0c0
 8009724:	0800a0c4 	.word	0x0800a0c4

08009728 <memset>:
 8009728:	4402      	add	r2, r0
 800972a:	4603      	mov	r3, r0
 800972c:	4293      	cmp	r3, r2
 800972e:	d100      	bne.n	8009732 <memset+0xa>
 8009730:	4770      	bx	lr
 8009732:	f803 1b01 	strb.w	r1, [r3], #1
 8009736:	e7f9      	b.n	800972c <memset+0x4>

08009738 <_vsiprintf_r>:
 8009738:	b500      	push	{lr}
 800973a:	b09b      	sub	sp, #108	; 0x6c
 800973c:	9100      	str	r1, [sp, #0]
 800973e:	9104      	str	r1, [sp, #16]
 8009740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009744:	9105      	str	r1, [sp, #20]
 8009746:	9102      	str	r1, [sp, #8]
 8009748:	4905      	ldr	r1, [pc, #20]	; (8009760 <_vsiprintf_r+0x28>)
 800974a:	9103      	str	r1, [sp, #12]
 800974c:	4669      	mov	r1, sp
 800974e:	f000 f86f 	bl	8009830 <_svfiprintf_r>
 8009752:	9b00      	ldr	r3, [sp, #0]
 8009754:	2200      	movs	r2, #0
 8009756:	701a      	strb	r2, [r3, #0]
 8009758:	b01b      	add	sp, #108	; 0x6c
 800975a:	f85d fb04 	ldr.w	pc, [sp], #4
 800975e:	bf00      	nop
 8009760:	ffff0208 	.word	0xffff0208

08009764 <vsiprintf>:
 8009764:	4613      	mov	r3, r2
 8009766:	460a      	mov	r2, r1
 8009768:	4601      	mov	r1, r0
 800976a:	4802      	ldr	r0, [pc, #8]	; (8009774 <vsiprintf+0x10>)
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f7ff bfe3 	b.w	8009738 <_vsiprintf_r>
 8009772:	bf00      	nop
 8009774:	2000000c 	.word	0x2000000c

08009778 <__ssputs_r>:
 8009778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800977c:	688e      	ldr	r6, [r1, #8]
 800977e:	429e      	cmp	r6, r3
 8009780:	4682      	mov	sl, r0
 8009782:	460c      	mov	r4, r1
 8009784:	4690      	mov	r8, r2
 8009786:	461f      	mov	r7, r3
 8009788:	d838      	bhi.n	80097fc <__ssputs_r+0x84>
 800978a:	898a      	ldrh	r2, [r1, #12]
 800978c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009790:	d032      	beq.n	80097f8 <__ssputs_r+0x80>
 8009792:	6825      	ldr	r5, [r4, #0]
 8009794:	6909      	ldr	r1, [r1, #16]
 8009796:	eba5 0901 	sub.w	r9, r5, r1
 800979a:	6965      	ldr	r5, [r4, #20]
 800979c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097a4:	3301      	adds	r3, #1
 80097a6:	444b      	add	r3, r9
 80097a8:	106d      	asrs	r5, r5, #1
 80097aa:	429d      	cmp	r5, r3
 80097ac:	bf38      	it	cc
 80097ae:	461d      	movcc	r5, r3
 80097b0:	0553      	lsls	r3, r2, #21
 80097b2:	d531      	bpl.n	8009818 <__ssputs_r+0xa0>
 80097b4:	4629      	mov	r1, r5
 80097b6:	f000 fb63 	bl	8009e80 <_malloc_r>
 80097ba:	4606      	mov	r6, r0
 80097bc:	b950      	cbnz	r0, 80097d4 <__ssputs_r+0x5c>
 80097be:	230c      	movs	r3, #12
 80097c0:	f8ca 3000 	str.w	r3, [sl]
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d4:	6921      	ldr	r1, [r4, #16]
 80097d6:	464a      	mov	r2, r9
 80097d8:	f000 fabe 	bl	8009d58 <memcpy>
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e6:	81a3      	strh	r3, [r4, #12]
 80097e8:	6126      	str	r6, [r4, #16]
 80097ea:	6165      	str	r5, [r4, #20]
 80097ec:	444e      	add	r6, r9
 80097ee:	eba5 0509 	sub.w	r5, r5, r9
 80097f2:	6026      	str	r6, [r4, #0]
 80097f4:	60a5      	str	r5, [r4, #8]
 80097f6:	463e      	mov	r6, r7
 80097f8:	42be      	cmp	r6, r7
 80097fa:	d900      	bls.n	80097fe <__ssputs_r+0x86>
 80097fc:	463e      	mov	r6, r7
 80097fe:	6820      	ldr	r0, [r4, #0]
 8009800:	4632      	mov	r2, r6
 8009802:	4641      	mov	r1, r8
 8009804:	f000 fab6 	bl	8009d74 <memmove>
 8009808:	68a3      	ldr	r3, [r4, #8]
 800980a:	1b9b      	subs	r3, r3, r6
 800980c:	60a3      	str	r3, [r4, #8]
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	4433      	add	r3, r6
 8009812:	6023      	str	r3, [r4, #0]
 8009814:	2000      	movs	r0, #0
 8009816:	e7db      	b.n	80097d0 <__ssputs_r+0x58>
 8009818:	462a      	mov	r2, r5
 800981a:	f000 fba5 	bl	8009f68 <_realloc_r>
 800981e:	4606      	mov	r6, r0
 8009820:	2800      	cmp	r0, #0
 8009822:	d1e1      	bne.n	80097e8 <__ssputs_r+0x70>
 8009824:	6921      	ldr	r1, [r4, #16]
 8009826:	4650      	mov	r0, sl
 8009828:	f000 fabe 	bl	8009da8 <_free_r>
 800982c:	e7c7      	b.n	80097be <__ssputs_r+0x46>
	...

08009830 <_svfiprintf_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	4698      	mov	r8, r3
 8009836:	898b      	ldrh	r3, [r1, #12]
 8009838:	061b      	lsls	r3, r3, #24
 800983a:	b09d      	sub	sp, #116	; 0x74
 800983c:	4607      	mov	r7, r0
 800983e:	460d      	mov	r5, r1
 8009840:	4614      	mov	r4, r2
 8009842:	d50e      	bpl.n	8009862 <_svfiprintf_r+0x32>
 8009844:	690b      	ldr	r3, [r1, #16]
 8009846:	b963      	cbnz	r3, 8009862 <_svfiprintf_r+0x32>
 8009848:	2140      	movs	r1, #64	; 0x40
 800984a:	f000 fb19 	bl	8009e80 <_malloc_r>
 800984e:	6028      	str	r0, [r5, #0]
 8009850:	6128      	str	r0, [r5, #16]
 8009852:	b920      	cbnz	r0, 800985e <_svfiprintf_r+0x2e>
 8009854:	230c      	movs	r3, #12
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	f04f 30ff 	mov.w	r0, #4294967295
 800985c:	e0d1      	b.n	8009a02 <_svfiprintf_r+0x1d2>
 800985e:	2340      	movs	r3, #64	; 0x40
 8009860:	616b      	str	r3, [r5, #20]
 8009862:	2300      	movs	r3, #0
 8009864:	9309      	str	r3, [sp, #36]	; 0x24
 8009866:	2320      	movs	r3, #32
 8009868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800986c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009870:	2330      	movs	r3, #48	; 0x30
 8009872:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a1c <_svfiprintf_r+0x1ec>
 8009876:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800987a:	f04f 0901 	mov.w	r9, #1
 800987e:	4623      	mov	r3, r4
 8009880:	469a      	mov	sl, r3
 8009882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009886:	b10a      	cbz	r2, 800988c <_svfiprintf_r+0x5c>
 8009888:	2a25      	cmp	r2, #37	; 0x25
 800988a:	d1f9      	bne.n	8009880 <_svfiprintf_r+0x50>
 800988c:	ebba 0b04 	subs.w	fp, sl, r4
 8009890:	d00b      	beq.n	80098aa <_svfiprintf_r+0x7a>
 8009892:	465b      	mov	r3, fp
 8009894:	4622      	mov	r2, r4
 8009896:	4629      	mov	r1, r5
 8009898:	4638      	mov	r0, r7
 800989a:	f7ff ff6d 	bl	8009778 <__ssputs_r>
 800989e:	3001      	adds	r0, #1
 80098a0:	f000 80aa 	beq.w	80099f8 <_svfiprintf_r+0x1c8>
 80098a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098a6:	445a      	add	r2, fp
 80098a8:	9209      	str	r2, [sp, #36]	; 0x24
 80098aa:	f89a 3000 	ldrb.w	r3, [sl]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 80a2 	beq.w	80099f8 <_svfiprintf_r+0x1c8>
 80098b4:	2300      	movs	r3, #0
 80098b6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098be:	f10a 0a01 	add.w	sl, sl, #1
 80098c2:	9304      	str	r3, [sp, #16]
 80098c4:	9307      	str	r3, [sp, #28]
 80098c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098ca:	931a      	str	r3, [sp, #104]	; 0x68
 80098cc:	4654      	mov	r4, sl
 80098ce:	2205      	movs	r2, #5
 80098d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d4:	4851      	ldr	r0, [pc, #324]	; (8009a1c <_svfiprintf_r+0x1ec>)
 80098d6:	f7fe fc83 	bl	80081e0 <memchr>
 80098da:	9a04      	ldr	r2, [sp, #16]
 80098dc:	b9d8      	cbnz	r0, 8009916 <_svfiprintf_r+0xe6>
 80098de:	06d0      	lsls	r0, r2, #27
 80098e0:	bf44      	itt	mi
 80098e2:	2320      	movmi	r3, #32
 80098e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098e8:	0711      	lsls	r1, r2, #28
 80098ea:	bf44      	itt	mi
 80098ec:	232b      	movmi	r3, #43	; 0x2b
 80098ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f2:	f89a 3000 	ldrb.w	r3, [sl]
 80098f6:	2b2a      	cmp	r3, #42	; 0x2a
 80098f8:	d015      	beq.n	8009926 <_svfiprintf_r+0xf6>
 80098fa:	9a07      	ldr	r2, [sp, #28]
 80098fc:	4654      	mov	r4, sl
 80098fe:	2000      	movs	r0, #0
 8009900:	f04f 0c0a 	mov.w	ip, #10
 8009904:	4621      	mov	r1, r4
 8009906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800990a:	3b30      	subs	r3, #48	; 0x30
 800990c:	2b09      	cmp	r3, #9
 800990e:	d94e      	bls.n	80099ae <_svfiprintf_r+0x17e>
 8009910:	b1b0      	cbz	r0, 8009940 <_svfiprintf_r+0x110>
 8009912:	9207      	str	r2, [sp, #28]
 8009914:	e014      	b.n	8009940 <_svfiprintf_r+0x110>
 8009916:	eba0 0308 	sub.w	r3, r0, r8
 800991a:	fa09 f303 	lsl.w	r3, r9, r3
 800991e:	4313      	orrs	r3, r2
 8009920:	9304      	str	r3, [sp, #16]
 8009922:	46a2      	mov	sl, r4
 8009924:	e7d2      	b.n	80098cc <_svfiprintf_r+0x9c>
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	1d19      	adds	r1, r3, #4
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	9103      	str	r1, [sp, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	bfbb      	ittet	lt
 8009932:	425b      	neglt	r3, r3
 8009934:	f042 0202 	orrlt.w	r2, r2, #2
 8009938:	9307      	strge	r3, [sp, #28]
 800993a:	9307      	strlt	r3, [sp, #28]
 800993c:	bfb8      	it	lt
 800993e:	9204      	strlt	r2, [sp, #16]
 8009940:	7823      	ldrb	r3, [r4, #0]
 8009942:	2b2e      	cmp	r3, #46	; 0x2e
 8009944:	d10c      	bne.n	8009960 <_svfiprintf_r+0x130>
 8009946:	7863      	ldrb	r3, [r4, #1]
 8009948:	2b2a      	cmp	r3, #42	; 0x2a
 800994a:	d135      	bne.n	80099b8 <_svfiprintf_r+0x188>
 800994c:	9b03      	ldr	r3, [sp, #12]
 800994e:	1d1a      	adds	r2, r3, #4
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	9203      	str	r2, [sp, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfb8      	it	lt
 8009958:	f04f 33ff 	movlt.w	r3, #4294967295
 800995c:	3402      	adds	r4, #2
 800995e:	9305      	str	r3, [sp, #20]
 8009960:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a2c <_svfiprintf_r+0x1fc>
 8009964:	7821      	ldrb	r1, [r4, #0]
 8009966:	2203      	movs	r2, #3
 8009968:	4650      	mov	r0, sl
 800996a:	f7fe fc39 	bl	80081e0 <memchr>
 800996e:	b140      	cbz	r0, 8009982 <_svfiprintf_r+0x152>
 8009970:	2340      	movs	r3, #64	; 0x40
 8009972:	eba0 000a 	sub.w	r0, r0, sl
 8009976:	fa03 f000 	lsl.w	r0, r3, r0
 800997a:	9b04      	ldr	r3, [sp, #16]
 800997c:	4303      	orrs	r3, r0
 800997e:	3401      	adds	r4, #1
 8009980:	9304      	str	r3, [sp, #16]
 8009982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009986:	4826      	ldr	r0, [pc, #152]	; (8009a20 <_svfiprintf_r+0x1f0>)
 8009988:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800998c:	2206      	movs	r2, #6
 800998e:	f7fe fc27 	bl	80081e0 <memchr>
 8009992:	2800      	cmp	r0, #0
 8009994:	d038      	beq.n	8009a08 <_svfiprintf_r+0x1d8>
 8009996:	4b23      	ldr	r3, [pc, #140]	; (8009a24 <_svfiprintf_r+0x1f4>)
 8009998:	bb1b      	cbnz	r3, 80099e2 <_svfiprintf_r+0x1b2>
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	3307      	adds	r3, #7
 800999e:	f023 0307 	bic.w	r3, r3, #7
 80099a2:	3308      	adds	r3, #8
 80099a4:	9303      	str	r3, [sp, #12]
 80099a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a8:	4433      	add	r3, r6
 80099aa:	9309      	str	r3, [sp, #36]	; 0x24
 80099ac:	e767      	b.n	800987e <_svfiprintf_r+0x4e>
 80099ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80099b2:	460c      	mov	r4, r1
 80099b4:	2001      	movs	r0, #1
 80099b6:	e7a5      	b.n	8009904 <_svfiprintf_r+0xd4>
 80099b8:	2300      	movs	r3, #0
 80099ba:	3401      	adds	r4, #1
 80099bc:	9305      	str	r3, [sp, #20]
 80099be:	4619      	mov	r1, r3
 80099c0:	f04f 0c0a 	mov.w	ip, #10
 80099c4:	4620      	mov	r0, r4
 80099c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ca:	3a30      	subs	r2, #48	; 0x30
 80099cc:	2a09      	cmp	r2, #9
 80099ce:	d903      	bls.n	80099d8 <_svfiprintf_r+0x1a8>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0c5      	beq.n	8009960 <_svfiprintf_r+0x130>
 80099d4:	9105      	str	r1, [sp, #20]
 80099d6:	e7c3      	b.n	8009960 <_svfiprintf_r+0x130>
 80099d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099dc:	4604      	mov	r4, r0
 80099de:	2301      	movs	r3, #1
 80099e0:	e7f0      	b.n	80099c4 <_svfiprintf_r+0x194>
 80099e2:	ab03      	add	r3, sp, #12
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	462a      	mov	r2, r5
 80099e8:	4b0f      	ldr	r3, [pc, #60]	; (8009a28 <_svfiprintf_r+0x1f8>)
 80099ea:	a904      	add	r1, sp, #16
 80099ec:	4638      	mov	r0, r7
 80099ee:	f3af 8000 	nop.w
 80099f2:	1c42      	adds	r2, r0, #1
 80099f4:	4606      	mov	r6, r0
 80099f6:	d1d6      	bne.n	80099a6 <_svfiprintf_r+0x176>
 80099f8:	89ab      	ldrh	r3, [r5, #12]
 80099fa:	065b      	lsls	r3, r3, #25
 80099fc:	f53f af2c 	bmi.w	8009858 <_svfiprintf_r+0x28>
 8009a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a02:	b01d      	add	sp, #116	; 0x74
 8009a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a08:	ab03      	add	r3, sp, #12
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	462a      	mov	r2, r5
 8009a0e:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <_svfiprintf_r+0x1f8>)
 8009a10:	a904      	add	r1, sp, #16
 8009a12:	4638      	mov	r0, r7
 8009a14:	f000 f87a 	bl	8009b0c <_printf_i>
 8009a18:	e7eb      	b.n	80099f2 <_svfiprintf_r+0x1c2>
 8009a1a:	bf00      	nop
 8009a1c:	0800a084 	.word	0x0800a084
 8009a20:	0800a08e 	.word	0x0800a08e
 8009a24:	00000000 	.word	0x00000000
 8009a28:	08009779 	.word	0x08009779
 8009a2c:	0800a08a 	.word	0x0800a08a

08009a30 <_printf_common>:
 8009a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a34:	4616      	mov	r6, r2
 8009a36:	4699      	mov	r9, r3
 8009a38:	688a      	ldr	r2, [r1, #8]
 8009a3a:	690b      	ldr	r3, [r1, #16]
 8009a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a40:	4293      	cmp	r3, r2
 8009a42:	bfb8      	it	lt
 8009a44:	4613      	movlt	r3, r2
 8009a46:	6033      	str	r3, [r6, #0]
 8009a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	b10a      	cbz	r2, 8009a56 <_printf_common+0x26>
 8009a52:	3301      	adds	r3, #1
 8009a54:	6033      	str	r3, [r6, #0]
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	0699      	lsls	r1, r3, #26
 8009a5a:	bf42      	ittt	mi
 8009a5c:	6833      	ldrmi	r3, [r6, #0]
 8009a5e:	3302      	addmi	r3, #2
 8009a60:	6033      	strmi	r3, [r6, #0]
 8009a62:	6825      	ldr	r5, [r4, #0]
 8009a64:	f015 0506 	ands.w	r5, r5, #6
 8009a68:	d106      	bne.n	8009a78 <_printf_common+0x48>
 8009a6a:	f104 0a19 	add.w	sl, r4, #25
 8009a6e:	68e3      	ldr	r3, [r4, #12]
 8009a70:	6832      	ldr	r2, [r6, #0]
 8009a72:	1a9b      	subs	r3, r3, r2
 8009a74:	42ab      	cmp	r3, r5
 8009a76:	dc26      	bgt.n	8009ac6 <_printf_common+0x96>
 8009a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a7c:	1e13      	subs	r3, r2, #0
 8009a7e:	6822      	ldr	r2, [r4, #0]
 8009a80:	bf18      	it	ne
 8009a82:	2301      	movne	r3, #1
 8009a84:	0692      	lsls	r2, r2, #26
 8009a86:	d42b      	bmi.n	8009ae0 <_printf_common+0xb0>
 8009a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a8c:	4649      	mov	r1, r9
 8009a8e:	4638      	mov	r0, r7
 8009a90:	47c0      	blx	r8
 8009a92:	3001      	adds	r0, #1
 8009a94:	d01e      	beq.n	8009ad4 <_printf_common+0xa4>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	68e5      	ldr	r5, [r4, #12]
 8009a9a:	6832      	ldr	r2, [r6, #0]
 8009a9c:	f003 0306 	and.w	r3, r3, #6
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	bf08      	it	eq
 8009aa4:	1aad      	subeq	r5, r5, r2
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	6922      	ldr	r2, [r4, #16]
 8009aaa:	bf0c      	ite	eq
 8009aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab0:	2500      	movne	r5, #0
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	bfc4      	itt	gt
 8009ab6:	1a9b      	subgt	r3, r3, r2
 8009ab8:	18ed      	addgt	r5, r5, r3
 8009aba:	2600      	movs	r6, #0
 8009abc:	341a      	adds	r4, #26
 8009abe:	42b5      	cmp	r5, r6
 8009ac0:	d11a      	bne.n	8009af8 <_printf_common+0xc8>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	e008      	b.n	8009ad8 <_printf_common+0xa8>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	4652      	mov	r2, sl
 8009aca:	4649      	mov	r1, r9
 8009acc:	4638      	mov	r0, r7
 8009ace:	47c0      	blx	r8
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d103      	bne.n	8009adc <_printf_common+0xac>
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009adc:	3501      	adds	r5, #1
 8009ade:	e7c6      	b.n	8009a6e <_printf_common+0x3e>
 8009ae0:	18e1      	adds	r1, r4, r3
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	2030      	movs	r0, #48	; 0x30
 8009ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aea:	4422      	add	r2, r4
 8009aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af4:	3302      	adds	r3, #2
 8009af6:	e7c7      	b.n	8009a88 <_printf_common+0x58>
 8009af8:	2301      	movs	r3, #1
 8009afa:	4622      	mov	r2, r4
 8009afc:	4649      	mov	r1, r9
 8009afe:	4638      	mov	r0, r7
 8009b00:	47c0      	blx	r8
 8009b02:	3001      	adds	r0, #1
 8009b04:	d0e6      	beq.n	8009ad4 <_printf_common+0xa4>
 8009b06:	3601      	adds	r6, #1
 8009b08:	e7d9      	b.n	8009abe <_printf_common+0x8e>
	...

08009b0c <_printf_i>:
 8009b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	7e0f      	ldrb	r7, [r1, #24]
 8009b12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b14:	2f78      	cmp	r7, #120	; 0x78
 8009b16:	4691      	mov	r9, r2
 8009b18:	4680      	mov	r8, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	469a      	mov	sl, r3
 8009b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b22:	d807      	bhi.n	8009b34 <_printf_i+0x28>
 8009b24:	2f62      	cmp	r7, #98	; 0x62
 8009b26:	d80a      	bhi.n	8009b3e <_printf_i+0x32>
 8009b28:	2f00      	cmp	r7, #0
 8009b2a:	f000 80d8 	beq.w	8009cde <_printf_i+0x1d2>
 8009b2e:	2f58      	cmp	r7, #88	; 0x58
 8009b30:	f000 80a3 	beq.w	8009c7a <_printf_i+0x16e>
 8009b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b3c:	e03a      	b.n	8009bb4 <_printf_i+0xa8>
 8009b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b42:	2b15      	cmp	r3, #21
 8009b44:	d8f6      	bhi.n	8009b34 <_printf_i+0x28>
 8009b46:	a101      	add	r1, pc, #4	; (adr r1, 8009b4c <_printf_i+0x40>)
 8009b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b4c:	08009ba5 	.word	0x08009ba5
 8009b50:	08009bb9 	.word	0x08009bb9
 8009b54:	08009b35 	.word	0x08009b35
 8009b58:	08009b35 	.word	0x08009b35
 8009b5c:	08009b35 	.word	0x08009b35
 8009b60:	08009b35 	.word	0x08009b35
 8009b64:	08009bb9 	.word	0x08009bb9
 8009b68:	08009b35 	.word	0x08009b35
 8009b6c:	08009b35 	.word	0x08009b35
 8009b70:	08009b35 	.word	0x08009b35
 8009b74:	08009b35 	.word	0x08009b35
 8009b78:	08009cc5 	.word	0x08009cc5
 8009b7c:	08009be9 	.word	0x08009be9
 8009b80:	08009ca7 	.word	0x08009ca7
 8009b84:	08009b35 	.word	0x08009b35
 8009b88:	08009b35 	.word	0x08009b35
 8009b8c:	08009ce7 	.word	0x08009ce7
 8009b90:	08009b35 	.word	0x08009b35
 8009b94:	08009be9 	.word	0x08009be9
 8009b98:	08009b35 	.word	0x08009b35
 8009b9c:	08009b35 	.word	0x08009b35
 8009ba0:	08009caf 	.word	0x08009caf
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	1d1a      	adds	r2, r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	602a      	str	r2, [r5, #0]
 8009bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e0a3      	b.n	8009d00 <_printf_i+0x1f4>
 8009bb8:	6820      	ldr	r0, [r4, #0]
 8009bba:	6829      	ldr	r1, [r5, #0]
 8009bbc:	0606      	lsls	r6, r0, #24
 8009bbe:	f101 0304 	add.w	r3, r1, #4
 8009bc2:	d50a      	bpl.n	8009bda <_printf_i+0xce>
 8009bc4:	680e      	ldr	r6, [r1, #0]
 8009bc6:	602b      	str	r3, [r5, #0]
 8009bc8:	2e00      	cmp	r6, #0
 8009bca:	da03      	bge.n	8009bd4 <_printf_i+0xc8>
 8009bcc:	232d      	movs	r3, #45	; 0x2d
 8009bce:	4276      	negs	r6, r6
 8009bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd4:	485e      	ldr	r0, [pc, #376]	; (8009d50 <_printf_i+0x244>)
 8009bd6:	230a      	movs	r3, #10
 8009bd8:	e019      	b.n	8009c0e <_printf_i+0x102>
 8009bda:	680e      	ldr	r6, [r1, #0]
 8009bdc:	602b      	str	r3, [r5, #0]
 8009bde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009be2:	bf18      	it	ne
 8009be4:	b236      	sxthne	r6, r6
 8009be6:	e7ef      	b.n	8009bc8 <_printf_i+0xbc>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	6820      	ldr	r0, [r4, #0]
 8009bec:	1d19      	adds	r1, r3, #4
 8009bee:	6029      	str	r1, [r5, #0]
 8009bf0:	0601      	lsls	r1, r0, #24
 8009bf2:	d501      	bpl.n	8009bf8 <_printf_i+0xec>
 8009bf4:	681e      	ldr	r6, [r3, #0]
 8009bf6:	e002      	b.n	8009bfe <_printf_i+0xf2>
 8009bf8:	0646      	lsls	r6, r0, #25
 8009bfa:	d5fb      	bpl.n	8009bf4 <_printf_i+0xe8>
 8009bfc:	881e      	ldrh	r6, [r3, #0]
 8009bfe:	4854      	ldr	r0, [pc, #336]	; (8009d50 <_printf_i+0x244>)
 8009c00:	2f6f      	cmp	r7, #111	; 0x6f
 8009c02:	bf0c      	ite	eq
 8009c04:	2308      	moveq	r3, #8
 8009c06:	230a      	movne	r3, #10
 8009c08:	2100      	movs	r1, #0
 8009c0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c0e:	6865      	ldr	r5, [r4, #4]
 8009c10:	60a5      	str	r5, [r4, #8]
 8009c12:	2d00      	cmp	r5, #0
 8009c14:	bfa2      	ittt	ge
 8009c16:	6821      	ldrge	r1, [r4, #0]
 8009c18:	f021 0104 	bicge.w	r1, r1, #4
 8009c1c:	6021      	strge	r1, [r4, #0]
 8009c1e:	b90e      	cbnz	r6, 8009c24 <_printf_i+0x118>
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	d04d      	beq.n	8009cc0 <_printf_i+0x1b4>
 8009c24:	4615      	mov	r5, r2
 8009c26:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c2a:	fb03 6711 	mls	r7, r3, r1, r6
 8009c2e:	5dc7      	ldrb	r7, [r0, r7]
 8009c30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c34:	4637      	mov	r7, r6
 8009c36:	42bb      	cmp	r3, r7
 8009c38:	460e      	mov	r6, r1
 8009c3a:	d9f4      	bls.n	8009c26 <_printf_i+0x11a>
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d10b      	bne.n	8009c58 <_printf_i+0x14c>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	07de      	lsls	r6, r3, #31
 8009c44:	d508      	bpl.n	8009c58 <_printf_i+0x14c>
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	6861      	ldr	r1, [r4, #4]
 8009c4a:	4299      	cmp	r1, r3
 8009c4c:	bfde      	ittt	le
 8009c4e:	2330      	movle	r3, #48	; 0x30
 8009c50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c58:	1b52      	subs	r2, r2, r5
 8009c5a:	6122      	str	r2, [r4, #16]
 8009c5c:	f8cd a000 	str.w	sl, [sp]
 8009c60:	464b      	mov	r3, r9
 8009c62:	aa03      	add	r2, sp, #12
 8009c64:	4621      	mov	r1, r4
 8009c66:	4640      	mov	r0, r8
 8009c68:	f7ff fee2 	bl	8009a30 <_printf_common>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d14c      	bne.n	8009d0a <_printf_i+0x1fe>
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295
 8009c74:	b004      	add	sp, #16
 8009c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7a:	4835      	ldr	r0, [pc, #212]	; (8009d50 <_printf_i+0x244>)
 8009c7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c80:	6829      	ldr	r1, [r5, #0]
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c88:	6029      	str	r1, [r5, #0]
 8009c8a:	061d      	lsls	r5, r3, #24
 8009c8c:	d514      	bpl.n	8009cb8 <_printf_i+0x1ac>
 8009c8e:	07df      	lsls	r7, r3, #31
 8009c90:	bf44      	itt	mi
 8009c92:	f043 0320 	orrmi.w	r3, r3, #32
 8009c96:	6023      	strmi	r3, [r4, #0]
 8009c98:	b91e      	cbnz	r6, 8009ca2 <_printf_i+0x196>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	f023 0320 	bic.w	r3, r3, #32
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	2310      	movs	r3, #16
 8009ca4:	e7b0      	b.n	8009c08 <_printf_i+0xfc>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	f043 0320 	orr.w	r3, r3, #32
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	2378      	movs	r3, #120	; 0x78
 8009cb0:	4828      	ldr	r0, [pc, #160]	; (8009d54 <_printf_i+0x248>)
 8009cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cb6:	e7e3      	b.n	8009c80 <_printf_i+0x174>
 8009cb8:	0659      	lsls	r1, r3, #25
 8009cba:	bf48      	it	mi
 8009cbc:	b2b6      	uxthmi	r6, r6
 8009cbe:	e7e6      	b.n	8009c8e <_printf_i+0x182>
 8009cc0:	4615      	mov	r5, r2
 8009cc2:	e7bb      	b.n	8009c3c <_printf_i+0x130>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	6826      	ldr	r6, [r4, #0]
 8009cc8:	6961      	ldr	r1, [r4, #20]
 8009cca:	1d18      	adds	r0, r3, #4
 8009ccc:	6028      	str	r0, [r5, #0]
 8009cce:	0635      	lsls	r5, r6, #24
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	d501      	bpl.n	8009cd8 <_printf_i+0x1cc>
 8009cd4:	6019      	str	r1, [r3, #0]
 8009cd6:	e002      	b.n	8009cde <_printf_i+0x1d2>
 8009cd8:	0670      	lsls	r0, r6, #25
 8009cda:	d5fb      	bpl.n	8009cd4 <_printf_i+0x1c8>
 8009cdc:	8019      	strh	r1, [r3, #0]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	6123      	str	r3, [r4, #16]
 8009ce2:	4615      	mov	r5, r2
 8009ce4:	e7ba      	b.n	8009c5c <_printf_i+0x150>
 8009ce6:	682b      	ldr	r3, [r5, #0]
 8009ce8:	1d1a      	adds	r2, r3, #4
 8009cea:	602a      	str	r2, [r5, #0]
 8009cec:	681d      	ldr	r5, [r3, #0]
 8009cee:	6862      	ldr	r2, [r4, #4]
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f7fe fa74 	bl	80081e0 <memchr>
 8009cf8:	b108      	cbz	r0, 8009cfe <_printf_i+0x1f2>
 8009cfa:	1b40      	subs	r0, r0, r5
 8009cfc:	6060      	str	r0, [r4, #4]
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	6123      	str	r3, [r4, #16]
 8009d02:	2300      	movs	r3, #0
 8009d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d08:	e7a8      	b.n	8009c5c <_printf_i+0x150>
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	462a      	mov	r2, r5
 8009d0e:	4649      	mov	r1, r9
 8009d10:	4640      	mov	r0, r8
 8009d12:	47d0      	blx	sl
 8009d14:	3001      	adds	r0, #1
 8009d16:	d0ab      	beq.n	8009c70 <_printf_i+0x164>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	079b      	lsls	r3, r3, #30
 8009d1c:	d413      	bmi.n	8009d46 <_printf_i+0x23a>
 8009d1e:	68e0      	ldr	r0, [r4, #12]
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	4298      	cmp	r0, r3
 8009d24:	bfb8      	it	lt
 8009d26:	4618      	movlt	r0, r3
 8009d28:	e7a4      	b.n	8009c74 <_printf_i+0x168>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4632      	mov	r2, r6
 8009d2e:	4649      	mov	r1, r9
 8009d30:	4640      	mov	r0, r8
 8009d32:	47d0      	blx	sl
 8009d34:	3001      	adds	r0, #1
 8009d36:	d09b      	beq.n	8009c70 <_printf_i+0x164>
 8009d38:	3501      	adds	r5, #1
 8009d3a:	68e3      	ldr	r3, [r4, #12]
 8009d3c:	9903      	ldr	r1, [sp, #12]
 8009d3e:	1a5b      	subs	r3, r3, r1
 8009d40:	42ab      	cmp	r3, r5
 8009d42:	dcf2      	bgt.n	8009d2a <_printf_i+0x21e>
 8009d44:	e7eb      	b.n	8009d1e <_printf_i+0x212>
 8009d46:	2500      	movs	r5, #0
 8009d48:	f104 0619 	add.w	r6, r4, #25
 8009d4c:	e7f5      	b.n	8009d3a <_printf_i+0x22e>
 8009d4e:	bf00      	nop
 8009d50:	0800a095 	.word	0x0800a095
 8009d54:	0800a0a6 	.word	0x0800a0a6

08009d58 <memcpy>:
 8009d58:	440a      	add	r2, r1
 8009d5a:	4291      	cmp	r1, r2
 8009d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d60:	d100      	bne.n	8009d64 <memcpy+0xc>
 8009d62:	4770      	bx	lr
 8009d64:	b510      	push	{r4, lr}
 8009d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d6e:	4291      	cmp	r1, r2
 8009d70:	d1f9      	bne.n	8009d66 <memcpy+0xe>
 8009d72:	bd10      	pop	{r4, pc}

08009d74 <memmove>:
 8009d74:	4288      	cmp	r0, r1
 8009d76:	b510      	push	{r4, lr}
 8009d78:	eb01 0402 	add.w	r4, r1, r2
 8009d7c:	d902      	bls.n	8009d84 <memmove+0x10>
 8009d7e:	4284      	cmp	r4, r0
 8009d80:	4623      	mov	r3, r4
 8009d82:	d807      	bhi.n	8009d94 <memmove+0x20>
 8009d84:	1e43      	subs	r3, r0, #1
 8009d86:	42a1      	cmp	r1, r4
 8009d88:	d008      	beq.n	8009d9c <memmove+0x28>
 8009d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d92:	e7f8      	b.n	8009d86 <memmove+0x12>
 8009d94:	4402      	add	r2, r0
 8009d96:	4601      	mov	r1, r0
 8009d98:	428a      	cmp	r2, r1
 8009d9a:	d100      	bne.n	8009d9e <memmove+0x2a>
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009da6:	e7f7      	b.n	8009d98 <memmove+0x24>

08009da8 <_free_r>:
 8009da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009daa:	2900      	cmp	r1, #0
 8009dac:	d044      	beq.n	8009e38 <_free_r+0x90>
 8009dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db2:	9001      	str	r0, [sp, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f1a1 0404 	sub.w	r4, r1, #4
 8009dba:	bfb8      	it	lt
 8009dbc:	18e4      	addlt	r4, r4, r3
 8009dbe:	f000 f913 	bl	8009fe8 <__malloc_lock>
 8009dc2:	4a1e      	ldr	r2, [pc, #120]	; (8009e3c <_free_r+0x94>)
 8009dc4:	9801      	ldr	r0, [sp, #4]
 8009dc6:	6813      	ldr	r3, [r2, #0]
 8009dc8:	b933      	cbnz	r3, 8009dd8 <_free_r+0x30>
 8009dca:	6063      	str	r3, [r4, #4]
 8009dcc:	6014      	str	r4, [r2, #0]
 8009dce:	b003      	add	sp, #12
 8009dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dd4:	f000 b90e 	b.w	8009ff4 <__malloc_unlock>
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	d908      	bls.n	8009dee <_free_r+0x46>
 8009ddc:	6825      	ldr	r5, [r4, #0]
 8009dde:	1961      	adds	r1, r4, r5
 8009de0:	428b      	cmp	r3, r1
 8009de2:	bf01      	itttt	eq
 8009de4:	6819      	ldreq	r1, [r3, #0]
 8009de6:	685b      	ldreq	r3, [r3, #4]
 8009de8:	1949      	addeq	r1, r1, r5
 8009dea:	6021      	streq	r1, [r4, #0]
 8009dec:	e7ed      	b.n	8009dca <_free_r+0x22>
 8009dee:	461a      	mov	r2, r3
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	b10b      	cbz	r3, 8009df8 <_free_r+0x50>
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d9fa      	bls.n	8009dee <_free_r+0x46>
 8009df8:	6811      	ldr	r1, [r2, #0]
 8009dfa:	1855      	adds	r5, r2, r1
 8009dfc:	42a5      	cmp	r5, r4
 8009dfe:	d10b      	bne.n	8009e18 <_free_r+0x70>
 8009e00:	6824      	ldr	r4, [r4, #0]
 8009e02:	4421      	add	r1, r4
 8009e04:	1854      	adds	r4, r2, r1
 8009e06:	42a3      	cmp	r3, r4
 8009e08:	6011      	str	r1, [r2, #0]
 8009e0a:	d1e0      	bne.n	8009dce <_free_r+0x26>
 8009e0c:	681c      	ldr	r4, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	6053      	str	r3, [r2, #4]
 8009e12:	4421      	add	r1, r4
 8009e14:	6011      	str	r1, [r2, #0]
 8009e16:	e7da      	b.n	8009dce <_free_r+0x26>
 8009e18:	d902      	bls.n	8009e20 <_free_r+0x78>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	e7d6      	b.n	8009dce <_free_r+0x26>
 8009e20:	6825      	ldr	r5, [r4, #0]
 8009e22:	1961      	adds	r1, r4, r5
 8009e24:	428b      	cmp	r3, r1
 8009e26:	bf04      	itt	eq
 8009e28:	6819      	ldreq	r1, [r3, #0]
 8009e2a:	685b      	ldreq	r3, [r3, #4]
 8009e2c:	6063      	str	r3, [r4, #4]
 8009e2e:	bf04      	itt	eq
 8009e30:	1949      	addeq	r1, r1, r5
 8009e32:	6021      	streq	r1, [r4, #0]
 8009e34:	6054      	str	r4, [r2, #4]
 8009e36:	e7ca      	b.n	8009dce <_free_r+0x26>
 8009e38:	b003      	add	sp, #12
 8009e3a:	bd30      	pop	{r4, r5, pc}
 8009e3c:	20000124 	.word	0x20000124

08009e40 <sbrk_aligned>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	4e0e      	ldr	r6, [pc, #56]	; (8009e7c <sbrk_aligned+0x3c>)
 8009e44:	460c      	mov	r4, r1
 8009e46:	6831      	ldr	r1, [r6, #0]
 8009e48:	4605      	mov	r5, r0
 8009e4a:	b911      	cbnz	r1, 8009e52 <sbrk_aligned+0x12>
 8009e4c:	f000 f8bc 	bl	8009fc8 <_sbrk_r>
 8009e50:	6030      	str	r0, [r6, #0]
 8009e52:	4621      	mov	r1, r4
 8009e54:	4628      	mov	r0, r5
 8009e56:	f000 f8b7 	bl	8009fc8 <_sbrk_r>
 8009e5a:	1c43      	adds	r3, r0, #1
 8009e5c:	d00a      	beq.n	8009e74 <sbrk_aligned+0x34>
 8009e5e:	1cc4      	adds	r4, r0, #3
 8009e60:	f024 0403 	bic.w	r4, r4, #3
 8009e64:	42a0      	cmp	r0, r4
 8009e66:	d007      	beq.n	8009e78 <sbrk_aligned+0x38>
 8009e68:	1a21      	subs	r1, r4, r0
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f000 f8ac 	bl	8009fc8 <_sbrk_r>
 8009e70:	3001      	adds	r0, #1
 8009e72:	d101      	bne.n	8009e78 <sbrk_aligned+0x38>
 8009e74:	f04f 34ff 	mov.w	r4, #4294967295
 8009e78:	4620      	mov	r0, r4
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	20000128 	.word	0x20000128

08009e80 <_malloc_r>:
 8009e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e84:	1ccd      	adds	r5, r1, #3
 8009e86:	f025 0503 	bic.w	r5, r5, #3
 8009e8a:	3508      	adds	r5, #8
 8009e8c:	2d0c      	cmp	r5, #12
 8009e8e:	bf38      	it	cc
 8009e90:	250c      	movcc	r5, #12
 8009e92:	2d00      	cmp	r5, #0
 8009e94:	4607      	mov	r7, r0
 8009e96:	db01      	blt.n	8009e9c <_malloc_r+0x1c>
 8009e98:	42a9      	cmp	r1, r5
 8009e9a:	d905      	bls.n	8009ea8 <_malloc_r+0x28>
 8009e9c:	230c      	movs	r3, #12
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	2600      	movs	r6, #0
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea8:	4e2e      	ldr	r6, [pc, #184]	; (8009f64 <_malloc_r+0xe4>)
 8009eaa:	f000 f89d 	bl	8009fe8 <__malloc_lock>
 8009eae:	6833      	ldr	r3, [r6, #0]
 8009eb0:	461c      	mov	r4, r3
 8009eb2:	bb34      	cbnz	r4, 8009f02 <_malloc_r+0x82>
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	f7ff ffc2 	bl	8009e40 <sbrk_aligned>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	d14d      	bne.n	8009f5e <_malloc_r+0xde>
 8009ec2:	6834      	ldr	r4, [r6, #0]
 8009ec4:	4626      	mov	r6, r4
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	d140      	bne.n	8009f4c <_malloc_r+0xcc>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4638      	mov	r0, r7
 8009ed0:	eb04 0803 	add.w	r8, r4, r3
 8009ed4:	f000 f878 	bl	8009fc8 <_sbrk_r>
 8009ed8:	4580      	cmp	r8, r0
 8009eda:	d13a      	bne.n	8009f52 <_malloc_r+0xd2>
 8009edc:	6821      	ldr	r1, [r4, #0]
 8009ede:	3503      	adds	r5, #3
 8009ee0:	1a6d      	subs	r5, r5, r1
 8009ee2:	f025 0503 	bic.w	r5, r5, #3
 8009ee6:	3508      	adds	r5, #8
 8009ee8:	2d0c      	cmp	r5, #12
 8009eea:	bf38      	it	cc
 8009eec:	250c      	movcc	r5, #12
 8009eee:	4629      	mov	r1, r5
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f7ff ffa5 	bl	8009e40 <sbrk_aligned>
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d02b      	beq.n	8009f52 <_malloc_r+0xd2>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	442b      	add	r3, r5
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	e00e      	b.n	8009f20 <_malloc_r+0xa0>
 8009f02:	6822      	ldr	r2, [r4, #0]
 8009f04:	1b52      	subs	r2, r2, r5
 8009f06:	d41e      	bmi.n	8009f46 <_malloc_r+0xc6>
 8009f08:	2a0b      	cmp	r2, #11
 8009f0a:	d916      	bls.n	8009f3a <_malloc_r+0xba>
 8009f0c:	1961      	adds	r1, r4, r5
 8009f0e:	42a3      	cmp	r3, r4
 8009f10:	6025      	str	r5, [r4, #0]
 8009f12:	bf18      	it	ne
 8009f14:	6059      	strne	r1, [r3, #4]
 8009f16:	6863      	ldr	r3, [r4, #4]
 8009f18:	bf08      	it	eq
 8009f1a:	6031      	streq	r1, [r6, #0]
 8009f1c:	5162      	str	r2, [r4, r5]
 8009f1e:	604b      	str	r3, [r1, #4]
 8009f20:	4638      	mov	r0, r7
 8009f22:	f104 060b 	add.w	r6, r4, #11
 8009f26:	f000 f865 	bl	8009ff4 <__malloc_unlock>
 8009f2a:	f026 0607 	bic.w	r6, r6, #7
 8009f2e:	1d23      	adds	r3, r4, #4
 8009f30:	1af2      	subs	r2, r6, r3
 8009f32:	d0b6      	beq.n	8009ea2 <_malloc_r+0x22>
 8009f34:	1b9b      	subs	r3, r3, r6
 8009f36:	50a3      	str	r3, [r4, r2]
 8009f38:	e7b3      	b.n	8009ea2 <_malloc_r+0x22>
 8009f3a:	6862      	ldr	r2, [r4, #4]
 8009f3c:	42a3      	cmp	r3, r4
 8009f3e:	bf0c      	ite	eq
 8009f40:	6032      	streq	r2, [r6, #0]
 8009f42:	605a      	strne	r2, [r3, #4]
 8009f44:	e7ec      	b.n	8009f20 <_malloc_r+0xa0>
 8009f46:	4623      	mov	r3, r4
 8009f48:	6864      	ldr	r4, [r4, #4]
 8009f4a:	e7b2      	b.n	8009eb2 <_malloc_r+0x32>
 8009f4c:	4634      	mov	r4, r6
 8009f4e:	6876      	ldr	r6, [r6, #4]
 8009f50:	e7b9      	b.n	8009ec6 <_malloc_r+0x46>
 8009f52:	230c      	movs	r3, #12
 8009f54:	603b      	str	r3, [r7, #0]
 8009f56:	4638      	mov	r0, r7
 8009f58:	f000 f84c 	bl	8009ff4 <__malloc_unlock>
 8009f5c:	e7a1      	b.n	8009ea2 <_malloc_r+0x22>
 8009f5e:	6025      	str	r5, [r4, #0]
 8009f60:	e7de      	b.n	8009f20 <_malloc_r+0xa0>
 8009f62:	bf00      	nop
 8009f64:	20000124 	.word	0x20000124

08009f68 <_realloc_r>:
 8009f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6c:	4680      	mov	r8, r0
 8009f6e:	4614      	mov	r4, r2
 8009f70:	460e      	mov	r6, r1
 8009f72:	b921      	cbnz	r1, 8009f7e <_realloc_r+0x16>
 8009f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f78:	4611      	mov	r1, r2
 8009f7a:	f7ff bf81 	b.w	8009e80 <_malloc_r>
 8009f7e:	b92a      	cbnz	r2, 8009f8c <_realloc_r+0x24>
 8009f80:	f7ff ff12 	bl	8009da8 <_free_r>
 8009f84:	4625      	mov	r5, r4
 8009f86:	4628      	mov	r0, r5
 8009f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f8c:	f000 f838 	bl	800a000 <_malloc_usable_size_r>
 8009f90:	4284      	cmp	r4, r0
 8009f92:	4607      	mov	r7, r0
 8009f94:	d802      	bhi.n	8009f9c <_realloc_r+0x34>
 8009f96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f9a:	d812      	bhi.n	8009fc2 <_realloc_r+0x5a>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	f7ff ff6e 	bl	8009e80 <_malloc_r>
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d0ed      	beq.n	8009f86 <_realloc_r+0x1e>
 8009faa:	42bc      	cmp	r4, r7
 8009fac:	4622      	mov	r2, r4
 8009fae:	4631      	mov	r1, r6
 8009fb0:	bf28      	it	cs
 8009fb2:	463a      	movcs	r2, r7
 8009fb4:	f7ff fed0 	bl	8009d58 <memcpy>
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4640      	mov	r0, r8
 8009fbc:	f7ff fef4 	bl	8009da8 <_free_r>
 8009fc0:	e7e1      	b.n	8009f86 <_realloc_r+0x1e>
 8009fc2:	4635      	mov	r5, r6
 8009fc4:	e7df      	b.n	8009f86 <_realloc_r+0x1e>
	...

08009fc8 <_sbrk_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d06      	ldr	r5, [pc, #24]	; (8009fe4 <_sbrk_r+0x1c>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	602b      	str	r3, [r5, #0]
 8009fd4:	f7fe fca4 	bl	8008920 <_sbrk>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_sbrk_r+0x1a>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_sbrk_r+0x1a>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	2000012c 	.word	0x2000012c

08009fe8 <__malloc_lock>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__malloc_lock+0x8>)
 8009fea:	f000 b811 	b.w	800a010 <__retarget_lock_acquire_recursive>
 8009fee:	bf00      	nop
 8009ff0:	20000130 	.word	0x20000130

08009ff4 <__malloc_unlock>:
 8009ff4:	4801      	ldr	r0, [pc, #4]	; (8009ffc <__malloc_unlock+0x8>)
 8009ff6:	f000 b80c 	b.w	800a012 <__retarget_lock_release_recursive>
 8009ffa:	bf00      	nop
 8009ffc:	20000130 	.word	0x20000130

0800a000 <_malloc_usable_size_r>:
 800a000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a004:	1f18      	subs	r0, r3, #4
 800a006:	2b00      	cmp	r3, #0
 800a008:	bfbc      	itt	lt
 800a00a:	580b      	ldrlt	r3, [r1, r0]
 800a00c:	18c0      	addlt	r0, r0, r3
 800a00e:	4770      	bx	lr

0800a010 <__retarget_lock_acquire_recursive>:
 800a010:	4770      	bx	lr

0800a012 <__retarget_lock_release_recursive>:
 800a012:	4770      	bx	lr

0800a014 <_init>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	bf00      	nop
 800a018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01a:	bc08      	pop	{r3}
 800a01c:	469e      	mov	lr, r3
 800a01e:	4770      	bx	lr

0800a020 <_fini>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr
