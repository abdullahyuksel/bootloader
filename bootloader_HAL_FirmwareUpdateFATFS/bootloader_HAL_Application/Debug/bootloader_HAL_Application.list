
bootloader_HAL_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08004648  08004648  00014648  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c18  08004c18  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c20  08004c20  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          0001aa90  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001ab18  2001ab18  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d52  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000358e  00000000  00000000  00035e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001048b  00000000  00000000  00039398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bc0  00000000  00000000  00049828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001300  00000000  00000000  0004a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000236a4  00000000  00000000  0004b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018ed2  00000000  00000000  0006ed8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6d86  00000000  00000000  00087c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0014e9e4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000255c  00000000  00000000  0014ea34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004630 	.word	0x08004630

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004630 	.word	0x08004630

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <bootloader_uart_data_read>:
uint8_t execute_flash_erase(uint8_t sectorNumber, uint8_t numberOfSector);

void bootloader_uart_data_read (void)
{

}
 8000584:	4770      	bx	lr
	...

08000588 <bootloader_jump_to_user_app>:
void bootloader_jump_to_user_app (void)
{
 8000588:	b537      	push	{r0, r1, r2, r4, r5, lr}
	//1. Sıfırlama işleyicisinin adresini tutan bir fonksiyon göstericisi
	void (*bootloader_application_reset_handler)(void);
	printMessages("BL DEBUG MSG: Called bootloader_jump_to_user_application() \n");

	//3. MSP değerini taban adresten çekip applicatiom başlangıcına yaz
	uint32_t mspValue = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;
 800058a:	4c0f      	ldr	r4, [pc, #60]	; (80005c8 <bootloader_jump_to_user_app+0x40>)
	printMessages("BL DEBUG MSG: Called bootloader_jump_to_user_application() \n");
 800058c:	480f      	ldr	r0, [pc, #60]	; (80005cc <bootloader_jump_to_user_app+0x44>)
 800058e:	f000 fb91 	bl	8000cb4 <printMessages>
	uint32_t mspValue = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;
 8000592:	6825      	ldr	r5, [r4, #0]
	printMessages("BL DEBUG MSG: MSP Value: %#x \n", mspValue);
 8000594:	480e      	ldr	r0, [pc, #56]	; (80005d0 <bootloader_jump_to_user_app+0x48>)
 8000596:	4629      	mov	r1, r5
 8000598:	f000 fb8c 	bl	8000cb4 <printMessages>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800059c:	f385 8808 	msr	MSP, r5
	__set_MSP(mspValue);

	//2. Reset Handler değerini taban adresten çekip applicatiom başlangıcına yaz
	//reset handler adresi msp değerinin adresinden 4 byte sonrasındadır.
	uint32_t resetValue = *(volatile uint32_t*) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 80005a0:	6864      	ldr	r4, [r4, #4]
	printMessages("BL DEBUG MSG: Reset Value: %#x \n", resetValue);
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <bootloader_jump_to_user_app+0x4c>)
 80005a4:	4621      	mov	r1, r4
 80005a6:	f000 fb85 	bl	8000cb4 <printMessages>

	//5. Reset Handler ile bir işlev başlat
	bootloader_application_reset_handler = (void*) resetValue;

	//6. Reset Handler çağır ve kullanıcı uygulamasına atla
	bootloader_application_reset_handler();
 80005aa:	47a0      	blx	r4

	//7. system clock başlat.
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <bootloader_jump_to_user_app+0x50>)
 80005b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005b8:	645a      	str	r2, [r3, #68]	; 0x44
 80005ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	9b01      	ldr	r3, [sp, #4]
}
 80005c4:	b003      	add	sp, #12
 80005c6:	bd30      	pop	{r4, r5, pc}
 80005c8:	08008000 	.word	0x08008000
 80005cc:	08004648 	.word	0x08004648
 80005d0:	08004685 	.word	0x08004685
 80005d4:	080046a4 	.word	0x080046a4
 80005d8:	40023800 	.word	0x40023800

080005dc <execute_memory_write>:

uint8_t execute_memory_write(uint8_t *Buffer, uint32_t memAddress, uint32_t len)
{
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	4604      	mov	r4, r0
 80005e0:	460e      	mov	r6, r1
 80005e2:	4615      	mov	r5, r2
	uint8_t status = HAL_OK;

	HAL_FLASH_Unlock();
 80005e4:	f000 ff32 	bl	800144c <HAL_FLASH_Unlock>
	FLASH_WaitForLastOperation(FLASH_TIMEOUT);
 80005e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80005ec:	f000 ff4a 	bl	8001484 <FLASH_WaitForLastOperation>
	for(uint32_t i = 0 ; i <len ; i++)
 80005f0:	4425      	add	r5, r4
	uint8_t status = HAL_OK;
 80005f2:	2700      	movs	r7, #0
 80005f4:	1b36      	subs	r6, r6, r4
	for(uint32_t i = 0 ; i <len ; i++)
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	d103      	bne.n	8000602 <execute_memory_write+0x26>
	{
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, memAddress+i, Buffer[i]);
	}

	HAL_FLASH_Lock();
 80005fa:	f000 ff39 	bl	8001470 <HAL_FLASH_Lock>

	return status;
}
 80005fe:	4638      	mov	r0, r7
 8000600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, memAddress+i, Buffer[i]);
 8000602:	2300      	movs	r3, #0
 8000604:	1931      	adds	r1, r6, r4
 8000606:	4618      	mov	r0, r3
 8000608:	f814 2b01 	ldrb.w	r2, [r4], #1
 800060c:	f000 ff62 	bl	80014d4 <HAL_FLASH_Program>
 8000610:	4607      	mov	r7, r0
	for(uint32_t i = 0 ; i <len ; i++)
 8000612:	e7f0      	b.n	80005f6 <execute_memory_write+0x1a>

08000614 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sectorNumber, uint8_t numberOfSector)
{
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	b087      	sub	sp, #28
 8000618:	460d      	mov	r5, r1
 800061a:	4604      	mov	r4, r0
	FLASH_EraseInitTypeDef FlashEraseInitStruct = {0};
 800061c:	2214      	movs	r2, #20
 800061e:	2100      	movs	r1, #0
 8000620:	a801      	add	r0, sp, #4
 8000622:	f003 fb8f 	bl	8003d44 <memset>
	uint32_t SectorError = 0;
 8000626:	2300      	movs	r3, #0
	HAL_StatusTypeDef status = {0};

	if(numberOfSector > 11)
 8000628:	2d0b      	cmp	r5, #11
	uint32_t SectorError = 0;
 800062a:	9300      	str	r3, [sp, #0]
	if(numberOfSector > 11)
 800062c:	d82c      	bhi.n	8000688 <execute_flash_erase+0x74>
		return INVALID_SECTOR;

	if((sectorNumber <= 11) || (sectorNumber == 0xFF))
 800062e:	f1a4 030c 	sub.w	r3, r4, #12
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2bf2      	cmp	r3, #242	; 0xf2
 8000636:	d927      	bls.n	8000688 <execute_flash_erase+0x74>
	{
		if(sectorNumber == 0xFF)
 8000638:	2cff      	cmp	r4, #255	; 0xff
 800063a:	d11c      	bne.n	8000676 <execute_flash_erase+0x62>
		{
			FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_MASSERASE;
 800063c:	2301      	movs	r3, #1
 800063e:	9301      	str	r3, [sp, #4]

		FlashEraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
		FlashEraseInitStruct.Sector = sectorNumber;
		FlashEraseInitStruct.NbSectors = numberOfSector;
		}
		FlashEraseInitStruct.Banks = FLASH_BANK_1;
 8000640:	2401      	movs	r4, #1
 8000642:	9402      	str	r4, [sp, #8]

		HAL_FLASH_Unlock();
 8000644:	f000 ff02 	bl	800144c <HAL_FLASH_Unlock>
		FlashEraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <execute_flash_erase+0x78>)
		FlashEraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800064a:	2202      	movs	r2, #2
 800064c:	9205      	str	r2, [sp, #20]
	    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800064e:	60dc      	str	r4, [r3, #12]
	    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000650:	60da      	str	r2, [r3, #12]
	    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000652:	2210      	movs	r2, #16
 8000654:	60da      	str	r2, [r3, #12]
	    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000656:	2220      	movs	r2, #32
 8000658:	60da      	str	r2, [r3, #12]
	    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800065a:	2240      	movs	r2, #64	; 0x40
 800065c:	60da      	str	r2, [r3, #12]
	    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	60da      	str	r2, [r3, #12]
		status = (uint8_t) HAL_FLASHEx_Erase(&FlashEraseInitStruct, &SectorError);
 8000662:	4669      	mov	r1, sp
 8000664:	a801      	add	r0, sp, #4
 8000666:	f000 ffdf 	bl	8001628 <HAL_FLASHEx_Erase>
 800066a:	4604      	mov	r4, r0
		HAL_FLASH_Lock();
 800066c:	f000 ff00 	bl	8001470 <HAL_FLASH_Lock>

		return status;
	}

	return INVALID_SECTOR;
}
 8000670:	4620      	mov	r0, r4
 8000672:	b007      	add	sp, #28
 8000674:	bd30      	pop	{r4, r5, pc}
			uint8_t remainingSector = 11 - sectorNumber;
 8000676:	f1c4 030b 	rsb	r3, r4, #11
 800067a:	b2db      	uxtb	r3, r3
		FlashEraseInitStruct.Sector = sectorNumber;
 800067c:	429c      	cmp	r4, r3
 800067e:	bf94      	ite	ls
 8000680:	9403      	strls	r4, [sp, #12]
 8000682:	9303      	strhi	r3, [sp, #12]
		FlashEraseInitStruct.NbSectors = numberOfSector;
 8000684:	9504      	str	r5, [sp, #16]
 8000686:	e7db      	b.n	8000640 <execute_flash_erase+0x2c>
		return INVALID_SECTOR;
 8000688:	2404      	movs	r4, #4
 800068a:	e7f1      	b.n	8000670 <execute_flash_erase+0x5c>
 800068c:	40023c00 	.word	0x40023c00

08000690 <SPI_TxBuffer>:
}

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <SPI_TxBuffer+0x18>)
{
 8000692:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	688b      	ldr	r3, [r1, #8]
 8000698:	079b      	lsls	r3, r3, #30
 800069a:	d5fc      	bpl.n	8000696 <SPI_TxBuffer+0x6>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800069c:	4601      	mov	r1, r0
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	4801      	ldr	r0, [pc, #4]	; (80006a8 <SPI_TxBuffer+0x18>)
 80006a2:	f001 bc6d 	b.w	8001f80 <HAL_SPI_Transmit>
 80006a6:	bf00      	nop
 80006a8:	2001a7c0 	.word	0x2001a7c0

080006ac <SPI_TxByte>:
{
 80006ac:	b507      	push	{r0, r1, r2, lr}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <SPI_TxByte+0x24>)
{
 80006b0:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	6893      	ldr	r3, [r2, #8]
 80006b8:	079b      	lsls	r3, r3, #30
 80006ba:	d5fc      	bpl.n	80006b6 <SPI_TxByte+0xa>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	2201      	movs	r2, #1
 80006c0:	f10d 0107 	add.w	r1, sp, #7
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <SPI_TxByte+0x24>)
 80006c6:	f001 fc5b 	bl	8001f80 <HAL_SPI_Transmit>
}
 80006ca:	b003      	add	sp, #12
 80006cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80006d0:	2001a7c0 	.word	0x2001a7c0

080006d4 <SELECT>:
{
 80006d4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <SELECT+0x18>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006de:	f001 f8d3 	bl	8001888 <HAL_GPIO_WritePin>
}
 80006e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 bdc0 	b.w	800126c <HAL_Delay>
 80006ec:	40020400 	.word	0x40020400

080006f0 <DESELECT>:
{
 80006f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <DESELECT+0x18>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fa:	f001 f8c5 	bl	8001888 <HAL_GPIO_WritePin>
}
 80006fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 bdb2 	b.w	800126c <HAL_Delay>
 8000708:	40020400 	.word	0x40020400

0800070c <SPI_RxByte>:
}

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800070c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dummy, data;
	dummy = 0xFF;
 800070e:	23ff      	movs	r3, #255	; 0xff
 8000710:	f88d 300e 	strb.w	r3, [sp, #14]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <SPI_RxByte+0x30>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	6893      	ldr	r3, [r2, #8]
 800071a:	079b      	lsls	r3, r3, #30
 800071c:	d5fc      	bpl.n	8000718 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	f10d 020f 	add.w	r2, sp, #15
 8000726:	2301      	movs	r3, #1
 8000728:	f10d 010e 	add.w	r1, sp, #14
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <SPI_RxByte+0x30>)
 800072e:	f001 fcd5 	bl	80020dc <HAL_SPI_TransmitReceive>

	return data;
}
 8000732:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000736:	b005      	add	sp, #20
 8000738:	f85d fb04 	ldr.w	pc, [sp], #4
 800073c:	2001a7c0 	.word	0x2001a7c0

08000740 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void) 
{
 8000740:	b513      	push	{r0, r1, r4, lr}
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
 8000742:	f7ff ffd5 	bl	80006f0 <DESELECT>
 8000746:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++)
	{
		SPI_TxByte(0xFF);
 8000748:	20ff      	movs	r0, #255	; 0xff
 800074a:	f7ff ffaf 	bl	80006ac <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800074e:	3c01      	subs	r4, #1
 8000750:	d1fa      	bne.n	8000748 <SD_PowerOn+0x8>
	}

	/* slave select */
	SELECT();
 8000752:	f7ff ffbf 	bl	80006d4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000756:	2340      	movs	r3, #64	; 0x40
 8000758:	f88d 3000 	strb.w	r3, [sp]
	args[2] = 0;
	args[3] = 0;
	args[4] = 0;
	args[5] = 0x95;		/* CRC */

	SPI_TxBuffer(args, sizeof(args));
 800075c:	2106      	movs	r1, #6
	args[5] = 0x95;		/* CRC */
 800075e:	2395      	movs	r3, #149	; 0x95
	SPI_TxBuffer(args, sizeof(args));
 8000760:	4668      	mov	r0, sp
	args[1] = 0;
 8000762:	f88d 4001 	strb.w	r4, [sp, #1]
	args[2] = 0;
 8000766:	f88d 4002 	strb.w	r4, [sp, #2]
	args[3] = 0;
 800076a:	f88d 4003 	strb.w	r4, [sp, #3]
	args[4] = 0;
 800076e:	f88d 4004 	strb.w	r4, [sp, #4]
	args[5] = 0x95;		/* CRC */
 8000772:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxBuffer(args, sizeof(args));
 8000776:	f7ff ff8b 	bl	8000690 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800077a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800077e:	f7ff ffc5 	bl	800070c <SPI_RxByte>
 8000782:	2801      	cmp	r0, #1
 8000784:	d001      	beq.n	800078a <SD_PowerOn+0x4a>
 8000786:	3c01      	subs	r4, #1
 8000788:	d1f9      	bne.n	800077e <SD_PowerOn+0x3e>
	{
		cnt--;
	}

	DESELECT();
 800078a:	f7ff ffb1 	bl	80006f0 <DESELECT>
	SPI_TxByte(0XFF);
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	f7ff ff8c 	bl	80006ac <SPI_TxByte>

	PowerFlag = 1;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <SD_PowerOn+0x60>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
}
 800079a:	b002      	add	sp, #8
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf00      	nop
 80007a0:	200000a5 	.word	0x200000a5

080007a4 <SD_ReadyWait>:
{
 80007a4:	b510      	push	{r4, lr}
	Timer2 = 500;
 80007a6:	4c06      	ldr	r4, [pc, #24]	; (80007c0 <SD_ReadyWait+0x1c>)
 80007a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ac:	8023      	strh	r3, [r4, #0]
		res = SPI_RxByte();
 80007ae:	f7ff ffad 	bl	800070c <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 80007b2:	28ff      	cmp	r0, #255	; 0xff
 80007b4:	d002      	beq.n	80007bc <SD_ReadyWait+0x18>
 80007b6:	8823      	ldrh	r3, [r4, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f8      	bne.n	80007ae <SD_ReadyWait+0xa>
}
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	bf00      	nop
 80007c0:	200000a8 	.word	0x200000a8

080007c4 <SD_TxDataBlock>:
}

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	4606      	mov	r6, r0
 80007c8:	460d      	mov	r5, r1
	uint8_t resp;
	uint8_t i = 0;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007ca:	f7ff ffeb 	bl	80007a4 <SD_ReadyWait>
 80007ce:	28ff      	cmp	r0, #255	; 0xff
{
 80007d0:	f04f 0400 	mov.w	r4, #0
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007d4:	d123      	bne.n	800081e <SD_TxDataBlock+0x5a>

	/* transmit token */
	SPI_TxByte(token);
 80007d6:	4628      	mov	r0, r5
 80007d8:	f7ff ff68 	bl	80006ac <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007dc:	2dfd      	cmp	r5, #253	; 0xfd
 80007de:	d018      	beq.n	8000812 <SD_TxDataBlock+0x4e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e4:	4630      	mov	r0, r6
 80007e6:	f7ff ff53 	bl	8000690 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007ea:	f7ff ff8f 	bl	800070c <SPI_RxByte>
		SPI_RxByte();
 80007ee:	f7ff ff8d 	bl	800070c <SPI_RxByte>
 80007f2:	2541      	movs	r5, #65	; 0x41

		/* receive response */
		while (i <= 64)
		{
			resp = SPI_RxByte();
 80007f4:	f7ff ff8a 	bl	800070c <SPI_RxByte>

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007f8:	f000 031f 	and.w	r3, r0, #31
 80007fc:	2b05      	cmp	r3, #5
			resp = SPI_RxByte();
 80007fe:	4604      	mov	r4, r0
			if ((resp & 0x1F) == 0x05) break;
 8000800:	d003      	beq.n	800080a <SD_TxDataBlock+0x46>
		while (i <= 64)
 8000802:	3d01      	subs	r5, #1
 8000804:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8000808:	d1f4      	bne.n	80007f4 <SD_TxDataBlock+0x30>
			i++;
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800080a:	f7ff ff7f 	bl	800070c <SPI_RxByte>
 800080e:	2800      	cmp	r0, #0
 8000810:	d0fb      	beq.n	800080a <SD_TxDataBlock+0x46>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000812:	f004 041f 	and.w	r4, r4, #31
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000816:	1f63      	subs	r3, r4, #5
 8000818:	4258      	negs	r0, r3
 800081a:	4158      	adcs	r0, r3

	return FALSE;
}
 800081c:	bd70      	pop	{r4, r5, r6, pc}
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800081e:	4620      	mov	r0, r4
 8000820:	e7fc      	b.n	800081c <SD_TxDataBlock+0x58>

08000822 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000822:	b538      	push	{r3, r4, r5, lr}
 8000824:	4604      	mov	r4, r0
 8000826:	460d      	mov	r5, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000828:	f7ff ffbc 	bl	80007a4 <SD_ReadyWait>
 800082c:	28ff      	cmp	r0, #255	; 0xff
 800082e:	d128      	bne.n	8000882 <SD_SendCmd+0x60>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000830:	4620      	mov	r0, r4
 8000832:	f7ff ff3b 	bl	80006ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000836:	0e28      	lsrs	r0, r5, #24
 8000838:	f7ff ff38 	bl	80006ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800083c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8000840:	f7ff ff34 	bl	80006ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000844:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8000848:	f7ff ff30 	bl	80006ac <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800084c:	b2e8      	uxtb	r0, r5
 800084e:	f7ff ff2d 	bl	80006ac <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000852:	2c40      	cmp	r4, #64	; 0x40
 8000854:	d013      	beq.n	800087e <SD_SendCmd+0x5c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
	else crc = 1;
 8000856:	2c48      	cmp	r4, #72	; 0x48
 8000858:	bf0c      	ite	eq
 800085a:	2087      	moveq	r0, #135	; 0x87
 800085c:	2001      	movne	r0, #1

	/* transmit CRC */
	SPI_TxByte(crc);
 800085e:	f7ff ff25 	bl	80006ac <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000862:	2c4c      	cmp	r4, #76	; 0x4c
 8000864:	d101      	bne.n	800086a <SD_SendCmd+0x48>
 8000866:	f7ff ff51 	bl	800070c <SPI_RxByte>
	else crc = 1;
 800086a:	240a      	movs	r4, #10

	/* receive response */
	uint8_t n = 10;
	do {
		res = SPI_RxByte();
 800086c:	f7ff ff4e 	bl	800070c <SPI_RxByte>
	} while ((res & 0x80) && --n);
 8000870:	0603      	lsls	r3, r0, #24
 8000872:	d503      	bpl.n	800087c <SD_SendCmd+0x5a>
 8000874:	3c01      	subs	r4, #1
 8000876:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800087a:	d1f7      	bne.n	800086c <SD_SendCmd+0x4a>

	return res;
}
 800087c:	bd38      	pop	{r3, r4, r5, pc}
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800087e:	2095      	movs	r0, #149	; 0x95
 8000880:	e7ed      	b.n	800085e <SD_SendCmd+0x3c>
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000882:	20ff      	movs	r0, #255	; 0xff
 8000884:	e7fa      	b.n	800087c <SD_SendCmd+0x5a>
	...

08000888 <SD_RxDataBlock>:
{
 8000888:	b570      	push	{r4, r5, r6, lr}
	Timer1 = 200;
 800088a:	4d0f      	ldr	r5, [pc, #60]	; (80008c8 <SD_RxDataBlock+0x40>)
 800088c:	23c8      	movs	r3, #200	; 0xc8
{
 800088e:	4604      	mov	r4, r0
 8000890:	460e      	mov	r6, r1
	Timer1 = 200;
 8000892:	802b      	strh	r3, [r5, #0]
		token = SPI_RxByte();
 8000894:	f7ff ff3a 	bl	800070c <SPI_RxByte>
	} while((token == 0xFF) && Timer1);
 8000898:	28ff      	cmp	r0, #255	; 0xff
 800089a:	d103      	bne.n	80008a4 <SD_RxDataBlock+0x1c>
 800089c:	8828      	ldrh	r0, [r5, #0]
 800089e:	2800      	cmp	r0, #0
 80008a0:	d1f8      	bne.n	8000894 <SD_RxDataBlock+0xc>
}
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
	if(token != 0xFE) return FALSE;
 80008a4:	28fe      	cmp	r0, #254	; 0xfe
 80008a6:	d10d      	bne.n	80008c4 <SD_RxDataBlock+0x3c>
 80008a8:	1e65      	subs	r5, r4, #1
 80008aa:	4434      	add	r4, r6
	*buff = SPI_RxByte();
 80008ac:	f7ff ff2e 	bl	800070c <SPI_RxByte>
 80008b0:	f805 0f01 	strb.w	r0, [r5, #1]!
	} while(len--);
 80008b4:	42a5      	cmp	r5, r4
 80008b6:	d1f9      	bne.n	80008ac <SD_RxDataBlock+0x24>
	SPI_RxByte();
 80008b8:	f7ff ff28 	bl	800070c <SPI_RxByte>
	SPI_RxByte();
 80008bc:	f7ff ff26 	bl	800070c <SPI_RxByte>
 80008c0:	2001      	movs	r0, #1
 80008c2:	e7ee      	b.n	80008a2 <SD_RxDataBlock+0x1a>
	if(token != 0xFE) return FALSE;
 80008c4:	2000      	movs	r0, #0
 80008c6:	e7ec      	b.n	80008a2 <SD_RxDataBlock+0x1a>
 80008c8:	200000a6 	.word	0x200000a6

080008cc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008d0:	2800      	cmp	r0, #0
 80008d2:	f040 809a 	bne.w	8000a0a <SD_disk_initialize+0x13e>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008d6:	4e4e      	ldr	r6, [pc, #312]	; (8000a10 <SD_disk_initialize+0x144>)
 80008d8:	7835      	ldrb	r5, [r6, #0]
 80008da:	f015 0502 	ands.w	r5, r5, #2
 80008de:	d004      	beq.n	80008ea <SD_disk_initialize+0x1e>
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 80008e0:	7830      	ldrb	r0, [r6, #0]
 80008e2:	b2c0      	uxtb	r0, r0
}
 80008e4:	b002      	add	sp, #8
 80008e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SD_PowerOn();
 80008ea:	f7ff ff29 	bl	8000740 <SD_PowerOn>
	SELECT();
 80008ee:	f7ff fef1 	bl	80006d4 <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 80008f2:	4629      	mov	r1, r5
 80008f4:	2040      	movs	r0, #64	; 0x40
 80008f6:	f7ff ff94 	bl	8000822 <SD_SendCmd>
 80008fa:	2801      	cmp	r0, #1
 80008fc:	4604      	mov	r4, r0
 80008fe:	d126      	bne.n	800094e <SD_disk_initialize+0x82>
		Timer1 = 1000;
 8000900:	4f44      	ldr	r7, [pc, #272]	; (8000a14 <SD_disk_initialize+0x148>)
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000906:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800090a:	2048      	movs	r0, #72	; 0x48
		Timer1 = 1000;
 800090c:	803b      	strh	r3, [r7, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800090e:	f7ff ff88 	bl	8000822 <SD_SendCmd>
 8000912:	2801      	cmp	r0, #1
 8000914:	d149      	bne.n	80009aa <SD_disk_initialize+0xde>
 8000916:	ad01      	add	r5, sp, #4
 8000918:	46a8      	mov	r8, r5
 800091a:	2404      	movs	r4, #4
				ocr[n] = SPI_RxByte();
 800091c:	f7ff fef6 	bl	800070c <SPI_RxByte>
			for (n = 0; n < 4; n++)
 8000920:	3c01      	subs	r4, #1
 8000922:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
				ocr[n] = SPI_RxByte();
 8000926:	f808 0b01 	strb.w	r0, [r8], #1
			for (n = 0; n < 4; n++)
 800092a:	d1f7      	bne.n	800091c <SD_disk_initialize+0x50>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800092c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d10c      	bne.n	800094e <SD_disk_initialize+0x82>
 8000934:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000938:	2baa      	cmp	r3, #170	; 0xaa
 800093a:	d108      	bne.n	800094e <SD_disk_initialize+0x82>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800093c:	2100      	movs	r1, #0
 800093e:	2077      	movs	r0, #119	; 0x77
 8000940:	f7ff ff6f 	bl	8000822 <SD_SendCmd>
 8000944:	2801      	cmp	r0, #1
 8000946:	d904      	bls.n	8000952 <SD_disk_initialize+0x86>
				} while (Timer1);
 8000948:	883b      	ldrh	r3, [r7, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1f6      	bne.n	800093c <SD_disk_initialize+0x70>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800094e:	2400      	movs	r4, #0
 8000950:	e01f      	b.n	8000992 <SD_disk_initialize+0xc6>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000952:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000956:	2069      	movs	r0, #105	; 0x69
 8000958:	f7ff ff63 	bl	8000822 <SD_SendCmd>
 800095c:	4601      	mov	r1, r0
 800095e:	2800      	cmp	r0, #0
 8000960:	d1f2      	bne.n	8000948 <SD_disk_initialize+0x7c>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000962:	883b      	ldrh	r3, [r7, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f2      	beq.n	800094e <SD_disk_initialize+0x82>
 8000968:	207a      	movs	r0, #122	; 0x7a
 800096a:	f7ff ff5a 	bl	8000822 <SD_SendCmd>
 800096e:	2800      	cmp	r0, #0
 8000970:	d1ed      	bne.n	800094e <SD_disk_initialize+0x82>
 8000972:	2404      	movs	r4, #4
						ocr[n] = SPI_RxByte();
 8000974:	f7ff feca 	bl	800070c <SPI_RxByte>
					for (n = 0; n < 4; n++)
 8000978:	3c01      	subs	r4, #1
 800097a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
						ocr[n] = SPI_RxByte();
 800097e:	f805 0b01 	strb.w	r0, [r5], #1
					for (n = 0; n < 4; n++)
 8000982:	d1f7      	bne.n	8000974 <SD_disk_initialize+0xa8>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000984:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000988:	f013 0f40 	tst.w	r3, #64	; 0x40
 800098c:	bf14      	ite	ne
 800098e:	240c      	movne	r4, #12
 8000990:	2404      	moveq	r4, #4
	CardType = type;
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <SD_disk_initialize+0x14c>)
 8000994:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8000996:	f7ff feab 	bl	80006f0 <DESELECT>
	SPI_RxByte();
 800099a:	f7ff feb7 	bl	800070c <SPI_RxByte>
	if (type)
 800099e:	b38c      	cbz	r4, 8000a04 <SD_disk_initialize+0x138>
		Stat &= ~STA_NOINIT;
 80009a0:	7833      	ldrb	r3, [r6, #0]
 80009a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80009a6:	7033      	strb	r3, [r6, #0]
 80009a8:	e79a      	b.n	80008e0 <SD_disk_initialize+0x14>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009aa:	4629      	mov	r1, r5
 80009ac:	2077      	movs	r0, #119	; 0x77
 80009ae:	f7ff ff38 	bl	8000822 <SD_SendCmd>
 80009b2:	2801      	cmp	r0, #1
 80009b4:	d806      	bhi.n	80009c4 <SD_disk_initialize+0xf8>
 80009b6:	4629      	mov	r1, r5
 80009b8:	2069      	movs	r0, #105	; 0x69
 80009ba:	f7ff ff32 	bl	8000822 <SD_SendCmd>
 80009be:	2801      	cmp	r0, #1
 80009c0:	bf98      	it	ls
 80009c2:	2402      	movls	r4, #2
				if (type == CT_SD1)
 80009c4:	2c02      	cmp	r4, #2
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009c6:	f04f 0100 	mov.w	r1, #0
				if (type == CT_SD1)
 80009ca:	d119      	bne.n	8000a00 <SD_disk_initialize+0x134>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009cc:	2077      	movs	r0, #119	; 0x77
 80009ce:	f7ff ff28 	bl	8000822 <SD_SendCmd>
 80009d2:	2801      	cmp	r0, #1
 80009d4:	d903      	bls.n	80009de <SD_disk_initialize+0x112>
			} while (Timer1);
 80009d6:	883b      	ldrh	r3, [r7, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1f3      	bne.n	80009c4 <SD_disk_initialize+0xf8>
 80009dc:	e7b7      	b.n	800094e <SD_disk_initialize+0x82>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009de:	2100      	movs	r1, #0
 80009e0:	2069      	movs	r0, #105	; 0x69
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009e2:	f7ff ff1e 	bl	8000822 <SD_SendCmd>
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d1f5      	bne.n	80009d6 <SD_disk_initialize+0x10a>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009ea:	883b      	ldrh	r3, [r7, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0ae      	beq.n	800094e <SD_disk_initialize+0x82>
 80009f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f4:	2050      	movs	r0, #80	; 0x50
 80009f6:	f7ff ff14 	bl	8000822 <SD_SendCmd>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d0c9      	beq.n	8000992 <SD_disk_initialize+0xc6>
 80009fe:	e7a6      	b.n	800094e <SD_disk_initialize+0x82>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a00:	2041      	movs	r0, #65	; 0x41
 8000a02:	e7ee      	b.n	80009e2 <SD_disk_initialize+0x116>
	PowerFlag = 0;
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SD_disk_initialize+0x150>)
 8000a06:	701c      	strb	r4, [r3, #0]
}
 8000a08:	e76a      	b.n	80008e0 <SD_disk_initialize+0x14>
	if(drv) return STA_NOINIT;
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	e76a      	b.n	80008e4 <SD_disk_initialize+0x18>
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	200000a6 	.word	0x200000a6
 8000a18:	200000a4 	.word	0x200000a4
 8000a1c:	200000a5 	.word	0x200000a5

08000a20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 8000a20:	b918      	cbnz	r0, 8000a2a <SD_disk_status+0xa>
	return Stat;
 8000a22:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <SD_disk_status+0x10>)
 8000a24:	7818      	ldrb	r0, [r3, #0]
 8000a26:	b2c0      	uxtb	r0, r0
 8000a28:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8000a2a:	2001      	movs	r0, #1
}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000

08000a34 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	460e      	mov	r6, r1
 8000a38:	4615      	mov	r5, r2
 8000a3a:	461c      	mov	r4, r3
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d137      	bne.n	8000ab0 <SD_disk_read+0x7c>
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d035      	beq.n	8000ab0 <SD_disk_read+0x7c>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <SD_disk_read+0x84>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	07da      	lsls	r2, r3, #31
 8000a4a:	d433      	bmi.n	8000ab4 <SD_disk_read+0x80>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <SD_disk_read+0x88>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	075b      	lsls	r3, r3, #29
 8000a52:	bf58      	it	pl
 8000a54:	026d      	lslpl	r5, r5, #9

	SELECT();
 8000a56:	f7ff fe3d 	bl	80006d4 <SELECT>

	if (count == 1)
 8000a5a:	2c01      	cmp	r4, #1
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a5c:	4629      	mov	r1, r5
	if (count == 1)
 8000a5e:	d113      	bne.n	8000a88 <SD_disk_read+0x54>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a60:	2051      	movs	r0, #81	; 0x51
 8000a62:	f7ff fede 	bl	8000822 <SD_SendCmd>
 8000a66:	b938      	cbnz	r0, 8000a78 <SD_disk_read+0x44>
 8000a68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6c:	4630      	mov	r0, r6
 8000a6e:	f7ff ff0b 	bl	8000888 <SD_RxDataBlock>
 8000a72:	fab0 f480 	clz	r4, r0
 8000a76:	0964      	lsrs	r4, r4, #5
			SD_SendCmd(CMD12, 0);
		}
	}

	/* Idle */
	DESELECT();
 8000a78:	f7ff fe3a 	bl	80006f0 <DESELECT>
	SPI_RxByte();
 8000a7c:	f7ff fe46 	bl	800070c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a80:	1e20      	subs	r0, r4, #0
 8000a82:	bf18      	it	ne
 8000a84:	2001      	movne	r0, #1
}
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a88:	2052      	movs	r0, #82	; 0x52
 8000a8a:	f7ff feca 	bl	8000822 <SD_SendCmd>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d1f2      	bne.n	8000a78 <SD_disk_read+0x44>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a96:	4630      	mov	r0, r6
 8000a98:	f7ff fef6 	bl	8000888 <SD_RxDataBlock>
 8000a9c:	b118      	cbz	r0, 8000aa6 <SD_disk_read+0x72>
			} while (--count);
 8000a9e:	3c01      	subs	r4, #1
				buff += 512;
 8000aa0:	f506 7600 	add.w	r6, r6, #512	; 0x200
			} while (--count);
 8000aa4:	d1f5      	bne.n	8000a92 <SD_disk_read+0x5e>
			SD_SendCmd(CMD12, 0);
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	204c      	movs	r0, #76	; 0x4c
 8000aaa:	f7ff feba 	bl	8000822 <SD_SendCmd>
 8000aae:	e7e3      	b.n	8000a78 <SD_disk_read+0x44>
	if (pdrv || !count) return RES_PARERR;
 8000ab0:	2004      	movs	r0, #4
 8000ab2:	e7e8      	b.n	8000a86 <SD_disk_read+0x52>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	e7e6      	b.n	8000a86 <SD_disk_read+0x52>
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	200000a4 	.word	0x200000a4

08000ac0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4616      	mov	r6, r2
 8000ac6:	461c      	mov	r4, r3
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d147      	bne.n	8000b5c <SD_disk_write+0x9c>
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d045      	beq.n	8000b5c <SD_disk_write+0x9c>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <SD_disk_write+0xa8>)
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	07d0      	lsls	r0, r2, #31
 8000ad6:	d443      	bmi.n	8000b60 <SD_disk_write+0xa0>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0759      	lsls	r1, r3, #29
 8000adc:	d442      	bmi.n	8000b64 <SD_disk_write+0xa4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ade:	4f23      	ldr	r7, [pc, #140]	; (8000b6c <SD_disk_write+0xac>)
 8000ae0:	783b      	ldrb	r3, [r7, #0]
 8000ae2:	075a      	lsls	r2, r3, #29
 8000ae4:	bf58      	it	pl
 8000ae6:	0276      	lslpl	r6, r6, #9

	SELECT();
 8000ae8:	f7ff fdf4 	bl	80006d4 <SELECT>

	if (count == 1)
 8000aec:	2c01      	cmp	r4, #1
 8000aee:	d113      	bne.n	8000b18 <SD_disk_write+0x58>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000af0:	4631      	mov	r1, r6
 8000af2:	2058      	movs	r0, #88	; 0x58
 8000af4:	f7ff fe95 	bl	8000822 <SD_SendCmd>
 8000af8:	bb70      	cbnz	r0, 8000b58 <SD_disk_write+0x98>
 8000afa:	21fe      	movs	r1, #254	; 0xfe
 8000afc:	4628      	mov	r0, r5
 8000afe:	f7ff fe61 	bl	80007c4 <SD_TxDataBlock>
 8000b02:	fab0 f480 	clz	r4, r0
 8000b06:	0964      	lsrs	r4, r4, #5
			}
		}
	}

	/* Idle */
	DESELECT();
 8000b08:	f7ff fdf2 	bl	80006f0 <DESELECT>
	SPI_RxByte();
 8000b0c:	f7ff fdfe 	bl	800070c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b10:	1e20      	subs	r0, r4, #0
 8000b12:	bf18      	it	ne
 8000b14:	2001      	movne	r0, #1
}
 8000b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (CardType & CT_SD1)
 8000b18:	783b      	ldrb	r3, [r7, #0]
 8000b1a:	079b      	lsls	r3, r3, #30
 8000b1c:	d507      	bpl.n	8000b2e <SD_disk_write+0x6e>
			SD_SendCmd(CMD55, 0);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2077      	movs	r0, #119	; 0x77
 8000b22:	f7ff fe7e 	bl	8000822 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b26:	4621      	mov	r1, r4
 8000b28:	2057      	movs	r0, #87	; 0x57
 8000b2a:	f7ff fe7a 	bl	8000822 <SD_SendCmd>
		if (SD_SendCmd(CMD25, sector) == 0)
 8000b2e:	4631      	mov	r1, r6
 8000b30:	2059      	movs	r0, #89	; 0x59
 8000b32:	f7ff fe76 	bl	8000822 <SD_SendCmd>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d1e6      	bne.n	8000b08 <SD_disk_write+0x48>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b3a:	21fc      	movs	r1, #252	; 0xfc
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	f7ff fe41 	bl	80007c4 <SD_TxDataBlock>
 8000b42:	b118      	cbz	r0, 8000b4c <SD_disk_write+0x8c>
			} while (--count);
 8000b44:	3c01      	subs	r4, #1
				buff += 512;
 8000b46:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8000b4a:	d1f6      	bne.n	8000b3a <SD_disk_write+0x7a>
			if(!SD_TxDataBlock(0, 0xFD))
 8000b4c:	21fd      	movs	r1, #253	; 0xfd
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff fe38 	bl	80007c4 <SD_TxDataBlock>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d1d7      	bne.n	8000b08 <SD_disk_write+0x48>
				count = 1;
 8000b58:	2401      	movs	r4, #1
 8000b5a:	e7d5      	b.n	8000b08 <SD_disk_write+0x48>
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	2004      	movs	r0, #4
 8000b5e:	e7da      	b.n	8000b16 <SD_disk_write+0x56>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b60:	2003      	movs	r0, #3
 8000b62:	e7d8      	b.n	8000b16 <SD_disk_write+0x56>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b64:	2002      	movs	r0, #2
 8000b66:	e7d6      	b.n	8000b16 <SD_disk_write+0x56>
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	200000a4 	.word	0x200000a4

08000b70 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000b70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000b72:	460e      	mov	r6, r1
 8000b74:	4615      	mov	r5, r2
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000b76:	4604      	mov	r4, r0
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	f040 8092 	bne.w	8000ca2 <SD_disk_ioctl+0x132>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8000b7e:	2905      	cmp	r1, #5
 8000b80:	d113      	bne.n	8000baa <SD_disk_ioctl+0x3a>
	{
		switch (*ptr)
 8000b82:	7813      	ldrb	r3, [r2, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d009      	beq.n	8000b9c <SD_disk_ioctl+0x2c>
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d00a      	beq.n	8000ba2 <SD_disk_ioctl+0x32>
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f040 8088 	bne.w	8000ca2 <SD_disk_ioctl+0x132>
	PowerFlag = 0;
 8000b92:	4b46      	ldr	r3, [pc, #280]	; (8000cac <SD_disk_ioctl+0x13c>)
 8000b94:	7018      	strb	r0, [r3, #0]
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 8000b96:	4620      	mov	r0, r4
 8000b98:	b004      	add	sp, #16
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
			SD_PowerOn();		/* Power On */
 8000b9c:	f7ff fdd0 	bl	8000740 <SD_PowerOn>
			break;
 8000ba0:	e7f9      	b.n	8000b96 <SD_disk_ioctl+0x26>
	return PowerFlag;
 8000ba2:	4b42      	ldr	r3, [pc, #264]	; (8000cac <SD_disk_ioctl+0x13c>)
			*(ptr + 1) = SD_CheckPower();
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	7053      	strb	r3, [r2, #1]
			break;
 8000ba8:	e7f5      	b.n	8000b96 <SD_disk_ioctl+0x26>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000baa:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <SD_disk_ioctl+0x140>)
 8000bac:	7818      	ldrb	r0, [r3, #0]
 8000bae:	f010 0401 	ands.w	r4, r0, #1
 8000bb2:	d178      	bne.n	8000ca6 <SD_disk_ioctl+0x136>
		SELECT();
 8000bb4:	f7ff fd8e 	bl	80006d4 <SELECT>
		switch (ctrl)
 8000bb8:	2e0d      	cmp	r6, #13
 8000bba:	d868      	bhi.n	8000c8e <SD_disk_ioctl+0x11e>
 8000bbc:	e8df f006 	tbb	[pc, r6]
 8000bc0:	6746074a 	.word	0x6746074a
 8000bc4:	67676767 	.word	0x67676767
 8000bc8:	51676767 	.word	0x51676767
 8000bcc:	625f      	.short	0x625f
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2049      	movs	r0, #73	; 0x49
 8000bd2:	f7ff fe26 	bl	8000822 <SD_SendCmd>
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	b128      	cbz	r0, 8000be6 <SD_disk_ioctl+0x76>
	res = RES_ERROR;
 8000bda:	2401      	movs	r4, #1
		DESELECT();
 8000bdc:	f7ff fd88 	bl	80006f0 <DESELECT>
		SPI_RxByte();
 8000be0:	f7ff fd94 	bl	800070c <SPI_RxByte>
 8000be4:	e7d7      	b.n	8000b96 <SD_disk_ioctl+0x26>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000be6:	2110      	movs	r1, #16
 8000be8:	4668      	mov	r0, sp
 8000bea:	f7ff fe4d 	bl	8000888 <SD_RxDataBlock>
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	d0f3      	beq.n	8000bda <SD_disk_ioctl+0x6a>
				if ((csd[0] >> 6) == 1)
 8000bf2:	f89d 1000 	ldrb.w	r1, [sp]
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000bf6:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000bfa:	f89d 2008 	ldrb.w	r2, [sp, #8]
				if ((csd[0] >> 6) == 1)
 8000bfe:	0989      	lsrs	r1, r1, #6
 8000c00:	2901      	cmp	r1, #1
 8000c02:	d106      	bne.n	8000c12 <SD_disk_ioctl+0xa2>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000c04:	3301      	adds	r3, #1
 8000c06:	eb03 2202 	add.w	r2, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 8000c0a:	b292      	uxth	r2, r2
 8000c0c:	0292      	lsls	r2, r2, #10
 8000c0e:	602a      	str	r2, [r5, #0]
 8000c10:	e7e4      	b.n	8000bdc <SD_disk_ioctl+0x6c>
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000c12:	f89d 1007 	ldrb.w	r1, [sp, #7]
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000c16:	f89d 000a 	ldrb.w	r0, [sp, #10]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000c1a:	0992      	lsrs	r2, r2, #6
 8000c1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000c20:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000c24:	0289      	lsls	r1, r1, #10
 8000c26:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8000c2a:	3201      	adds	r2, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000c2c:	440a      	add	r2, r1
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000c2e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	f001 010f 	and.w	r1, r1, #15
 8000c38:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8000c3c:	f003 0306 	and.w	r3, r3, #6
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000c40:	440b      	add	r3, r1
 8000c42:	3b07      	subs	r3, #7
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	602b      	str	r3, [r5, #0]
 8000c4a:	e7c7      	b.n	8000bdc <SD_disk_ioctl+0x6c>
			*(WORD*) buff = 512;
 8000c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c50:	802b      	strh	r3, [r5, #0]
			break;
 8000c52:	e7c3      	b.n	8000bdc <SD_disk_ioctl+0x6c>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000c54:	f7ff fda6 	bl	80007a4 <SD_ReadyWait>
	res = RES_ERROR;
 8000c58:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 8000c5c:	bf18      	it	ne
 8000c5e:	2401      	movne	r4, #1
 8000c60:	e7bc      	b.n	8000bdc <SD_disk_ioctl+0x6c>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c62:	2100      	movs	r1, #0
 8000c64:	2049      	movs	r0, #73	; 0x49
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c66:	f7ff fddc 	bl	8000822 <SD_SendCmd>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d1b5      	bne.n	8000bda <SD_disk_ioctl+0x6a>
 8000c6e:	2110      	movs	r1, #16
 8000c70:	4628      	mov	r0, r5
 8000c72:	f7ff fe09 	bl	8000888 <SD_RxDataBlock>
	res = RES_ERROR;
 8000c76:	fab0 f480 	clz	r4, r0
 8000c7a:	0964      	lsrs	r4, r4, #5
 8000c7c:	e7ae      	b.n	8000bdc <SD_disk_ioctl+0x6c>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000c7e:	2100      	movs	r1, #0
 8000c80:	204a      	movs	r0, #74	; 0x4a
 8000c82:	e7f0      	b.n	8000c66 <SD_disk_ioctl+0xf6>
			if (SD_SendCmd(CMD58, 0) == 0)
 8000c84:	2100      	movs	r1, #0
 8000c86:	207a      	movs	r0, #122	; 0x7a
 8000c88:	f7ff fdcb 	bl	8000822 <SD_SendCmd>
 8000c8c:	b108      	cbz	r0, 8000c92 <SD_disk_ioctl+0x122>
		switch (ctrl)
 8000c8e:	2404      	movs	r4, #4
 8000c90:	e7a4      	b.n	8000bdc <SD_disk_ioctl+0x6c>
 8000c92:	1d2c      	adds	r4, r5, #4
					*ptr++ = SPI_RxByte();
 8000c94:	f7ff fd3a 	bl	800070c <SPI_RxByte>
 8000c98:	f805 0b01 	strb.w	r0, [r5], #1
				for (n = 0; n < 4; n++)
 8000c9c:	42ac      	cmp	r4, r5
 8000c9e:	d1f9      	bne.n	8000c94 <SD_disk_ioctl+0x124>
 8000ca0:	e7f5      	b.n	8000c8e <SD_disk_ioctl+0x11e>
		switch (*ptr)
 8000ca2:	2404      	movs	r4, #4
 8000ca4:	e777      	b.n	8000b96 <SD_disk_ioctl+0x26>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ca6:	2403      	movs	r4, #3
 8000ca8:	e775      	b.n	8000b96 <SD_disk_ioctl+0x26>
 8000caa:	bf00      	nop
 8000cac:	200000a5 	.word	0x200000a5
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <printMessages>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printMessages(char *format, ...)
{
 8000cb4:	b40f      	push	{r0, r1, r2, r3}
 8000cb6:	b500      	push	{lr}
 8000cb8:	b09b      	sub	sp, #108	; 0x6c
 8000cba:	aa1c      	add	r2, sp, #112	; 0x70
	char comingMessage[100];

	va_list vaList;
	va_start(vaList, format);
	vsprintf(comingMessage, format, vaList);
 8000cbc:	a801      	add	r0, sp, #4
{
 8000cbe:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(vaList, format);
 8000cc2:	9200      	str	r2, [sp, #0]
	vsprintf(comingMessage, format, vaList);
 8000cc4:	f003 f85c 	bl	8003d80 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)comingMessage, strlen(comingMessage), 100);
 8000cc8:	a801      	add	r0, sp, #4
 8000cca:	f7ff fa81 	bl	80001d0 <strlen>
 8000cce:	2364      	movs	r3, #100	; 0x64
 8000cd0:	b282      	uxth	r2, r0
 8000cd2:	a901      	add	r1, sp, #4
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <printMessages+0x30>)
 8000cd6:	f001 fbb7 	bl	8002448 <HAL_UART_Transmit>
	va_end(vaList);
}
 8000cda:	b01b      	add	sp, #108	; 0x6c
 8000cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4770      	bx	lr
 8000ce4:	2001a818 	.word	0x2001a818

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cec:	2214      	movs	r2, #20
 8000cee:	2100      	movs	r1, #0
 8000cf0:	a809      	add	r0, sp, #36	; 0x24
 8000cf2:	f003 f827 	bl	8003d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf6:	2214      	movs	r2, #20
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	a803      	add	r0, sp, #12
 8000cfc:	f003 f822 	bl	8003d44 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <SystemClock_Config+0x98>)
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000d08:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000d0c:	6411      	str	r1, [r2, #64]	; 0x40
 8000d0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d10:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d14:	9201      	str	r2, [sp, #4]
 8000d16:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d18:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <SystemClock_Config+0x9c>)
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	6811      	ldr	r1, [r2, #0]
 8000d1e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000d22:	6011      	str	r1, [r2, #0]
 8000d24:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d26:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d28:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d2c:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d2e:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d32:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d34:	23a8      	movs	r3, #168	; 0xa8
 8000d36:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d3a:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3e:	2101      	movs	r1, #1
 8000d40:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d42:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d46:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d4c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4e:	f000 fda1 	bl	8001894 <HAL_RCC_OscConfig>
 8000d52:	b108      	cbz	r0, 8000d58 <SystemClock_Config+0x70>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5e:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d60:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d68:	2105      	movs	r1, #5
 8000d6a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d70:	f000 ff6e 	bl	8001c50 <HAL_RCC_ClockConfig>
 8000d74:	b108      	cbz	r0, 8000d7a <SystemClock_Config+0x92>
 8000d76:	b672      	cpsid	i
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <SystemClock_Config+0x90>
}
 8000d7a:	b014      	add	sp, #80	; 0x50
 8000d7c:	bd10      	pop	{r4, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000

08000d88 <main>:
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
  HAL_Init();
 8000d8c:	f000 fa42 	bl	8001214 <HAL_Init>
  SystemClock_Config();
 8000d90:	f7ff ffaa 	bl	8000ce8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	2214      	movs	r2, #20
 8000d96:	2100      	movs	r1, #0
 8000d98:	a803      	add	r0, sp, #12
 8000d9a:	f002 ffd3 	bl	8003d44 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2400      	movs	r4, #0
 8000da0:	4b5f      	ldr	r3, [pc, #380]	; (8000f20 <main+0x198>)
 8000da2:	9400      	str	r4, [sp, #0]
 8000da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000da6:	485f      	ldr	r0, [pc, #380]	; (8000f24 <main+0x19c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	f042 0201 	orr.w	r2, r2, #1
 8000dac:	631a      	str	r2, [r3, #48]	; 0x30
 8000dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db0:	f002 0201 	and.w	r2, r2, #1
 8000db4:	9200      	str	r2, [sp, #0]
 8000db6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	9401      	str	r4, [sp, #4]
 8000dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dbc:	f042 0202 	orr.w	r2, r2, #2
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc4:	f002 0202 	and.w	r2, r2, #2
 8000dc8:	9201      	str	r2, [sp, #4]
 8000dca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	9402      	str	r4, [sp, #8]
 8000dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd0:	f042 0204 	orr.w	r2, r2, #4
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0304 	and.w	r3, r3, #4
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ddc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000de0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de4:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de6:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000de8:	f000 fd4e 	bl	8001888 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	484e      	ldr	r0, [pc, #312]	; (8000f28 <main+0x1a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f000 fc67 	bl	80016c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	4849      	ldr	r0, [pc, #292]	; (8000f24 <main+0x19c>)
 8000e00:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f000 fc5d 	bl	80016c8 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000e0e:	4847      	ldr	r0, [pc, #284]	; (8000f2c <main+0x1a4>)
  huart2.Init.BaudRate = 115200;
 8000e10:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <main+0x1a8>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e12:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8000e14:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e18:	260c      	movs	r6, #12
  huart2.Init.BaudRate = 115200;
 8000e1a:	e9c0 3700 	strd	r3, r7, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	e9c0 6405 	strd	r6, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e26:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e28:	f001 fae0 	bl	80023ec <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b108      	cbz	r0, 8000e34 <main+0xac>
 8000e30:	b672      	cpsid	i
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <main+0xaa>
  huart3.Instance = USART3;
 8000e34:	483f      	ldr	r0, [pc, #252]	; (8000f34 <main+0x1ac>)
 8000e36:	4a40      	ldr	r2, [pc, #256]	; (8000f38 <main+0x1b0>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e38:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8000e3c:	e9c0 2700 	strd	r2, r7, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e40:	e9c0 3604 	strd	r3, r6, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e48:	f001 fad0 	bl	80023ec <HAL_UART_Init>
 8000e4c:	b108      	cbz	r0, 8000e52 <main+0xca>
 8000e4e:	b672      	cpsid	i
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <main+0xc8>
  hcrc.Instance = CRC;
 8000e52:	483a      	ldr	r0, [pc, #232]	; (8000f3c <main+0x1b4>)
 8000e54:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <main+0x1b8>)
 8000e56:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e58:	f000 fa74 	bl	8001344 <HAL_CRC_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b108      	cbz	r0, 8000e64 <main+0xdc>
 8000e60:	b672      	cpsid	i
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <main+0xda>
  hspi2.Instance = SPI2;
 8000e64:	4837      	ldr	r0, [pc, #220]	; (8000f44 <main+0x1bc>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4938      	ldr	r1, [pc, #224]	; (8000f48 <main+0x1c0>)
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e68:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e6e:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.CRCPolynomial = 10;
 8000e72:	240a      	movs	r4, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e74:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e78:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e80:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e84:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 10;
 8000e88:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e8a:	f001 f81d 	bl	8001ec8 <HAL_SPI_Init>
 8000e8e:	4606      	mov	r6, r0
 8000e90:	b108      	cbz	r0, 8000e96 <main+0x10e>
 8000e92:	b672      	cpsid	i
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <main+0x10c>
  MX_FATFS_Init();
 8000e96:	f001 fb2d 	bl	80024f4 <MX_FATFS_Init>
  res = f_mount(&fs, "", 0);
 8000e9a:	4632      	mov	r2, r6
 8000e9c:	492b      	ldr	r1, [pc, #172]	; (8000f4c <main+0x1c4>)
 8000e9e:	482c      	ldr	r0, [pc, #176]	; (8000f50 <main+0x1c8>)
 8000ea0:	4e2c      	ldr	r6, [pc, #176]	; (8000f54 <main+0x1cc>)
 8000ea2:	f002 fc59 	bl	8003758 <f_mount>
 8000ea6:	7030      	strb	r0, [r6, #0]
  if(res != FR_OK)
 8000ea8:	b100      	cbz	r0, 8000eac <main+0x124>
	  while(1);
 8000eaa:	e7fe      	b.n	8000eaa <main+0x122>
  res = f_open(&file, "NSW.bin", FA_READ);
 8000eac:	4f2a      	ldr	r7, [pc, #168]	; (8000f58 <main+0x1d0>)
 8000eae:	492b      	ldr	r1, [pc, #172]	; (8000f5c <main+0x1d4>)
 8000eb0:	462a      	mov	r2, r5
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	f002 fc7a 	bl	80037ac <f_open>
 8000eb8:	7030      	strb	r0, [r6, #0]
  if(res == FR_OK)
 8000eba:	b9e8      	cbnz	r0, 8000ef8 <main+0x170>
	  res = f_read(&file, fileBuff, sizeof(fileBuff), byteRead);
 8000ebc:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <main+0x1d8>)
 8000ebe:	4a29      	ldr	r2, [pc, #164]	; (8000f64 <main+0x1dc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4929      	ldr	r1, [pc, #164]	; (8000f68 <main+0x1e0>)
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	f002 fd75 	bl	80039b4 <f_read>
 8000eca:	7030      	strb	r0, [r6, #0]
	  if(res == FR_OK)
 8000ecc:	b140      	cbz	r0, 8000ee0 <main+0x158>
			  printMessages("BL DEBUG MESG: there is new software but it is damaged\r\n");
 8000ece:	4c27      	ldr	r4, [pc, #156]	; (8000f6c <main+0x1e4>)
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f7ff feef 	bl	8000cb4 <printMessages>
			  HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f000 f9c7 	bl	800126c <HAL_Delay>
		  while(1){
 8000ede:	e7f7      	b.n	8000ed0 <main+0x148>
		  execute_flash_erase(2,10);
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff fb96 	bl	8000614 <execute_flash_erase>
		  execute_memory_write(&fileBuff[0], FLASH_SECTOR2_BASE_ADDRESS, file.obj.objsize);
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	4921      	ldr	r1, [pc, #132]	; (8000f70 <main+0x1e8>)
 8000eec:	481e      	ldr	r0, [pc, #120]	; (8000f68 <main+0x1e0>)
 8000eee:	f7ff fb75 	bl	80005dc <execute_memory_write>
		  bootloader_jump_to_user_app();
 8000ef2:	f7ff fb49 	bl	8000588 <bootloader_jump_to_user_app>
 8000ef6:	e00a      	b.n	8000f0e <main+0x186>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <main+0x1a0>)
 8000efa:	4629      	mov	r1, r5
 8000efc:	f000 fcbe 	bl	800187c <HAL_GPIO_ReadPin>
 8000f00:	2801      	cmp	r0, #1
 8000f02:	d108      	bne.n	8000f16 <main+0x18e>
		  printMessages("BL DEBUG MESG: Button is pressed and going to bootloader\r\n");
 8000f04:	481b      	ldr	r0, [pc, #108]	; (8000f74 <main+0x1ec>)
 8000f06:	f7ff fed5 	bl	8000cb4 <printMessages>
		  bootloader_uart_data_read();
 8000f0a:	f7ff fb3b 	bl	8000584 <bootloader_uart_data_read>
  f_close(&file);
 8000f0e:	4812      	ldr	r0, [pc, #72]	; (8000f58 <main+0x1d0>)
 8000f10:	f002 fe59 	bl	8003bc6 <f_close>
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <main+0x18c>
		  printMessages("BL DEBUG MESG: Button is not pressed and executing user app\r\n");
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <main+0x1f0>)
 8000f18:	f7ff fecc 	bl	8000cb4 <printMessages>
 8000f1c:	e7e9      	b.n	8000ef2 <main+0x16a>
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	2001a818 	.word	0x2001a818
 8000f30:	40004400 	.word	0x40004400
 8000f34:	2001a85c 	.word	0x2001a85c
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	2001a7b8 	.word	0x2001a7b8
 8000f40:	40023000 	.word	0x40023000
 8000f44:	2001a7c0 	.word	0x2001a7c0
 8000f48:	40003800 	.word	0x40003800
 8000f4c:	08004705 	.word	0x08004705
 8000f50:	20019780 	.word	0x20019780
 8000f54:	2001a8a0 	.word	0x2001a8a0
 8000f58:	200000b0 	.word	0x200000b0
 8000f5c:	080046c5 	.word	0x080046c5
 8000f60:	200000ac 	.word	0x200000ac
 8000f64:	000186a0 	.word	0x000186a0
 8000f68:	200010e0 	.word	0x200010e0
 8000f6c:	080046cd 	.word	0x080046cd
 8000f70:	08008000 	.word	0x08008000
 8000f74:	08004706 	.word	0x08004706
 8000f78:	08004741 	.word	0x08004741

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_MspInit+0x34>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	9100      	str	r1, [sp, #0]
 8000f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f8e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f92:	9200      	str	r2, [sp, #0]
 8000f94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	9101      	str	r1, [sp, #4]
 8000f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	b002      	add	sp, #8
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000fb4:	6802      	ldr	r2, [r0, #0]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_CRC_MspInit+0x28>)
 8000fb8:	429a      	cmp	r2, r3
{
 8000fba:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_CRC_MspInit+0x2c>)
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fd6:	b002      	add	sp, #8
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023000 	.word	0x40023000
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe4:	b510      	push	{r4, lr}
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	2214      	movs	r2, #20
 8000fec:	2100      	movs	r1, #0
 8000fee:	a803      	add	r0, sp, #12
 8000ff0:	f002 fea8 	bl	8003d44 <memset>
  if(hspi->Instance==SPI2)
 8000ff4:	6822      	ldr	r2, [r4, #0]
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_SPI_MspInit+0x64>)
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d123      	bne.n	8001044 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ffc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001000:	2100      	movs	r1, #0
 8001002:	9101      	str	r1, [sp, #4]
 8001004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	4811      	ldr	r0, [pc, #68]	; (800104c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
 800100e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001010:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001014:	9201      	str	r2, [sp, #4]
 8001016:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	9102      	str	r1, [sp, #8]
 800101a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101c:	f042 0202 	orr.w	r2, r2, #2
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001030:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001032:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001038:	2305      	movs	r3, #5
 800103a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	a903      	add	r1, sp, #12
 8001040:	f000 fb42 	bl	80016c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001044:	b008      	add	sp, #32
 8001046:	bd10      	pop	{r4, pc}
 8001048:	40003800 	.word	0x40003800
 800104c:	40020400 	.word	0x40020400

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	2214      	movs	r2, #20
{
 8001054:	b08a      	sub	sp, #40	; 0x28
 8001056:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	2100      	movs	r1, #0
 800105a:	eb0d 0002 	add.w	r0, sp, r2
 800105e:	f002 fe71 	bl	8003d44 <memset>
  if(huart->Instance==USART2)
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	4a25      	ldr	r2, [pc, #148]	; (80010fc <HAL_UART_MspInit+0xac>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d123      	bne.n	80010b2 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <HAL_UART_MspInit+0xb0>)
 800106c:	2100      	movs	r1, #0
 800106e:	9101      	str	r1, [sp, #4]
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001072:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001076:	641a      	str	r2, [r3, #64]	; 0x40
 8001078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800107e:	9201      	str	r2, [sp, #4]
 8001080:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	9102      	str	r1, [sp, #8]
 8001084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	631a      	str	r2, [r3, #48]	; 0x30
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	9302      	str	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	200c      	movs	r0, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109e:	2403      	movs	r4, #3
 80010a0:	2307      	movs	r3, #7
 80010a2:	e9cd 4308 	strd	r4, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <HAL_UART_MspInit+0xb4>)
 80010a8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010aa:	f000 fb0d 	bl	80016c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ae:	b00a      	add	sp, #40	; 0x28
 80010b0:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <HAL_UART_MspInit+0xb8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d1fa      	bne.n	80010ae <HAL_UART_MspInit+0x5e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_UART_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	4814      	ldr	r0, [pc, #80]	; (800110c <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80010bc:	2100      	movs	r1, #0
 80010be:	9103      	str	r1, [sp, #12]
 80010c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
 80010c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ca:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80010ce:	9203      	str	r2, [sp, #12]
 80010d0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	9104      	str	r1, [sp, #16]
 80010d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d6:	f042 0204 	orr.w	r2, r2, #4
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	9304      	str	r3, [sp, #16]
 80010e4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80010ea:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ec:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f2:	2307      	movs	r3, #7
 80010f4:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f8:	a905      	add	r1, sp, #20
 80010fa:	e7d6      	b.n	80010aa <HAL_UART_MspInit+0x5a>
 80010fc:	40004400 	.word	0x40004400
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40004800 	.word	0x40004800
 800110c:	40020800 	.word	0x40020800

08001110 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler>

08001112 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler>

08001114 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler>

08001116 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler>

08001118 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler>

0800111a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 b892 	b.w	8001248 <HAL_IncTick>

08001124 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <_sbrk+0x30>)
 8001126:	6811      	ldr	r1, [r2, #0]
{
 8001128:	b510      	push	{r4, lr}
 800112a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800112c:	b909      	cbnz	r1, 8001132 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800112e:	490a      	ldr	r1, [pc, #40]	; (8001158 <_sbrk+0x34>)
 8001130:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	6810      	ldr	r0, [r2, #0]
 8001134:	4909      	ldr	r1, [pc, #36]	; (800115c <_sbrk+0x38>)
 8001136:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <_sbrk+0x3c>)
 8001138:	4403      	add	r3, r0
 800113a:	1b09      	subs	r1, r1, r4
 800113c:	428b      	cmp	r3, r1
 800113e:	d906      	bls.n	800114e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001140:	f002 fdd6 	bl	8003cf0 <__errno>
 8001144:	230c      	movs	r3, #12
 8001146:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001148:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800114c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800114e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001150:	e7fc      	b.n	800114c <_sbrk+0x28>
 8001152:	bf00      	nop
 8001154:	2001a8a4 	.word	0x2001a8a4
 8001158:	2001ab18 	.word	0x2001ab18
 800115c:	20020000 	.word	0x20020000
 8001160:	00000400 	.word	0x00000400

08001164 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <SystemInit+0x10>)
 8001166:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800116a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a2:	f7ff ffdf 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f002 fda9 	bl	8003cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff fded 	bl	8000d88 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80011bc:	08004c28 	.word	0x08004c28
  ldr r2, =_sbss
 80011c0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80011c4:	2001ab18 	.word	0x2001ab18

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>
	...

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_InitTick+0x3c>)
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_InitTick+0x40>)
{
 80011d2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d4:	7818      	ldrb	r0, [r3, #0]
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f0 	udiv	r3, r3, r0
 80011de:	6810      	ldr	r0, [r2, #0]
 80011e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80011e4:	f000 f89a 	bl	800131c <HAL_SYSTICK_Config>
 80011e8:	4604      	mov	r4, r0
 80011ea:	b958      	cbnz	r0, 8001204 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ec:	2d0f      	cmp	r5, #15
 80011ee:	d809      	bhi.n	8001204 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	4602      	mov	r2, r0
 80011f2:	4629      	mov	r1, r5
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f000 f85e 	bl	80012b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_InitTick+0x44>)
 80011fe:	4620      	mov	r0, r4
 8001200:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001202:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001204:	2001      	movs	r0, #1
 8001206:	e7fc      	b.n	8001202 <HAL_InitTick+0x36>
 8001208:	20000004 	.word	0x20000004
 800120c:	20000008 	.word	0x20000008
 8001210:	2000000c 	.word	0x2000000c

08001214 <HAL_Init>:
{
 8001214:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_Init+0x30>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800121e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001226:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f82f 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	200f      	movs	r0, #15
 8001238:	f7ff ffc8 	bl	80011cc <HAL_InitTick>
  HAL_MspInit();
 800123c:	f7ff fe9e 	bl	8000f7c <HAL_MspInit>
}
 8001240:	2000      	movs	r0, #0
 8001242:	bd08      	pop	{r3, pc}
 8001244:	40023c00 	.word	0x40023c00

08001248 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001248:	4a03      	ldr	r2, [pc, #12]	; (8001258 <HAL_IncTick+0x10>)
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <HAL_IncTick+0x14>)
 800124c:	6811      	ldr	r1, [r2, #0]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	440b      	add	r3, r1
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2001a8a8 	.word	0x2001a8a8
 800125c:	20000008 	.word	0x20000008

08001260 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001260:	4b01      	ldr	r3, [pc, #4]	; (8001268 <HAL_GetTick+0x8>)
 8001262:	6818      	ldr	r0, [r3, #0]
}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2001a8a8 	.word	0x2001a8a8

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff fff6 	bl	8001260 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001274:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	bf1c      	itt	ne
 8001278:	4b05      	ldrne	r3, [pc, #20]	; (8001290 <HAL_Delay+0x24>)
 800127a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800127c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800127e:	bf18      	it	ne
 8001280:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001282:	f7ff ffed 	bl	8001260 <HAL_GetTick>
 8001286:	1b43      	subs	r3, r0, r5
 8001288:	42a3      	cmp	r3, r4
 800128a:	d3fa      	bcc.n	8001282 <HAL_Delay+0x16>
  {
  }
}
 800128c:	bd38      	pop	{r3, r4, r5, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001296:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001298:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80012b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b530      	push	{r4, r5, lr}
 80012bc:	68dc      	ldr	r4, [r3, #12]
 80012be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	2d04      	cmp	r5, #4
 80012ca:	bf28      	it	cs
 80012cc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d4:	bf8c      	ite	hi
 80012d6:	3c03      	subhi	r4, #3
 80012d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012da:	fa03 f505 	lsl.w	r5, r3, r5
 80012de:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e2:	40a3      	lsls	r3, r4
 80012e4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80012ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	bfac      	ite	ge
 80012f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	4a08      	ldrlt	r2, [pc, #32]	; (8001318 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	bfb8      	it	lt
 80012fe:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	b2db      	uxtb	r3, r3
 8001304:	bfaa      	itet	ge
 8001306:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001310:	bd30      	pop	{r4, r5, pc}
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	e000ed14 	.word	0xe000ed14

0800131c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	3801      	subs	r0, #1
 800131e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001322:	d20b      	bcs.n	800133c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001324:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	4a05      	ldr	r2, [pc, #20]	; (8001340 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	21f0      	movs	r1, #240	; 0xf0
 800132e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001332:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001334:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001336:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001338:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800133c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001344:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001346:	4604      	mov	r4, r0
 8001348:	b150      	cbz	r0, 8001360 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800134a:	7943      	ldrb	r3, [r0, #5]
 800134c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001350:	b913      	cbnz	r3, 8001358 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001352:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001354:	f7ff fe2e 	bl	8000fb4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001358:	2301      	movs	r3, #1
 800135a:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800135c:	2000      	movs	r0, #0
}
 800135e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001360:	2001      	movs	r0, #1
 8001362:	e7fc      	b.n	800135e <HAL_CRC_Init+0x1a>

08001364 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001364:	4909      	ldr	r1, [pc, #36]	; (800138c <FLASH_Program_DoubleWord+0x28>)
{
 8001366:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001368:	690c      	ldr	r4, [r1, #16]
 800136a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800136e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001370:	690c      	ldr	r4, [r1, #16]
 8001372:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8001376:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001378:	690c      	ldr	r4, [r1, #16]
 800137a:	f044 0401 	orr.w	r4, r4, #1
 800137e:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001380:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001382:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001386:	6043      	str	r3, [r0, #4]
}
 8001388:	bd10      	pop	{r4, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00

08001390 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <FLASH_Program_Word+0x20>)
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001398:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80013aa:	6001      	str	r1, [r0, #0]
}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023c00 	.word	0x40023c00

080013b4 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <FLASH_Program_HalfWord+0x20>)
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013bc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	f042 0201 	orr.w	r2, r2, #1
 80013cc:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80013ce:	8001      	strh	r1, [r0, #0]
}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023c00 	.word	0x40023c00

080013d8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <FLASH_SetErrorCode+0x6c>)
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	06d2      	lsls	r2, r2, #27
 80013de:	d506      	bpl.n	80013ee <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80013e0:	4919      	ldr	r1, [pc, #100]	; (8001448 <FLASH_SetErrorCode+0x70>)
 80013e2:	69ca      	ldr	r2, [r1, #28]
 80013e4:	f042 0210 	orr.w	r2, r2, #16
 80013e8:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013ea:	2210      	movs	r2, #16
 80013ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	0690      	lsls	r0, r2, #26
 80013f2:	d506      	bpl.n	8001402 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80013f4:	4914      	ldr	r1, [pc, #80]	; (8001448 <FLASH_SetErrorCode+0x70>)
 80013f6:	69ca      	ldr	r2, [r1, #28]
 80013f8:	f042 0208 	orr.w	r2, r2, #8
 80013fc:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80013fe:	2220      	movs	r2, #32
 8001400:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <FLASH_SetErrorCode+0x6c>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	0651      	lsls	r1, r2, #25
 8001408:	d506      	bpl.n	8001418 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800140a:	490f      	ldr	r1, [pc, #60]	; (8001448 <FLASH_SetErrorCode+0x70>)
 800140c:	69ca      	ldr	r2, [r1, #28]
 800140e:	f042 0204 	orr.w	r2, r2, #4
 8001412:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	0612      	lsls	r2, r2, #24
 800141c:	d506      	bpl.n	800142c <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800141e:	490a      	ldr	r1, [pc, #40]	; (8001448 <FLASH_SetErrorCode+0x70>)
 8001420:	69ca      	ldr	r2, [r1, #28]
 8001422:	f042 0202 	orr.w	r2, r2, #2
 8001426:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <FLASH_SetErrorCode+0x6c>)
 800142e:	68d3      	ldr	r3, [r2, #12]
 8001430:	079b      	lsls	r3, r3, #30
 8001432:	d506      	bpl.n	8001442 <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001434:	4904      	ldr	r1, [pc, #16]	; (8001448 <FLASH_SetErrorCode+0x70>)
 8001436:	69cb      	ldr	r3, [r1, #28]
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800143e:	2302      	movs	r3, #2
 8001440:	60d3      	str	r3, [r2, #12]
  }
}
 8001442:	4770      	bx	lr
 8001444:	40023c00 	.word	0x40023c00
 8001448:	2001a8ac 	.word	0x2001a8ac

0800144c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_FLASH_Unlock+0x1c>)
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001452:	bfbf      	itttt	lt
 8001454:	4a05      	ldrlt	r2, [pc, #20]	; (800146c <HAL_FLASH_Unlock+0x20>)
 8001456:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001458:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 800145c:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800145e:	bfba      	itte	lt
 8001460:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8001462:	0fc0      	lsrlt	r0, r0, #31
 8001464:	2000      	movge	r0, #0
}
 8001466:	4770      	bx	lr
 8001468:	40023c00 	.word	0x40023c00
 800146c:	45670123 	.word	0x45670123

08001470 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_FLASH_Lock+0x10>)
 8001472:	6913      	ldr	r3, [r2, #16]
 8001474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001478:	6113      	str	r3, [r2, #16]
}
 800147a:	2000      	movs	r0, #0
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023c00 	.word	0x40023c00

08001484 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <FLASH_WaitForLastOperation+0x48>)
{ 
 8001486:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001488:	2200      	movs	r2, #0
{ 
 800148a:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800148c:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800148e:	f7ff fee7 	bl	8001260 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001492:	4d0f      	ldr	r5, [pc, #60]	; (80014d0 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
 8001494:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001496:	68eb      	ldr	r3, [r5, #12]
 8001498:	03da      	lsls	r2, r3, #15
 800149a:	d40c      	bmi.n	80014b6 <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800149c:	68eb      	ldr	r3, [r5, #12]
 800149e:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014a0:	bf44      	itt	mi
 80014a2:	2301      	movmi	r3, #1
 80014a4:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80014a6:	68e8      	ldr	r0, [r5, #12]
 80014a8:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 80014ac:	d007      	beq.n	80014be <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 80014ae:	f7ff ff93 	bl	80013d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80014b2:	2001      	movs	r0, #1
 80014b4:	e003      	b.n	80014be <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 80014b6:	1c61      	adds	r1, r4, #1
 80014b8:	d0ed      	beq.n	8001496 <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80014ba:	b90c      	cbnz	r4, 80014c0 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 80014bc:	2003      	movs	r0, #3
}  
 80014be:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80014c0:	f7ff fece 	bl	8001260 <HAL_GetTick>
 80014c4:	1b80      	subs	r0, r0, r6
 80014c6:	42a0      	cmp	r0, r4
 80014c8:	d9e5      	bls.n	8001496 <FLASH_WaitForLastOperation+0x12>
 80014ca:	e7f7      	b.n	80014bc <FLASH_WaitForLastOperation+0x38>
 80014cc:	2001a8ac 	.word	0x2001a8ac
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_FLASH_Program>:
{
 80014d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80014d6:	4e20      	ldr	r6, [pc, #128]	; (8001558 <HAL_FLASH_Program+0x84>)
{
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 80014dc:	7e32      	ldrb	r2, [r6, #24]
 80014de:	2a01      	cmp	r2, #1
{
 80014e0:	4607      	mov	r7, r0
 80014e2:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 80014e4:	d035      	beq.n	8001552 <HAL_FLASH_Program+0x7e>
 80014e6:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014e8:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80014ec:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014ee:	f7ff ffc9 	bl	8001484 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80014f2:	b9b8      	cbnz	r0, 8001524 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80014f4:	9b01      	ldr	r3, [sp, #4]
 80014f6:	b9cf      	cbnz	r7, 800152c <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_FLASH_Program+0x88>)
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001500:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001506:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001508:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8001510:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001512:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001516:	f7ff ffb5 	bl	8001484 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_FLASH_Program+0x88>)
 800151c:	6913      	ldr	r3, [r2, #16]
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8001524:	2300      	movs	r3, #0
 8001526:	7633      	strb	r3, [r6, #24]
}
 8001528:	b003      	add	sp, #12
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800152c:	2f01      	cmp	r7, #1
 800152e:	d104      	bne.n	800153a <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001530:	b2a1      	uxth	r1, r4
 8001532:	4628      	mov	r0, r5
 8001534:	f7ff ff3e 	bl	80013b4 <FLASH_Program_HalfWord>
 8001538:	e7eb      	b.n	8001512 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800153a:	2f02      	cmp	r7, #2
 800153c:	d104      	bne.n	8001548 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800153e:	4621      	mov	r1, r4
 8001540:	4628      	mov	r0, r5
 8001542:	f7ff ff25 	bl	8001390 <FLASH_Program_Word>
 8001546:	e7e4      	b.n	8001512 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8001548:	4622      	mov	r2, r4
 800154a:	4628      	mov	r0, r5
 800154c:	f7ff ff0a 	bl	8001364 <FLASH_Program_DoubleWord>
 8001550:	e7df      	b.n	8001512 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8001552:	2002      	movs	r0, #2
 8001554:	e7e8      	b.n	8001528 <HAL_FLASH_Program+0x54>
 8001556:	bf00      	nop
 8001558:	2001a8ac 	.word	0x2001a8ac
 800155c:	40023c00 	.word	0x40023c00

08001560 <FLASH_MassErase.constprop.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <FLASH_MassErase.constprop.0+0x20>)
 8001562:	6919      	ldr	r1, [r3, #16]
 8001564:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001568:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 800156a:	6919      	ldr	r1, [r3, #16]
 800156c:	f041 0104 	orr.w	r1, r1, #4
 8001570:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8001578:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800157c:	6118      	str	r0, [r3, #16]
}
 800157e:	4770      	bx	lr
 8001580:	40023c00 	.word	0x40023c00

08001584 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001584:	b139      	cbz	r1, 8001596 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001586:	2901      	cmp	r1, #1
 8001588:	d01c      	beq.n	80015c4 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800158a:	2902      	cmp	r1, #2
 800158c:	bf0c      	ite	eq
 800158e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8001592:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <FLASH_Erase_Sector+0x48>)
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800159e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	4311      	orrs	r1, r2
 80015a4:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80015ac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80015b4:	f040 0002 	orr.w	r0, r0, #2
 80015b8:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015c0:	611a      	str	r2, [r3, #16]
}
 80015c2:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	e7e5      	b.n	8001596 <FLASH_Erase_Sector+0x12>
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00

080015d0 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <FLASH_FlushCaches+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	0591      	lsls	r1, r2, #22
 80015d6:	d50f      	bpl.n	80015f8 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015de:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ee:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f6:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <FLASH_FlushCaches+0x54>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	0552      	lsls	r2, r2, #21
 80015fe:	d50f      	bpl.n	8001620 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001606:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001616:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800161e:	601a      	str	r2, [r3, #0]
  }
}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00

08001628 <HAL_FLASHEx_Erase>:
{
 8001628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800162c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80016c4 <HAL_FLASHEx_Erase+0x9c>
 8001630:	f898 3018 	ldrb.w	r3, [r8, #24]
 8001634:	2b01      	cmp	r3, #1
{
 8001636:	4605      	mov	r5, r0
 8001638:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 800163a:	d03f      	beq.n	80016bc <HAL_FLASHEx_Erase+0x94>
 800163c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800163e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8001642:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001646:	f7ff ff1d 	bl	8001484 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800164a:	4604      	mov	r4, r0
 800164c:	b9a0      	cbnz	r0, 8001678 <HAL_FLASHEx_Erase+0x50>
    *SectorError = 0xFFFFFFFFU;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	603b      	str	r3, [r7, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d114      	bne.n	8001684 <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800165a:	7c28      	ldrb	r0, [r5, #16]
 800165c:	f7ff ff80 	bl	8001560 <FLASH_MassErase.constprop.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001660:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001664:	f7ff ff0e 	bl	8001484 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8001668:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_FLASHEx_Erase+0x98>)
 800166a:	6913      	ldr	r3, [r2, #16]
 800166c:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001670:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001672:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();
 8001674:	f7ff ffac 	bl	80015d0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001678:	2300      	movs	r3, #0
 800167a:	f888 3018 	strb.w	r3, [r8, #24]
}
 800167e:	4620      	mov	r0, r4
 8001680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001684:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001686:	f8df 9038 	ldr.w	r9, [pc, #56]	; 80016c0 <HAL_FLASHEx_Erase+0x98>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800168a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800168e:	4413      	add	r3, r2
 8001690:	42b3      	cmp	r3, r6
 8001692:	d9ef      	bls.n	8001674 <HAL_FLASHEx_Erase+0x4c>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001694:	7c29      	ldrb	r1, [r5, #16]
 8001696:	4630      	mov	r0, r6
 8001698:	f7ff ff74 	bl	8001584 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800169c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016a0:	f7ff fef0 	bl	8001484 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80016a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80016a8:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80016ac:	f8c9 3010 	str.w	r3, [r9, #16]
        if (status != HAL_OK)
 80016b0:	b110      	cbz	r0, 80016b8 <HAL_FLASHEx_Erase+0x90>
          *SectorError = index;
 80016b2:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016b4:	4604      	mov	r4, r0
          break;
 80016b6:	e7dd      	b.n	8001674 <HAL_FLASHEx_Erase+0x4c>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016b8:	3601      	adds	r6, #1
 80016ba:	e7e6      	b.n	800168a <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 80016bc:	2402      	movs	r4, #2
 80016be:	e7de      	b.n	800167e <HAL_FLASHEx_Erase+0x56>
 80016c0:	40023c00 	.word	0x40023c00
 80016c4:	2001a8ac 	.word	0x2001a8ac

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001878 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d0:	4a67      	ldr	r2, [pc, #412]	; (8001870 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80016d6:	2401      	movs	r4, #1
 80016d8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016da:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80016de:	43ac      	bics	r4, r5
 80016e0:	f040 80b1 	bne.w	8001846 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e4:	684d      	ldr	r5, [r1, #4]
 80016e6:	f005 0403 	and.w	r4, r5, #3
 80016ea:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ee:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f2:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f8:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fc:	d834      	bhi.n	8001768 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80016fe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001700:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001704:	68cf      	ldr	r7, [r1, #12]
 8001706:	fa07 f708 	lsl.w	r7, r7, r8
 800170a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800170e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001710:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001712:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001716:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800171a:	409f      	lsls	r7, r3
 800171c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001720:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001722:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001724:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001728:	688f      	ldr	r7, [r1, #8]
 800172a:	fa07 f708 	lsl.w	r7, r7, r8
 800172e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001732:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001734:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001736:	d119      	bne.n	800176c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001738:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800173c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001740:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001744:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001748:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800174c:	f04f 0e0f 	mov.w	lr, #15
 8001750:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001754:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001758:	690f      	ldr	r7, [r1, #16]
 800175a:	fa07 f70b 	lsl.w	r7, r7, fp
 800175e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001762:	f8ca 7020 	str.w	r7, [sl, #32]
 8001766:	e001      	b.n	800176c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001768:	2c03      	cmp	r4, #3
 800176a:	d1da      	bne.n	8001722 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800176c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001772:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001774:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001776:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800177a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800177c:	d063      	beq.n	8001846 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	f04f 0a00 	mov.w	sl, #0
 8001782:	f8cd a004 	str.w	sl, [sp, #4]
 8001786:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178a:	4c3a      	ldr	r4, [pc, #232]	; (8001874 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001790:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001794:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001798:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800179c:	9601      	str	r6, [sp, #4]
 800179e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80017a0:	f023 0603 	bic.w	r6, r3, #3
 80017a4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80017a8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ac:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80017b0:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80017b8:	270f      	movs	r7, #15
 80017ba:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017be:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c0:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c4:	d046      	beq.n	8001854 <HAL_GPIO_Init+0x18c>
 80017c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017ca:	42a0      	cmp	r0, r4
 80017cc:	d044      	beq.n	8001858 <HAL_GPIO_Init+0x190>
 80017ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017d2:	42a0      	cmp	r0, r4
 80017d4:	d042      	beq.n	800185c <HAL_GPIO_Init+0x194>
 80017d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017da:	42a0      	cmp	r0, r4
 80017dc:	d040      	beq.n	8001860 <HAL_GPIO_Init+0x198>
 80017de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017e2:	42a0      	cmp	r0, r4
 80017e4:	d03e      	beq.n	8001864 <HAL_GPIO_Init+0x19c>
 80017e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017ea:	42a0      	cmp	r0, r4
 80017ec:	d03c      	beq.n	8001868 <HAL_GPIO_Init+0x1a0>
 80017ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017f2:	42a0      	cmp	r0, r4
 80017f4:	d03a      	beq.n	800186c <HAL_GPIO_Init+0x1a4>
 80017f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017fa:	42a0      	cmp	r0, r4
 80017fc:	bf0c      	ite	eq
 80017fe:	2407      	moveq	r4, #7
 8001800:	2408      	movne	r4, #8
 8001802:	fa04 f40e 	lsl.w	r4, r4, lr
 8001806:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001808:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 800180a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800180c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001810:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001812:	bf54      	ite	pl
 8001814:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001816:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800181a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800181c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800181e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001820:	bf54      	ite	pl
 8001822:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001824:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001828:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800182a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800182e:	bf54      	ite	pl
 8001830:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001832:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001836:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001838:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800183c:	bf54      	ite	pl
 800183e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001840:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001844:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	3301      	adds	r3, #1
 8001848:	2b10      	cmp	r3, #16
 800184a:	f47f af43 	bne.w	80016d4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800184e:	b003      	add	sp, #12
 8001850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001854:	4654      	mov	r4, sl
 8001856:	e7d4      	b.n	8001802 <HAL_GPIO_Init+0x13a>
 8001858:	2401      	movs	r4, #1
 800185a:	e7d2      	b.n	8001802 <HAL_GPIO_Init+0x13a>
 800185c:	2402      	movs	r4, #2
 800185e:	e7d0      	b.n	8001802 <HAL_GPIO_Init+0x13a>
 8001860:	2403      	movs	r4, #3
 8001862:	e7ce      	b.n	8001802 <HAL_GPIO_Init+0x13a>
 8001864:	2404      	movs	r4, #4
 8001866:	e7cc      	b.n	8001802 <HAL_GPIO_Init+0x13a>
 8001868:	2405      	movs	r4, #5
 800186a:	e7ca      	b.n	8001802 <HAL_GPIO_Init+0x13a>
 800186c:	2406      	movs	r4, #6
 800186e:	e7c8      	b.n	8001802 <HAL_GPIO_Init+0x13a>
 8001870:	40013c00 	.word	0x40013c00
 8001874:	40020000 	.word	0x40020000
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800187c:	6903      	ldr	r3, [r0, #16]
 800187e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001880:	bf14      	ite	ne
 8001882:	2001      	movne	r0, #1
 8001884:	2000      	moveq	r0, #0
 8001886:	4770      	bx	lr

08001888 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001888:	b10a      	cbz	r2, 800188e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188a:	6181      	str	r1, [r0, #24]
  }
}
 800188c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188e:	0409      	lsls	r1, r1, #16
 8001890:	e7fb      	b.n	800188a <HAL_GPIO_WritePin+0x2>
	...

08001894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	4604      	mov	r4, r0
 800189a:	b340      	cbz	r0, 80018ee <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189c:	6803      	ldr	r3, [r0, #0]
 800189e:	07dd      	lsls	r5, r3, #31
 80018a0:	d410      	bmi.n	80018c4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	0798      	lsls	r0, r3, #30
 80018a6:	d45e      	bmi.n	8001966 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	071a      	lsls	r2, r3, #28
 80018ac:	f100 80a0 	bmi.w	80019f0 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	075b      	lsls	r3, r3, #29
 80018b4:	f100 80c0 	bmi.w	8001a38 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b8:	69a0      	ldr	r0, [r4, #24]
 80018ba:	2800      	cmp	r0, #0
 80018bc:	f040 8128 	bne.w	8001b10 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80018c0:	2000      	movs	r0, #0
 80018c2:	e02b      	b.n	800191c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c4:	4b8f      	ldr	r3, [pc, #572]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	f002 020c 	and.w	r2, r2, #12
 80018cc:	2a04      	cmp	r2, #4
 80018ce:	d007      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d6:	2a08      	cmp	r2, #8
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	0251      	lsls	r1, r2, #9
 80018de:	d508      	bpl.n	80018f2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	039a      	lsls	r2, r3, #14
 80018e6:	d5dc      	bpl.n	80018a2 <HAL_RCC_OscConfig+0xe>
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1d9      	bne.n	80018a2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	6862      	ldr	r2, [r4, #4]
 80018f4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80018f8:	d113      	bne.n	8001922 <HAL_RCC_OscConfig+0x8e>
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001900:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001902:	f7ff fcad 	bl	8001260 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4e7f      	ldr	r6, [pc, #508]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001908:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	6833      	ldr	r3, [r6, #0]
 800190c:	039b      	lsls	r3, r3, #14
 800190e:	d4c8      	bmi.n	80018a2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fca6 	bl	8001260 <HAL_GetTick>
 8001914:	1b40      	subs	r0, r0, r5
 8001916:	2864      	cmp	r0, #100	; 0x64
 8001918:	d9f7      	bls.n	800190a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800191a:	2003      	movs	r0, #3
}
 800191c:	b002      	add	sp, #8
 800191e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	4d78      	ldr	r5, [pc, #480]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001924:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	d107      	bne.n	800193c <HAL_RCC_OscConfig+0xa8>
 800192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001930:	602b      	str	r3, [r5, #0]
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800193a:	e7e2      	b.n	8001902 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001940:	602b      	str	r3, [r5, #0]
 8001942:	682b      	ldr	r3, [r5, #0]
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800194a:	2a00      	cmp	r2, #0
 800194c:	d1d9      	bne.n	8001902 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800194e:	f7ff fc87 	bl	8001260 <HAL_GetTick>
 8001952:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	039f      	lsls	r7, r3, #14
 8001958:	d5a3      	bpl.n	80018a2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195a:	f7ff fc81 	bl	8001260 <HAL_GetTick>
 800195e:	1b80      	subs	r0, r0, r6
 8001960:	2864      	cmp	r0, #100	; 0x64
 8001962:	d9f7      	bls.n	8001954 <HAL_RCC_OscConfig+0xc0>
 8001964:	e7d9      	b.n	800191a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	f012 0f0c 	tst.w	r2, #12
 800196e:	d007      	beq.n	8001980 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001976:	2a08      	cmp	r2, #8
 8001978:	d111      	bne.n	800199e <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	025e      	lsls	r6, r3, #9
 800197e:	d40e      	bmi.n	800199e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001980:	4a60      	ldr	r2, [pc, #384]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001982:	6813      	ldr	r3, [r2, #0]
 8001984:	079d      	lsls	r5, r3, #30
 8001986:	d502      	bpl.n	800198e <HAL_RCC_OscConfig+0xfa>
 8001988:	68e3      	ldr	r3, [r4, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d1af      	bne.n	80018ee <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	6813      	ldr	r3, [r2, #0]
 8001990:	6921      	ldr	r1, [r4, #16]
 8001992:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001996:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800199a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199c:	e784      	b.n	80018a8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800199e:	68e2      	ldr	r2, [r4, #12]
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_OscConfig+0x274>)
 80019a2:	b1b2      	cbz	r2, 80019d2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019a8:	f7ff fc5a 	bl	8001260 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	4d55      	ldr	r5, [pc, #340]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80019ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	0798      	lsls	r0, r3, #30
 80019b4:	d507      	bpl.n	80019c6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	682b      	ldr	r3, [r5, #0]
 80019b8:	6922      	ldr	r2, [r4, #16]
 80019ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019c2:	602b      	str	r3, [r5, #0]
 80019c4:	e770      	b.n	80018a8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c6:	f7ff fc4b 	bl	8001260 <HAL_GetTick>
 80019ca:	1b80      	subs	r0, r0, r6
 80019cc:	2802      	cmp	r0, #2
 80019ce:	d9ef      	bls.n	80019b0 <HAL_RCC_OscConfig+0x11c>
 80019d0:	e7a3      	b.n	800191a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80019d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019d4:	f7ff fc44 	bl	8001260 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d8:	4e4a      	ldr	r6, [pc, #296]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80019da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019dc:	6833      	ldr	r3, [r6, #0]
 80019de:	0799      	lsls	r1, r3, #30
 80019e0:	f57f af62 	bpl.w	80018a8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff fc3c 	bl	8001260 <HAL_GetTick>
 80019e8:	1b40      	subs	r0, r0, r5
 80019ea:	2802      	cmp	r0, #2
 80019ec:	d9f6      	bls.n	80019dc <HAL_RCC_OscConfig+0x148>
 80019ee:	e794      	b.n	800191a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f0:	6962      	ldr	r2, [r4, #20]
 80019f2:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <HAL_RCC_OscConfig+0x274>)
 80019f4:	b182      	cbz	r2, 8001a18 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80019f6:	2201      	movs	r2, #1
 80019f8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80019fc:	f7ff fc30 	bl	8001260 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a00:	4e40      	ldr	r6, [pc, #256]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001a02:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a04:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001a06:	079f      	lsls	r7, r3, #30
 8001a08:	f53f af52 	bmi.w	80018b0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fc28 	bl	8001260 <HAL_GetTick>
 8001a10:	1b40      	subs	r0, r0, r5
 8001a12:	2802      	cmp	r0, #2
 8001a14:	d9f6      	bls.n	8001a04 <HAL_RCC_OscConfig+0x170>
 8001a16:	e780      	b.n	800191a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001a18:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fc20 	bl	8001260 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4e38      	ldr	r6, [pc, #224]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001a22:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001a26:	0798      	lsls	r0, r3, #30
 8001a28:	f57f af42 	bpl.w	80018b0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fc18 	bl	8001260 <HAL_GetTick>
 8001a30:	1b40      	subs	r0, r0, r5
 8001a32:	2802      	cmp	r0, #2
 8001a34:	d9f6      	bls.n	8001a24 <HAL_RCC_OscConfig+0x190>
 8001a36:	e770      	b.n	800191a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a38:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001a40:	d128      	bne.n	8001a94 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	9201      	str	r2, [sp, #4]
 8001a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a56:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4d2c      	ldr	r5, [pc, #176]	; (8001b0c <HAL_RCC_OscConfig+0x278>)
 8001a5a:	682b      	ldr	r3, [r5, #0]
 8001a5c:	05d9      	lsls	r1, r3, #23
 8001a5e:	d51b      	bpl.n	8001a98 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	68a3      	ldr	r3, [r4, #8]
 8001a62:	4d28      	ldr	r5, [pc, #160]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d127      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x224>
 8001a68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001a70:	f7ff fbf6 	bl	8001260 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	4e23      	ldr	r6, [pc, #140]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001a76:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001a7e:	079b      	lsls	r3, r3, #30
 8001a80:	d539      	bpl.n	8001af6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001a82:	2f00      	cmp	r7, #0
 8001a84:	f43f af18 	beq.w	80018b8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	e711      	b.n	80018b8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001a94:	2700      	movs	r7, #0
 8001a96:	e7df      	b.n	8001a58 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a98:	682b      	ldr	r3, [r5, #0]
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fbde 	bl	8001260 <HAL_GetTick>
 8001aa4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	682b      	ldr	r3, [r5, #0]
 8001aa8:	05da      	lsls	r2, r3, #23
 8001aaa:	d4d9      	bmi.n	8001a60 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aac:	f7ff fbd8 	bl	8001260 <HAL_GetTick>
 8001ab0:	1b80      	subs	r0, r0, r6
 8001ab2:	2802      	cmp	r0, #2
 8001ab4:	d9f7      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x212>
 8001ab6:	e730      	b.n	800191a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d104      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x232>
 8001abc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	672b      	str	r3, [r5, #112]	; 0x70
 8001ac4:	e7d0      	b.n	8001a68 <HAL_RCC_OscConfig+0x1d4>
 8001ac6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	672a      	str	r2, [r5, #112]	; 0x70
 8001ace:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ad0:	f022 0204 	bic.w	r2, r2, #4
 8001ad4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ca      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8001ada:	f7ff fbc1 	bl	8001260 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ae2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ae6:	0798      	lsls	r0, r3, #30
 8001ae8:	d5cb      	bpl.n	8001a82 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff fbb9 	bl	8001260 <HAL_GetTick>
 8001aee:	1b80      	subs	r0, r0, r6
 8001af0:	4540      	cmp	r0, r8
 8001af2:	d9f7      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x250>
 8001af4:	e711      	b.n	800191a <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fbb3 	bl	8001260 <HAL_GetTick>
 8001afa:	1b40      	subs	r0, r0, r5
 8001afc:	4540      	cmp	r0, r8
 8001afe:	d9bd      	bls.n	8001a7c <HAL_RCC_OscConfig+0x1e8>
 8001b00:	e70b      	b.n	800191a <HAL_RCC_OscConfig+0x86>
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	42470000 	.word	0x42470000
 8001b0c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b10:	4d36      	ldr	r5, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x358>)
 8001b12:	68ab      	ldr	r3, [r5, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d03d      	beq.n	8001b98 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_RCC_OscConfig+0x35c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b24:	d12b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8001b26:	f7ff fb9b 	bl	8001260 <HAL_GetTick>
 8001b2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	0199      	lsls	r1, r3, #6
 8001b30:	d41f      	bmi.n	8001b72 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b32:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b3a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b46:	0852      	lsrs	r2, r2, #1
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b4e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4d26      	ldr	r5, [pc, #152]	; (8001bec <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8001b54:	2201      	movs	r2, #1
 8001b56:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb82 	bl	8001260 <HAL_GetTick>
 8001b5c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	682b      	ldr	r3, [r5, #0]
 8001b60:	019a      	lsls	r2, r3, #6
 8001b62:	f53f aead 	bmi.w	80018c0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff fb7b 	bl	8001260 <HAL_GetTick>
 8001b6a:	1b00      	subs	r0, r0, r4
 8001b6c:	2802      	cmp	r0, #2
 8001b6e:	d9f6      	bls.n	8001b5e <HAL_RCC_OscConfig+0x2ca>
 8001b70:	e6d3      	b.n	800191a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fb75 	bl	8001260 <HAL_GetTick>
 8001b76:	1b80      	subs	r0, r0, r6
 8001b78:	2802      	cmp	r0, #2
 8001b7a:	d9d7      	bls.n	8001b2c <HAL_RCC_OscConfig+0x298>
 8001b7c:	e6cd      	b.n	800191a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fb6f 	bl	8001260 <HAL_GetTick>
 8001b82:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	019b      	lsls	r3, r3, #6
 8001b88:	f57f ae9a 	bpl.w	80018c0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff fb68 	bl	8001260 <HAL_GetTick>
 8001b90:	1b00      	subs	r0, r0, r4
 8001b92:	2802      	cmp	r0, #2
 8001b94:	d9f6      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
 8001b96:	e6c0      	b.n	800191a <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b98:	2801      	cmp	r0, #1
 8001b9a:	f43f aebf 	beq.w	800191c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8001b9e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba6:	4291      	cmp	r1, r2
 8001ba8:	f47f aea1 	bne.w	80018ee <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bac:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	428a      	cmp	r2, r1
 8001bb4:	f47f ae9b 	bne.w	80018ee <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bba:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001bc4:	f47f ae93 	bne.w	80018ee <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bca:	0852      	lsrs	r2, r2, #1
 8001bcc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001bd0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001bd6:	f47f ae8a 	bne.w	80018ee <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bdc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001be4:	f43f ae6c 	beq.w	80018c0 <HAL_RCC_OscConfig+0x2c>
 8001be8:	e681      	b.n	80018ee <HAL_RCC_OscConfig+0x5a>
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	42470000 	.word	0x42470000

08001bf4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf4:	4913      	ldr	r1, [pc, #76]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001bf6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf8:	688b      	ldr	r3, [r1, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d01c      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x48>
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11c      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c08:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c10:	bf14      	ite	ne
 8001c12:	480d      	ldrne	r0, [pc, #52]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c14:	480d      	ldreq	r0, [pc, #52]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c16:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c1a:	bf18      	it	ne
 8001c1c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c22:	fba1 0100 	umull	r0, r1, r1, r0
 8001c26:	f7fe fb2b 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c36:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c3a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x54>)
 8001c3e:	e7fc      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001c42:	e7fa      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x46>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	017d7840 	.word	0x017d7840
 8001c4c:	00f42400 	.word	0x00f42400

08001c50 <HAL_RCC_ClockConfig>:
{
 8001c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c54:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c56:	4604      	mov	r4, r0
 8001c58:	b910      	cbnz	r0, 8001c60 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1
}
 8001c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCC_ClockConfig+0x124>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f002 0207 	and.w	r2, r2, #7
 8001c68:	428a      	cmp	r2, r1
 8001c6a:	d328      	bcc.n	8001cbe <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	6822      	ldr	r2, [r4, #0]
 8001c6e:	0797      	lsls	r7, r2, #30
 8001c70:	d42d      	bmi.n	8001cce <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c72:	07d0      	lsls	r0, r2, #31
 8001c74:	d441      	bmi.n	8001cfa <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c76:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <HAL_RCC_ClockConfig+0x124>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f002 0207 	and.w	r2, r2, #7
 8001c7e:	42aa      	cmp	r2, r5
 8001c80:	d866      	bhi.n	8001d50 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	0751      	lsls	r1, r2, #29
 8001c86:	d46c      	bmi.n	8001d62 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	0713      	lsls	r3, r2, #28
 8001c8a:	d507      	bpl.n	8001c9c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8c:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <HAL_RCC_ClockConfig+0x128>)
 8001c8e:	6921      	ldr	r1, [r4, #16]
 8001c90:	6893      	ldr	r3, [r2, #8]
 8001c92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c9a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9c:	f7ff ffaa 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCC_ClockConfig+0x128>)
 8001ca2:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <HAL_RCC_ClockConfig+0x12c>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	40d8      	lsrs	r0, r3
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCC_ClockConfig+0x130>)
 8001cb0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCC_ClockConfig+0x134>)
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	f7ff fa89 	bl	80011cc <HAL_InitTick>
  return HAL_OK;
 8001cba:	2000      	movs	r0, #0
 8001cbc:	e7ce      	b.n	8001c5c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	b2ca      	uxtb	r2, r1
 8001cc0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	428b      	cmp	r3, r1
 8001cca:	d1c6      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xa>
 8001ccc:	e7ce      	b.n	8001c6c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_RCC_ClockConfig+0x128>)
 8001cd0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd4:	bf1e      	ittt	ne
 8001cd6:	6899      	ldrne	r1, [r3, #8]
 8001cd8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001cdc:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cde:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce0:	bf42      	ittt	mi
 8001ce2:	6899      	ldrmi	r1, [r3, #8]
 8001ce4:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001ce8:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cea:	4923      	ldr	r1, [pc, #140]	; (8001d78 <HAL_RCC_ClockConfig+0x128>)
 8001cec:	68a0      	ldr	r0, [r4, #8]
 8001cee:	688b      	ldr	r3, [r1, #8]
 8001cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf4:	4303      	orrs	r3, r0
 8001cf6:	608b      	str	r3, [r1, #8]
 8001cf8:	e7bb      	b.n	8001c72 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfa:	6862      	ldr	r2, [r4, #4]
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <HAL_RCC_ClockConfig+0x128>)
 8001cfe:	2a01      	cmp	r2, #1
 8001d00:	d11c      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	d0a7      	beq.n	8001c5a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0a:	4e1b      	ldr	r6, [pc, #108]	; (8001d78 <HAL_RCC_ClockConfig+0x128>)
 8001d0c:	68b3      	ldr	r3, [r6, #8]
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d16:	f7ff faa3 	bl	8001260 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d1e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d20:	68b3      	ldr	r3, [r6, #8]
 8001d22:	6862      	ldr	r2, [r4, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d2c:	d0a3      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2e:	f7ff fa97 	bl	8001260 <HAL_GetTick>
 8001d32:	1bc0      	subs	r0, r0, r7
 8001d34:	4540      	cmp	r0, r8
 8001d36:	d9f3      	bls.n	8001d20 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001d38:	2003      	movs	r0, #3
 8001d3a:	e78f      	b.n	8001c5c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3c:	1e91      	subs	r1, r2, #2
 8001d3e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d40:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d42:	d802      	bhi.n	8001d4a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d48:	e7de      	b.n	8001d08 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	f013 0f02 	tst.w	r3, #2
 8001d4e:	e7db      	b.n	8001d08 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d50:	b2ea      	uxtb	r2, r5
 8001d52:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	42ab      	cmp	r3, r5
 8001d5c:	f47f af7d 	bne.w	8001c5a <HAL_RCC_ClockConfig+0xa>
 8001d60:	e78f      	b.n	8001c82 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d62:	4905      	ldr	r1, [pc, #20]	; (8001d78 <HAL_RCC_ClockConfig+0x128>)
 8001d64:	68e0      	ldr	r0, [r4, #12]
 8001d66:	688b      	ldr	r3, [r1, #8]
 8001d68:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d6c:	4303      	orrs	r3, r0
 8001d6e:	608b      	str	r3, [r1, #8]
 8001d70:	e78a      	b.n	8001c88 <HAL_RCC_ClockConfig+0x38>
 8001d72:	bf00      	nop
 8001d74:	40023c00 	.word	0x40023c00
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	0800477f 	.word	0x0800477f
 8001d80:	20000004 	.word	0x20000004
 8001d84:	2000000c 	.word	0x2000000c

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	4a03      	ldr	r2, [pc, #12]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d96:	6810      	ldr	r0, [r2, #0]
}
 8001d98:	40d8      	lsrs	r0, r3
 8001d9a:	4770      	bx	lr
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	0800478f 	.word	0x0800478f
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x14>)
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001db6:	6810      	ldr	r0, [r2, #0]
}
 8001db8:	40d8      	lsrs	r0, r3
 8001dba:	4770      	bx	lr
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	0800478f 	.word	0x0800478f
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001dc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dcc:	461d      	mov	r5, r3
 8001dce:	4617      	mov	r7, r2
 8001dd0:	4688      	mov	r8, r1
 8001dd2:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001dd4:	f7ff fa44 	bl	8001260 <HAL_GetTick>
 8001dd8:	443d      	add	r5, r7
 8001dda:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001ddc:	f7ff fa40 	bl	8001260 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 8001de8:	4605      	mov	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001dea:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dec:	6832      	ldr	r2, [r6, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8001dee:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001df0:	6893      	ldr	r3, [r2, #8]
 8001df2:	ea38 0303 	bics.w	r3, r8, r3
 8001df6:	d001      	beq.n	8001dfc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8001df8:	2000      	movs	r0, #0
 8001dfa:	e02d      	b.n	8001e58 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8001dfc:	1c7b      	adds	r3, r7, #1
 8001dfe:	d0f7      	beq.n	8001df0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e00:	f7ff fa2e 	bl	8001260 <HAL_GetTick>
 8001e04:	1b40      	subs	r0, r0, r5
 8001e06:	42a0      	cmp	r0, r4
 8001e08:	d329      	bcc.n	8001e5e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e0a:	6833      	ldr	r3, [r6, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e12:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e14:	6872      	ldr	r2, [r6, #4]
 8001e16:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001e1a:	d10a      	bne.n	8001e32 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8001e1c:	68b2      	ldr	r2, [r6, #8]
 8001e1e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e22:	d002      	beq.n	8001e2a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e24:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001e28:	d103      	bne.n	8001e32 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e30:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e32:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001e34:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001e38:	d107      	bne.n	8001e4a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e48:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001e50:	2300      	movs	r3, #0
 8001e52:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        return HAL_TIMEOUT;
 8001e56:	2003      	movs	r0, #3
}
 8001e58:	b002      	add	sp, #8
 8001e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8001e5e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001e60:	2b00      	cmp	r3, #0
      count--;
 8001e62:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001e64:	bf08      	it	eq
 8001e66:	2400      	moveq	r4, #0
      count--;
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	e7bf      	b.n	8001dec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8001e6c:	20000004 	.word	0x20000004

08001e70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e72:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <SPI_EndRxTxTransaction+0x50>)
 8001e76:	6815      	ldr	r5, [r2, #0]
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <SPI_EndRxTxTransaction+0x54>)
 8001e7a:	fbb5 f5f2 	udiv	r5, r5, r2
 8001e7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e82:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e84:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e86:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e88:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001e8c:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e8e:	d10b      	bne.n	8001ea8 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e90:	460a      	mov	r2, r1
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	f7ff ff98 	bl	8001dc8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001e98:	b178      	cbz	r0, 8001eba <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e9c:	f043 0320 	orr.w	r3, r3, #32
 8001ea0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ea2:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8001ea8:	9b01      	ldr	r3, [sp, #4]
 8001eaa:	b133      	cbz	r3, 8001eba <SPI_EndRxTxTransaction+0x4a>
      count--;
 8001eac:	9b01      	ldr	r3, [sp, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	061b      	lsls	r3, r3, #24
 8001eb8:	d4f6      	bmi.n	8001ea8 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8001eba:	2000      	movs	r0, #0
 8001ebc:	e7f2      	b.n	8001ea4 <SPI_EndRxTxTransaction+0x34>
 8001ebe:	bf00      	nop
 8001ec0:	20000004 	.word	0x20000004
 8001ec4:	016e3600 	.word	0x016e3600

08001ec8 <HAL_SPI_Init>:
{
 8001ec8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001eca:	4604      	mov	r4, r0
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d055      	beq.n	8001f7c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ed0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d14e      	bne.n	8001f74 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ed6:	6842      	ldr	r2, [r0, #4]
 8001ed8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001edc:	d000      	beq.n	8001ee0 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ede:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ee4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001ee8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eec:	b923      	cbnz	r3, 8001ef8 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8001eee:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7ff f876 	bl	8000fe4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001ef8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001efa:	68a0      	ldr	r0, [r4, #8]
 8001efc:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001efe:	2302      	movs	r3, #2
 8001f00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001f04:	680b      	ldr	r3, [r1, #0]
 8001f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f0a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001f12:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001f16:	4303      	orrs	r3, r0
 8001f18:	68e0      	ldr	r0, [r4, #12]
 8001f1a:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8001f1e:	4303      	orrs	r3, r0
 8001f20:	6920      	ldr	r0, [r4, #16]
 8001f22:	f000 0002 	and.w	r0, r0, #2
 8001f26:	4303      	orrs	r3, r0
 8001f28:	6960      	ldr	r0, [r4, #20]
 8001f2a:	f000 0001 	and.w	r0, r0, #1
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001f34:	4303      	orrs	r3, r0
 8001f36:	69e0      	ldr	r0, [r4, #28]
 8001f38:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8001f3c:	4303      	orrs	r3, r0
 8001f3e:	6a20      	ldr	r0, [r4, #32]
 8001f40:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8001f44:	4303      	orrs	r3, r0
 8001f46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f48:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8001f4c:	4303      	orrs	r3, r0
 8001f4e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f52:	0c12      	lsrs	r2, r2, #16
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	f002 0204 	and.w	r2, r2, #4
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f60:	69cb      	ldr	r3, [r1, #28]
 8001f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f66:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f68:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001f6a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f6c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f6e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001f72:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f74:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f7a:	e7b1      	b.n	8001ee0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	e7f8      	b.n	8001f72 <HAL_SPI_Init+0xaa>

08001f80 <HAL_SPI_Transmit>:
{
 8001f80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f84:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001f86:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001f8a:	2b01      	cmp	r3, #1
{
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8001f92:	f000 80a1 	beq.w	80020d8 <HAL_SPI_Transmit+0x158>
 8001f96:	2301      	movs	r3, #1
 8001f98:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001f9c:	f7ff f960 	bl	8001260 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001fa0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001fa4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001fa6:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001fa8:	b2d8      	uxtb	r0, r3
 8001faa:	f040 8093 	bne.w	80020d4 <HAL_SPI_Transmit+0x154>
  if ((pData == NULL) || (Size == 0U))
 8001fae:	2d00      	cmp	r5, #0
 8001fb0:	d05e      	beq.n	8002070 <HAL_SPI_Transmit+0xf0>
 8001fb2:	2f00      	cmp	r7, #0
 8001fb4:	d05c      	beq.n	8002070 <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb6:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fb8:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fc0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001fca:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001fce:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fd0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001fd2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001fd6:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 8001fd8:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fda:	d107      	bne.n	8001fec <HAL_SPI_Transmit+0x6c>
    __HAL_SPI_DISABLE(hspi);
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fea:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fec:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fee:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ff0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001ff2:	bf5e      	ittt	pl
 8001ff4:	681a      	ldrpl	r2, [r3, #0]
 8001ff6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001ffa:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ffc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002000:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002002:	d141      	bne.n	8002088 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002004:	b10a      	cbz	r2, 800200a <HAL_SPI_Transmit+0x8a>
 8002006:	2f01      	cmp	r7, #1
 8002008:	d107      	bne.n	800201a <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800200a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800200e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002010:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002014:	3b01      	subs	r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800201a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800201c:	b29b      	uxth	r3, r3
 800201e:	b9a3      	cbnz	r3, 800204a <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002020:	4642      	mov	r2, r8
 8002022:	4631      	mov	r1, r6
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff ff23 	bl	8001e70 <SPI_EndRxTxTransaction>
 800202a:	2800      	cmp	r0, #0
 800202c:	d14f      	bne.n	80020ce <HAL_SPI_Transmit+0x14e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800202e:	68a3      	ldr	r3, [r4, #8]
 8002030:	b933      	cbnz	r3, 8002040 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	9201      	str	r2, [sp, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002040:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002042:	3800      	subs	r0, #0
 8002044:	bf18      	it	ne
 8002046:	2001      	movne	r0, #1
error:
 8002048:	e012      	b.n	8002070 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800204a:	6822      	ldr	r2, [r4, #0]
 800204c:	6893      	ldr	r3, [r2, #8]
 800204e:	0798      	lsls	r0, r3, #30
 8002050:	d505      	bpl.n	800205e <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002052:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002054:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002058:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800205a:	6323      	str	r3, [r4, #48]	; 0x30
 800205c:	e7d9      	b.n	8002012 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205e:	f7ff f8ff 	bl	8001260 <HAL_GetTick>
 8002062:	eba0 0008 	sub.w	r0, r0, r8
 8002066:	42b0      	cmp	r0, r6
 8002068:	d30b      	bcc.n	8002082 <HAL_SPI_Transmit+0x102>
 800206a:	1c71      	adds	r1, r6, #1
 800206c:	d0d5      	beq.n	800201a <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 800206e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002070:	2301      	movs	r3, #1
 8002072:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002076:	2300      	movs	r3, #0
 8002078:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800207c:	b002      	add	sp, #8
 800207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002082:	2e00      	cmp	r6, #0
 8002084:	d1c9      	bne.n	800201a <HAL_SPI_Transmit+0x9a>
 8002086:	e7f2      	b.n	800206e <HAL_SPI_Transmit+0xee>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002088:	b10a      	cbz	r2, 800208e <HAL_SPI_Transmit+0x10e>
 800208a:	2f01      	cmp	r7, #1
 800208c:	d108      	bne.n	80020a0 <HAL_SPI_Transmit+0x120>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800208e:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002090:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002092:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002094:	3301      	adds	r3, #1
 8002096:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002098:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800209a:	3b01      	subs	r3, #1
 800209c:	b29b      	uxth	r3, r3
 800209e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80020a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0bb      	beq.n	8002020 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	0792      	lsls	r2, r2, #30
 80020ae:	d502      	bpl.n	80020b6 <HAL_SPI_Transmit+0x136>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020b2:	7812      	ldrb	r2, [r2, #0]
 80020b4:	e7ec      	b.n	8002090 <HAL_SPI_Transmit+0x110>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020b6:	f7ff f8d3 	bl	8001260 <HAL_GetTick>
 80020ba:	eba0 0008 	sub.w	r0, r0, r8
 80020be:	42b0      	cmp	r0, r6
 80020c0:	d302      	bcc.n	80020c8 <HAL_SPI_Transmit+0x148>
 80020c2:	1c73      	adds	r3, r6, #1
 80020c4:	d0ec      	beq.n	80020a0 <HAL_SPI_Transmit+0x120>
 80020c6:	e7d2      	b.n	800206e <HAL_SPI_Transmit+0xee>
 80020c8:	2e00      	cmp	r6, #0
 80020ca:	d1e9      	bne.n	80020a0 <HAL_SPI_Transmit+0x120>
 80020cc:	e7cf      	b.n	800206e <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ce:	2320      	movs	r3, #32
 80020d0:	6563      	str	r3, [r4, #84]	; 0x54
 80020d2:	e7ac      	b.n	800202e <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 80020d4:	2002      	movs	r0, #2
 80020d6:	e7cb      	b.n	8002070 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 80020d8:	2002      	movs	r0, #2
 80020da:	e7cf      	b.n	800207c <HAL_SPI_Transmit+0xfc>

080020dc <HAL_SPI_TransmitReceive>:
{
 80020dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80020e0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80020e2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80020e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80020e8:	2b01      	cmp	r3, #1
{
 80020ea:	4604      	mov	r4, r0
 80020ec:	460d      	mov	r5, r1
 80020ee:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80020f0:	f000 80e6 	beq.w	80022c0 <HAL_SPI_TransmitReceive+0x1e4>
 80020f4:	2301      	movs	r3, #1
 80020f6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80020fa:	f7ff f8b1 	bl	8001260 <HAL_GetTick>
  tmp_state           = hspi->State;
 80020fe:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8002102:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002104:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002106:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8002108:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800210a:	d00a      	beq.n	8002122 <HAL_SPI_TransmitReceive+0x46>
 800210c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002110:	f040 80d4 	bne.w	80022bc <HAL_SPI_TransmitReceive+0x1e0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002114:	68a3      	ldr	r3, [r4, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 80d0 	bne.w	80022bc <HAL_SPI_TransmitReceive+0x1e0>
 800211c:	2904      	cmp	r1, #4
 800211e:	f040 80cd 	bne.w	80022bc <HAL_SPI_TransmitReceive+0x1e0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002122:	2d00      	cmp	r5, #0
 8002124:	d040      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0xcc>
 8002126:	f1b9 0f00 	cmp.w	r9, #0
 800212a:	d03d      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0xcc>
 800212c:	2e00      	cmp	r6, #0
 800212e:	d03b      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002130:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002134:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002138:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800213a:	bf1c      	itt	ne
 800213c:	2305      	movne	r3, #5
 800213e:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002142:	2300      	movs	r3, #0
 8002144:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8002146:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800214a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800214c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800214e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002150:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8002152:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002154:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8002156:	bf58      	it	pl
 8002158:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800215a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800215c:	bf58      	it	pl
 800215e:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002162:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002164:	bf58      	it	pl
 8002166:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002168:	68e1      	ldr	r1, [r4, #12]
 800216a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800216e:	d152      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002170:	b10a      	cbz	r2, 8002176 <HAL_SPI_TransmitReceive+0x9a>
 8002172:	2e01      	cmp	r6, #1
 8002174:	d107      	bne.n	8002186 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002176:	f835 2b02 	ldrh.w	r2, [r5], #2
 800217a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800217c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800217e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002180:	3b01      	subs	r3, #1
 8002182:	b29b      	uxth	r3, r3
 8002184:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002186:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002188:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800218a:	b29b      	uxth	r3, r3
 800218c:	b973      	cbnz	r3, 80021ac <HAL_SPI_TransmitReceive+0xd0>
 800218e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002190:	b29b      	uxth	r3, r3
 8002192:	b95b      	cbnz	r3, 80021ac <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002194:	4642      	mov	r2, r8
 8002196:	4639      	mov	r1, r7
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff fe69 	bl	8001e70 <SPI_EndRxTxTransaction>
 800219e:	2800      	cmp	r0, #0
 80021a0:	f000 8081 	beq.w	80022a6 <HAL_SPI_TransmitReceive+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021a4:	2320      	movs	r3, #32
 80021a6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
 80021aa:	e02b      	b.n	8002204 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021ac:	6821      	ldr	r1, [r4, #0]
 80021ae:	688b      	ldr	r3, [r1, #8]
 80021b0:	079e      	lsls	r6, r3, #30
 80021b2:	d50d      	bpl.n	80021d0 <HAL_SPI_TransmitReceive+0xf4>
 80021b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b153      	cbz	r3, 80021d0 <HAL_SPI_TransmitReceive+0xf4>
 80021ba:	b14d      	cbz	r5, 80021d0 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021be:	f833 2b02 	ldrh.w	r2, [r3], #2
 80021c2:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80021c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80021ce:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021d0:	688a      	ldr	r2, [r1, #8]
 80021d2:	f012 0201 	ands.w	r2, r2, #1
 80021d6:	d00c      	beq.n	80021f2 <HAL_SPI_TransmitReceive+0x116>
 80021d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b14b      	cbz	r3, 80021f2 <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021e0:	68c9      	ldr	r1, [r1, #12]
 80021e2:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021e6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80021e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80021f0:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021f2:	f7ff f835 	bl	8001260 <HAL_GetTick>
 80021f6:	eba0 0008 	sub.w	r0, r0, r8
 80021fa:	42b8      	cmp	r0, r7
 80021fc:	d3c4      	bcc.n	8002188 <HAL_SPI_TransmitReceive+0xac>
 80021fe:	1c78      	adds	r0, r7, #1
 8002200:	d0c2      	beq.n	8002188 <HAL_SPI_TransmitReceive+0xac>
        errorcode = HAL_TIMEOUT;
 8002202:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002204:	2301      	movs	r3, #1
 8002206:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800220a:	2300      	movs	r3, #0
 800220c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002210:	b003      	add	sp, #12
 8002212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002216:	b10a      	cbz	r2, 800221c <HAL_SPI_TransmitReceive+0x140>
 8002218:	2e01      	cmp	r6, #1
 800221a:	d108      	bne.n	800222e <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800221c:	782a      	ldrb	r2, [r5, #0]
 800221e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002220:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002222:	3301      	adds	r3, #1
 8002224:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002226:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002228:	3b01      	subs	r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800222e:	2501      	movs	r5, #1
 8002230:	e02d      	b.n	800228e <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	6893      	ldr	r3, [r2, #8]
 8002236:	0799      	lsls	r1, r3, #30
 8002238:	d50e      	bpl.n	8002258 <HAL_SPI_TransmitReceive+0x17c>
 800223a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800223c:	b29b      	uxth	r3, r3
 800223e:	b15b      	cbz	r3, 8002258 <HAL_SPI_TransmitReceive+0x17c>
 8002240:	b155      	cbz	r5, 8002258 <HAL_SPI_TransmitReceive+0x17c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002242:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002248:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800224a:	3301      	adds	r3, #1
 800224c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800224e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002250:	3b01      	subs	r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002256:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002258:	6822      	ldr	r2, [r4, #0]
 800225a:	6891      	ldr	r1, [r2, #8]
 800225c:	f011 0101 	ands.w	r1, r1, #1
 8002260:	d00d      	beq.n	800227e <HAL_SPI_TransmitReceive+0x1a2>
 8002262:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002264:	b29b      	uxth	r3, r3
 8002266:	b153      	cbz	r3, 800227e <HAL_SPI_TransmitReceive+0x1a2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800226a:	68d2      	ldr	r2, [r2, #12]
 800226c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800226e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002270:	3301      	adds	r3, #1
 8002272:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002274:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002276:	3b01      	subs	r3, #1
 8002278:	b29b      	uxth	r3, r3
 800227a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800227c:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800227e:	f7fe ffef 	bl	8001260 <HAL_GetTick>
 8002282:	eba0 0008 	sub.w	r0, r0, r8
 8002286:	42b8      	cmp	r0, r7
 8002288:	d30a      	bcc.n	80022a0 <HAL_SPI_TransmitReceive+0x1c4>
 800228a:	1c7b      	adds	r3, r7, #1
 800228c:	d1b9      	bne.n	8002202 <HAL_SPI_TransmitReceive+0x126>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1cd      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x156>
 8002296:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1c9      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x156>
 800229e:	e779      	b.n	8002194 <HAL_SPI_TransmitReceive+0xb8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022a0:	2f00      	cmp	r7, #0
 80022a2:	d1f4      	bne.n	800228e <HAL_SPI_TransmitReceive+0x1b2>
 80022a4:	e7ad      	b.n	8002202 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022a6:	68a3      	ldr	r3, [r4, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ab      	bne.n	8002204 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	9001      	str	r0, [sp, #4]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	9b01      	ldr	r3, [sp, #4]
 80022ba:	e7a3      	b.n	8002204 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 80022bc:	2002      	movs	r0, #2
 80022be:	e7a1      	b.n	8002204 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 80022c0:	2002      	movs	r0, #2
 80022c2:	e7a5      	b.n	8002210 <HAL_SPI_TransmitReceive+0x134>

080022c4 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c4:	6802      	ldr	r2, [r0, #0]
 80022c6:	68c1      	ldr	r1, [r0, #12]
 80022c8:	6913      	ldr	r3, [r2, #16]
 80022ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ce:	430b      	orrs	r3, r1
{
 80022d0:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d2:	6113      	str	r3, [r2, #16]
{
 80022d4:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022d6:	6883      	ldr	r3, [r0, #8]
 80022d8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80022da:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022dc:	4303      	orrs	r3, r0
 80022de:	6968      	ldr	r0, [r5, #20]
 80022e0:	4303      	orrs	r3, r0
 80022e2:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 80022e4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80022e8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ec:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80022ee:	430b      	orrs	r3, r1
 80022f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022f2:	6953      	ldr	r3, [r2, #20]
 80022f4:	69a9      	ldr	r1, [r5, #24]
 80022f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fa:	430b      	orrs	r3, r1
 80022fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022fe:	4b1f      	ldr	r3, [pc, #124]	; (800237c <UART_SetConfig+0xb8>)
 8002300:	429a      	cmp	r2, r3
 8002302:	d003      	beq.n	800230c <UART_SetConfig+0x48>
 8002304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002308:	429a      	cmp	r2, r3
 800230a:	d123      	bne.n	8002354 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800230c:	f7ff fd4c 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002310:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002312:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002318:	e9d5 4600 	ldrd	r4, r6, [r5]
 800231c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002320:	d11b      	bne.n	800235a <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002322:	19b2      	adds	r2, r6, r6
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	415b      	adcs	r3, r3
 800232a:	f7fd ffa9 	bl	8000280 <__aeabi_uldivmod>
 800232e:	2164      	movs	r1, #100	; 0x64
 8002330:	fbb0 f5f1 	udiv	r5, r0, r1
 8002334:	fb01 0315 	mls	r3, r1, r5, r0
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	3332      	adds	r3, #50	; 0x32
 800233c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002340:	f003 0207 	and.w	r2, r3, #7
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800234a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800234e:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002350:	60a3      	str	r3, [r4, #8]
  }
}
 8002352:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002354:	f7ff fd18 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8002358:	e7da      	b.n	8002310 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800235a:	00b2      	lsls	r2, r6, #2
 800235c:	0fb3      	lsrs	r3, r6, #30
 800235e:	f7fd ff8f 	bl	8000280 <__aeabi_uldivmod>
 8002362:	2264      	movs	r2, #100	; 0x64
 8002364:	fbb0 f1f2 	udiv	r1, r0, r2
 8002368:	fb02 0311 	mls	r3, r2, r1, r0
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	3332      	adds	r3, #50	; 0x32
 8002370:	fbb3 f3f2 	udiv	r3, r3, r2
 8002374:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002378:	e7ea      	b.n	8002350 <UART_SetConfig+0x8c>
 800237a:	bf00      	nop
 800237c:	40011000 	.word	0x40011000

08002380 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	4604      	mov	r4, r0
 8002384:	460e      	mov	r6, r1
 8002386:	4617      	mov	r7, r2
 8002388:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	ea36 0303 	bics.w	r3, r6, r3
 8002392:	d101      	bne.n	8002398 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002394:	2000      	movs	r0, #0
 8002396:	e028      	b.n	80023ea <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002398:	1c6b      	adds	r3, r5, #1
 800239a:	d0f7      	beq.n	800238c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800239c:	b125      	cbz	r5, 80023a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800239e:	f7fe ff5f 	bl	8001260 <HAL_GetTick>
 80023a2:	1bc0      	subs	r0, r0, r7
 80023a4:	4285      	cmp	r5, r0
 80023a6:	d2f0      	bcs.n	800238a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023a8:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023aa:	f102 030c 	add.w	r3, r2, #12
 80023ae:	e853 3f00 	ldrex	r3, [r3]
 80023b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b6:	320c      	adds	r2, #12
 80023b8:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80023bc:	6821      	ldr	r1, [r4, #0]
 80023be:	2800      	cmp	r0, #0
 80023c0:	d1f2      	bne.n	80023a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c2:	f101 0314 	add.w	r3, r1, #20
 80023c6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ce:	f101 0014 	add.w	r0, r1, #20
 80023d2:	e840 3200 	strex	r2, r3, [r0]
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	d1f3      	bne.n	80023c2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80023da:	2320      	movs	r3, #32
 80023dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80023e0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80023e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80023e8:	2003      	movs	r0, #3
}
 80023ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023ec <HAL_UART_Init>:
{
 80023ec:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023ee:	4604      	mov	r4, r0
 80023f0:	b340      	cbz	r0, 8002444 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023fa:	b91b      	cbnz	r3, 8002404 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002400:	f7fe fe26 	bl	8001050 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002404:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002406:	2324      	movs	r3, #36	; 0x24
 8002408:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800240c:	68d3      	ldr	r3, [r2, #12]
 800240e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002412:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff ff55 	bl	80022c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002422:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800242a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002432:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002434:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002436:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800243a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800243e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002442:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002444:	2001      	movs	r0, #1
 8002446:	e7fc      	b.n	8002442 <HAL_UART_Init+0x56>

08002448 <HAL_UART_Transmit>:
{
 8002448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800244a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800244c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8002450:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8002452:	2a20      	cmp	r2, #32
{
 8002454:	4604      	mov	r4, r0
 8002456:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002458:	d149      	bne.n	80024ee <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800245a:	2900      	cmp	r1, #0
 800245c:	d045      	beq.n	80024ea <HAL_UART_Transmit+0xa2>
 800245e:	2f00      	cmp	r7, #0
 8002460:	d043      	beq.n	80024ea <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8002462:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002466:	2a01      	cmp	r2, #1
 8002468:	d041      	beq.n	80024ee <HAL_UART_Transmit+0xa6>
 800246a:	2201      	movs	r2, #1
 800246c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002472:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002474:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002476:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800247a:	f7fe fef1 	bl	8001260 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800247e:	68a1      	ldr	r1, [r4, #8]
 8002480:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8002482:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002484:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002488:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800248a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800248c:	d103      	bne.n	8002496 <HAL_UART_Transmit+0x4e>
 800248e:	6921      	ldr	r1, [r4, #16]
 8002490:	b909      	cbnz	r1, 8002496 <HAL_UART_Transmit+0x4e>
 8002492:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002494:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8002496:	2100      	movs	r1, #0
 8002498:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800249c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800249e:	b289      	uxth	r1, r1
 80024a0:	b941      	cbnz	r1, 80024b4 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024a2:	2140      	movs	r1, #64	; 0x40
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ff6b 	bl	8002380 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80024aa:	b960      	cbnz	r0, 80024c6 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80024ac:	2320      	movs	r3, #32
 80024ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80024b2:	e009      	b.n	80024c8 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	4620      	mov	r0, r4
 80024b8:	e9cd 2300 	strd	r2, r3, [sp]
 80024bc:	f7ff ff60 	bl	8002380 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80024c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80024c4:	b110      	cbz	r0, 80024cc <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80024c6:	2003      	movs	r0, #3
}
 80024c8:	b003      	add	sp, #12
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024cc:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 80024ce:	b94e      	cbnz	r6, 80024e4 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024d0:	f835 1b02 	ldrh.w	r1, [r5], #2
 80024d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024d8:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 80024da:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80024dc:	3901      	subs	r1, #1
 80024de:	b289      	uxth	r1, r1
 80024e0:	84e1      	strh	r1, [r4, #38]	; 0x26
 80024e2:	e7db      	b.n	800249c <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024e4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80024e8:	e7f6      	b.n	80024d8 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80024ea:	2001      	movs	r0, #1
 80024ec:	e7ec      	b.n	80024c8 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80024ee:	2002      	movs	r0, #2
 80024f0:	e7ea      	b.n	80024c8 <HAL_UART_Transmit+0x80>
	...

080024f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80024f4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80024f6:	4903      	ldr	r1, [pc, #12]	; (8002504 <MX_FATFS_Init+0x10>)
 80024f8:	4803      	ldr	r0, [pc, #12]	; (8002508 <MX_FATFS_Init+0x14>)
 80024fa:	f001 fb95 	bl	8003c28 <FATFS_LinkDriver>
 80024fe:	4b03      	ldr	r3, [pc, #12]	; (800250c <MX_FATFS_Init+0x18>)
 8002500:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002502:	bd08      	pop	{r3, pc}
 8002504:	2001a8cc 	.word	0x2001a8cc
 8002508:	20000010 	.word	0x20000010
 800250c:	2001a8d0 	.word	0x2001a8d0

08002510 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8002510:	2000      	movs	r0, #0
 8002512:	4770      	bx	lr

08002514 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002514:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8002516:	f7fe f9d9 	bl	80008cc <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800251a:	b2c0      	uxtb	r0, r0
 800251c:	bd08      	pop	{r3, pc}

0800251e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800251e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8002520:	f7fe fa7e 	bl	8000a20 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8002524:	b2c0      	uxtb	r0, r0
 8002526:	bd08      	pop	{r3, pc}

08002528 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002528:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800252a:	f7fe fa83 	bl	8000a34 <SD_disk_read>
  /* USER CODE END READ */
}
 800252e:	b2c0      	uxtb	r0, r0
 8002530:	bd08      	pop	{r3, pc}

08002532 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002532:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8002534:	f7fe fac4 	bl	8000ac0 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8002538:	b2c0      	uxtb	r0, r0
 800253a:	bd08      	pop	{r3, pc}

0800253c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800253c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800253e:	f7fe fb17 	bl	8000b70 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8002542:	b2c0      	uxtb	r0, r0
 8002544:	bd08      	pop	{r3, pc}
	...

08002548 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <disk_status+0x10>)
 800254a:	181a      	adds	r2, r3, r0
 800254c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002550:	7a10      	ldrb	r0, [r2, #8]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4718      	bx	r3
 8002558:	2001aafc 	.word	0x2001aafc

0800255c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <disk_initialize+0x1c>)
 800255e:	5c1a      	ldrb	r2, [r3, r0]
 8002560:	b942      	cbnz	r2, 8002574 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8002562:	2201      	movs	r2, #1
 8002564:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002566:	181a      	adds	r2, r3, r0
 8002568:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800256c:	7a10      	ldrb	r0, [r2, #8]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4718      	bx	r3
  }
  return stat;
}
 8002574:	2000      	movs	r0, #0
 8002576:	4770      	bx	lr
 8002578:	2001aafc 	.word	0x2001aafc

0800257c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800257c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800257e:	4c05      	ldr	r4, [pc, #20]	; (8002594 <disk_read+0x18>)
 8002580:	1825      	adds	r5, r4, r0
 8002582:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002586:	6860      	ldr	r0, [r4, #4]
 8002588:	6884      	ldr	r4, [r0, #8]
 800258a:	7a28      	ldrb	r0, [r5, #8]
 800258c:	46a4      	mov	ip, r4
  return res;
}
 800258e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002590:	4760      	bx	ip
 8002592:	bf00      	nop
 8002594:	2001aafc 	.word	0x2001aafc

08002598 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002598:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800259a:	4c05      	ldr	r4, [pc, #20]	; (80025b0 <disk_write+0x18>)
 800259c:	1825      	adds	r5, r4, r0
 800259e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80025a2:	6860      	ldr	r0, [r4, #4]
 80025a4:	68c4      	ldr	r4, [r0, #12]
 80025a6:	7a28      	ldrb	r0, [r5, #8]
 80025a8:	46a4      	mov	ip, r4
  return res;
}
 80025aa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80025ac:	4760      	bx	ip
 80025ae:	bf00      	nop
 80025b0:	2001aafc 	.word	0x2001aafc

080025b4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <disk_ioctl+0x18>)
{
 80025b6:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80025b8:	181c      	adds	r4, r3, r0
 80025ba:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80025be:	7a20      	ldrb	r0, [r4, #8]
 80025c0:	685b      	ldr	r3, [r3, #4]
  return res;
}
 80025c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	4718      	bx	r3
 80025ca:	bf00      	nop
 80025cc:	2001aafc 	.word	0x2001aafc

080025d0 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 80025d0:	6800      	ldr	r0, [r0, #0]
 80025d2:	4770      	bx	lr

080025d4 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80025d4:	0a0b      	lsrs	r3, r1, #8
 80025d6:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80025d8:	7043      	strb	r3, [r0, #1]
 80025da:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80025dc:	0e09      	lsrs	r1, r1, #24
 80025de:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80025e0:	70c1      	strb	r1, [r0, #3]
}
 80025e2:	4770      	bx	lr

080025e4 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 80025e4:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 80025e6:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80025ea:	4290      	cmp	r0, r2
 80025ec:	d1fb      	bne.n	80025e6 <mem_set+0x2>
}
 80025ee:	4770      	bx	lr

080025f0 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 80025f0:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <chk_lock+0x70>)
 80025f2:	6813      	ldr	r3, [r2, #0]
{
 80025f4:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 80025f6:	b163      	cbz	r3, 8002612 <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80025f8:	6804      	ldr	r4, [r0, #0]
 80025fa:	429c      	cmp	r4, r3
 80025fc:	d107      	bne.n	800260e <chk_lock+0x1e>
 80025fe:	6854      	ldr	r4, [r2, #4]
 8002600:	6883      	ldr	r3, [r0, #8]
 8002602:	429c      	cmp	r4, r3
 8002604:	d103      	bne.n	800260e <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 8002606:	6894      	ldr	r4, [r2, #8]
 8002608:	6943      	ldr	r3, [r0, #20]
 800260a:	429c      	cmp	r4, r3
 800260c:	d020      	beq.n	8002650 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800260e:	2400      	movs	r4, #0
 8002610:	e000      	b.n	8002614 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8002612:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8002614:	6913      	ldr	r3, [r2, #16]
 8002616:	b1cb      	cbz	r3, 800264c <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002618:	6805      	ldr	r5, [r0, #0]
 800261a:	42ab      	cmp	r3, r5
 800261c:	d107      	bne.n	800262e <chk_lock+0x3e>
 800261e:	6955      	ldr	r5, [r2, #20]
 8002620:	6883      	ldr	r3, [r0, #8]
 8002622:	429d      	cmp	r5, r3
 8002624:	d103      	bne.n	800262e <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8002626:	6995      	ldr	r5, [r2, #24]
 8002628:	6943      	ldr	r3, [r0, #20]
 800262a:	429d      	cmp	r5, r3
 800262c:	d015      	beq.n	800265a <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800262e:	b96c      	cbnz	r4, 800264c <chk_lock+0x5c>
 8002630:	2902      	cmp	r1, #2
 8002632:	bf0c      	ite	eq
 8002634:	2000      	moveq	r0, #0
 8002636:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8002638:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800263a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800263e:	899b      	ldrh	r3, [r3, #12]
 8002640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002644:	bf14      	ite	ne
 8002646:	2000      	movne	r0, #0
 8002648:	2010      	moveq	r0, #16
 800264a:	e7f5      	b.n	8002638 <chk_lock+0x48>
 800264c:	2000      	movs	r0, #0
 800264e:	e7f3      	b.n	8002638 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002650:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002652:	2900      	cmp	r1, #0
 8002654:	d0f1      	beq.n	800263a <chk_lock+0x4a>
 8002656:	2010      	movs	r0, #16
 8002658:	e7ee      	b.n	8002638 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800265a:	2301      	movs	r3, #1
 800265c:	e7f9      	b.n	8002652 <chk_lock+0x62>
 800265e:	bf00      	nop
 8002660:	2001a8d8 	.word	0x2001a8d8

08002664 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8002664:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <inc_lock+0x80>)
{
 8002666:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8002668:	6813      	ldr	r3, [r2, #0]
 800266a:	6806      	ldr	r6, [r0, #0]
 800266c:	429e      	cmp	r6, r3
 800266e:	d107      	bne.n	8002680 <inc_lock+0x1c>
 8002670:	6855      	ldr	r5, [r2, #4]
 8002672:	6884      	ldr	r4, [r0, #8]
 8002674:	42a5      	cmp	r5, r4
 8002676:	d103      	bne.n	8002680 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8002678:	6945      	ldr	r5, [r0, #20]
 800267a:	6894      	ldr	r4, [r2, #8]
 800267c:	42a5      	cmp	r5, r4
 800267e:	d022      	beq.n	80026c6 <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
 8002680:	6914      	ldr	r4, [r2, #16]
 8002682:	42b4      	cmp	r4, r6
 8002684:	d107      	bne.n	8002696 <inc_lock+0x32>
 8002686:	6957      	ldr	r7, [r2, #20]
 8002688:	6885      	ldr	r5, [r0, #8]
 800268a:	42af      	cmp	r7, r5
 800268c:	d103      	bne.n	8002696 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 800268e:	6997      	ldr	r7, [r2, #24]
 8002690:	6945      	ldr	r5, [r0, #20]
 8002692:	42af      	cmp	r7, r5
 8002694:	d021      	beq.n	80026da <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002696:	b10b      	cbz	r3, 800269c <inc_lock+0x38>
 8002698:	bb0c      	cbnz	r4, 80026de <inc_lock+0x7a>
 800269a:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 800269c:	011d      	lsls	r5, r3, #4
 800269e:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 80026a2:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 80026a4:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 80026a6:	6940      	ldr	r0, [r0, #20]
 80026a8:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 80026aa:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 80026ac:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 80026ae:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80026b0:	b981      	cbnz	r1, 80026d4 <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80026b2:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80026b6:	8989      	ldrh	r1, [r1, #12]
 80026b8:	3101      	adds	r1, #1
 80026ba:	b289      	uxth	r1, r1
 80026bc:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 80026c0:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80026c2:	8191      	strh	r1, [r2, #12]
}
 80026c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80026c6:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80026c8:	2900      	cmp	r1, #0
 80026ca:	d0f2      	beq.n	80026b2 <inc_lock+0x4e>
 80026cc:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80026d0:	8989      	ldrh	r1, [r1, #12]
 80026d2:	b921      	cbnz	r1, 80026de <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80026d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d8:	e7f0      	b.n	80026bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80026da:	2301      	movs	r3, #1
 80026dc:	e7f4      	b.n	80026c8 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80026de:	2000      	movs	r0, #0
 80026e0:	e7f0      	b.n	80026c4 <inc_lock+0x60>
 80026e2:	bf00      	nop
 80026e4:	2001a8d8 	.word	0x2001a8d8

080026e8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80026e8:	3801      	subs	r0, #1
 80026ea:	2801      	cmp	r0, #1
 80026ec:	d815      	bhi.n	800271a <dec_lock+0x32>
		n = Files[i].ctr;
 80026ee:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <dec_lock+0x38>)
 80026f0:	0101      	lsls	r1, r0, #4
 80026f2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80026f6:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80026f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fc:	d104      	bne.n	8002708 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 80026fe:	2300      	movs	r3, #0
 8002700:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002702:	2000      	movs	r0, #0
 8002704:	5050      	str	r0, [r2, r1]
 8002706:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0fa      	beq.n	8002702 <dec_lock+0x1a>
 800270c:	3b01      	subs	r3, #1
 800270e:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8002710:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f5      	beq.n	8002702 <dec_lock+0x1a>
		res = FR_OK;
 8002716:	2000      	movs	r0, #0
 8002718:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800271a:	2002      	movs	r0, #2
	}
	return res;
}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2001a8d8 	.word	0x2001a8d8

08002724 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <clear_lock+0x18>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4290      	cmp	r0, r2
 800272a:	bf04      	itt	eq
 800272c:	2200      	moveq	r2, #0
 800272e:	601a      	streq	r2, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	4290      	cmp	r0, r2
 8002734:	bf04      	itt	eq
 8002736:	2200      	moveq	r2, #0
 8002738:	611a      	streq	r2, [r3, #16]
	}
}
 800273a:	4770      	bx	lr
 800273c:	2001a8d8 	.word	0x2001a8d8

08002740 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002740:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
 8002742:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002744:	3b02      	subs	r3, #2
 8002746:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8002748:	bf83      	ittte	hi
 800274a:	8943      	ldrhhi	r3, [r0, #10]
 800274c:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
 800274e:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002752:	2000      	movls	r0, #0
}
 8002754:	4770      	bx	lr

08002756 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002756:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	FATFS *fs = fp->obj.fs;
 8002758:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800275a:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800275c:	8990      	ldrh	r0, [r2, #12]
 800275e:	8952      	ldrh	r2, [r2, #10]
 8002760:	fbb1 f1f0 	udiv	r1, r1, r0
 8002764:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002768:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800276a:	b130      	cbz	r0, 800277a <clmt_clust+0x24>
		if (cl < ncl) break;	/* In this fragment? */
 800276c:	4281      	cmp	r1, r0
 800276e:	d302      	bcc.n	8002776 <clmt_clust+0x20>
		cl -= ncl; tbl++;		/* Next fragment */
 8002770:	1a09      	subs	r1, r1, r0
 8002772:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002774:	e7f8      	b.n	8002768 <clmt_clust+0x12>
	}
	return cl + *tbl;	/* Return the cluster number */
 8002776:	6858      	ldr	r0, [r3, #4]
 8002778:	4408      	add	r0, r1
}
 800277a:	4770      	bx	lr

0800277c <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 800277c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002780:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8002782:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
 8002784:	7803      	ldrb	r3, [r0, #0]
 8002786:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002788:	bf01      	itttt	eq
 800278a:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800278c:	750a      	strbeq	r2, [r1, #20]
 800278e:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8002790:	754a      	strbeq	r2, [r1, #21]
	}
}
 8002792:	4770      	bx	lr

08002794 <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
 8002794:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8002798:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800279a:	01d3      	lsls	r3, r2, #7
 800279c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80027a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027a4:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
 80027a8:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80027aa:	b2da      	uxtb	r2, r3
	} while (--n);
 80027ac:	d1f5      	bne.n	800279a <sum_sfn+0x6>
	return sum;
}
 80027ae:	4610      	mov	r0, r2
 80027b0:	4770      	bx	lr

080027b2 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80027b2:	6802      	ldr	r2, [r0, #0]
{
 80027b4:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80027b6:	b152      	cbz	r2, 80027ce <get_ldnumber+0x1c>
 80027b8:	4611      	mov	r1, r2
 80027ba:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80027bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027c0:	2c1f      	cmp	r4, #31
 80027c2:	d90c      	bls.n	80027de <get_ldnumber+0x2c>
 80027c4:	2c3a      	cmp	r4, #58	; 0x3a
 80027c6:	d1f8      	bne.n	80027ba <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80027c8:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80027ca:	428b      	cmp	r3, r1
 80027cc:	d002      	beq.n	80027d4 <get_ldnumber+0x22>
	int vol = -1;
 80027ce:	f04f 30ff 	mov.w	r0, #4294967295
 80027d2:	e005      	b.n	80027e0 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80027d4:	7812      	ldrb	r2, [r2, #0]
 80027d6:	2a30      	cmp	r2, #48	; 0x30
 80027d8:	d1f9      	bne.n	80027ce <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 80027da:	3301      	adds	r3, #1
 80027dc:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80027de:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 80027e0:	bd10      	pop	{r4, pc}

080027e2 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80027e2:	b538      	push	{r3, r4, r5, lr}
 80027e4:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80027e6:	4604      	mov	r4, r0
 80027e8:	b918      	cbnz	r0, 80027f2 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80027ea:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80027ec:	2300      	movs	r3, #0
 80027ee:	602b      	str	r3, [r5, #0]
	return res;
}
 80027f0:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80027f2:	6803      	ldr	r3, [r0, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f8      	beq.n	80027ea <validate+0x8>
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	d0f5      	beq.n	80027ea <validate+0x8>
 80027fe:	8881      	ldrh	r1, [r0, #4]
 8002800:	88da      	ldrh	r2, [r3, #6]
 8002802:	4291      	cmp	r1, r2
 8002804:	d1f1      	bne.n	80027ea <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002806:	7858      	ldrb	r0, [r3, #1]
 8002808:	f7ff fe9e 	bl	8002548 <disk_status>
 800280c:	f010 0001 	ands.w	r0, r0, #1
 8002810:	d1eb      	bne.n	80027ea <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	e7eb      	b.n	80027ee <validate+0xc>

08002816 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002816:	3801      	subs	r0, #1
 8002818:	440a      	add	r2, r1
			*d++ = *s++;
 800281a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800281e:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8002822:	4291      	cmp	r1, r2
 8002824:	d1f9      	bne.n	800281a <mem_cpy.part.0+0x4>
}
 8002826:	4770      	bx	lr

08002828 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8002828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 800282c:	6b46      	ldr	r6, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800282e:	f100 0838 	add.w	r8, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8002832:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002834:	2301      	movs	r3, #1
 8002836:	7840      	ldrb	r0, [r0, #1]
 8002838:	4632      	mov	r2, r6
 800283a:	4641      	mov	r1, r8
 800283c:	f7ff feac 	bl	8002598 <disk_write>
 8002840:	4605      	mov	r5, r0
 8002842:	b9a8      	cbnz	r0, 8002870 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002846:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8002848:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800284a:	1af3      	subs	r3, r6, r3
 800284c:	4293      	cmp	r3, r2
 800284e:	d202      	bcs.n	8002856 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002850:	78a7      	ldrb	r7, [r4, #2]
 8002852:	2f01      	cmp	r7, #1
 8002854:	d802      	bhi.n	800285c <sync_window.part.0+0x34>
}
 8002856:	4628      	mov	r0, r5
 8002858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 800285c:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 800285e:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8002860:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002862:	4632      	mov	r2, r6
 8002864:	2301      	movs	r3, #1
 8002866:	4641      	mov	r1, r8
 8002868:	f7ff fe96 	bl	8002598 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800286c:	3f01      	subs	r7, #1
 800286e:	e7f0      	b.n	8002852 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 8002870:	2501      	movs	r5, #1
 8002872:	e7f0      	b.n	8002856 <sync_window.part.0+0x2e>

08002874 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002874:	78c3      	ldrb	r3, [r0, #3]
 8002876:	b10b      	cbz	r3, 800287c <sync_window+0x8>
 8002878:	f7ff bfd6 	b.w	8002828 <sync_window.part.0>
}
 800287c:	4618      	mov	r0, r3
 800287e:	4770      	bx	lr

08002880 <move_window>:
{
 8002880:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002882:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002884:	428b      	cmp	r3, r1
{
 8002886:	4605      	mov	r5, r0
 8002888:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800288a:	d010      	beq.n	80028ae <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 800288c:	f7ff fff2 	bl	8002874 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002890:	b960      	cbnz	r0, 80028ac <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002892:	4622      	mov	r2, r4
 8002894:	7868      	ldrb	r0, [r5, #1]
 8002896:	2301      	movs	r3, #1
 8002898:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800289c:	f7ff fe6e 	bl	800257c <disk_read>
				res = FR_DISK_ERR;
 80028a0:	2800      	cmp	r0, #0
 80028a2:	bf1c      	itt	ne
 80028a4:	f04f 34ff 	movne.w	r4, #4294967295
 80028a8:	2001      	movne	r0, #1
			fs->winsect = sector;
 80028aa:	636c      	str	r4, [r5, #52]	; 0x34
}
 80028ac:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80028ae:	2000      	movs	r0, #0
 80028b0:	e7fc      	b.n	80028ac <move_window+0x2c>
	...

080028b4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80028b4:	2300      	movs	r3, #0
{
 80028b6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80028b8:	70c3      	strb	r3, [r0, #3]
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	6343      	str	r3, [r0, #52]	; 0x34
{
 80028c0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80028c2:	f7ff ffdd 	bl	8002880 <move_window>
 80028c6:	4603      	mov	r3, r0
 80028c8:	bb18      	cbnz	r0, 8002912 <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80028ca:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
 80028ce:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80028d2:	4291      	cmp	r1, r2
 80028d4:	d11f      	bne.n	8002916 <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80028d6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80028da:	2ae9      	cmp	r2, #233	; 0xe9
 80028dc:	d005      	beq.n	80028ea <check_fs+0x36>
 80028de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028e0:	490f      	ldr	r1, [pc, #60]	; (8002920 <check_fs+0x6c>)
 80028e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80028e6:	428a      	cmp	r2, r1
 80028e8:	d117      	bne.n	800291a <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80028ea:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 80028ee:	f7ff fe6f 	bl	80025d0 <ld_dword>
 80028f2:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <check_fs+0x70>)
 80028f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80028f8:	4290      	cmp	r0, r2
 80028fa:	d008      	beq.n	800290e <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80028fc:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8002900:	f7ff fe66 	bl	80025d0 <ld_dword>
	return 2;
 8002904:	f102 524c 	add.w	r2, r2, #855638016	; 0x33000000
 8002908:	4290      	cmp	r0, r2
 800290a:	bf18      	it	ne
 800290c:	2302      	movne	r3, #2
}
 800290e:	4618      	mov	r0, r3
 8002910:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002912:	2304      	movs	r3, #4
 8002914:	e7fb      	b.n	800290e <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002916:	2303      	movs	r3, #3
 8002918:	e7f9      	b.n	800290e <check_fs+0x5a>
	return 2;
 800291a:	2302      	movs	r3, #2
 800291c:	e7f7      	b.n	800290e <check_fs+0x5a>
 800291e:	bf00      	nop
 8002920:	009000eb 	.word	0x009000eb
 8002924:	00544146 	.word	0x00544146

08002928 <find_volume>:
{
 8002928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 800292c:	2300      	movs	r3, #0
{
 800292e:	b085      	sub	sp, #20
	*rfs = 0;
 8002930:	600b      	str	r3, [r1, #0]
{
 8002932:	460f      	mov	r7, r1
 8002934:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8002936:	f7ff ff3c 	bl	80027b2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800293a:	1e06      	subs	r6, r0, #0
 800293c:	f2c0 8134 	blt.w	8002ba8 <find_volume+0x280>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002940:	4b9c      	ldr	r3, [pc, #624]	; (8002bb4 <find_volume+0x28c>)
 8002942:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002946:	2c00      	cmp	r4, #0
 8002948:	f000 8130 	beq.w	8002bac <find_volume+0x284>
	*rfs = fs;							/* Return pointer to the file system object */
 800294c:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800294e:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002950:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002954:	b16b      	cbz	r3, 8002972 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8002956:	7860      	ldrb	r0, [r4, #1]
 8002958:	f7ff fdf6 	bl	8002548 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800295c:	07c1      	lsls	r1, r0, #31
 800295e:	d408      	bmi.n	8002972 <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002960:	b11d      	cbz	r5, 800296a <find_volume+0x42>
 8002962:	f010 0504 	ands.w	r5, r0, #4
 8002966:	d000      	beq.n	800296a <find_volume+0x42>
				return FR_WRITE_PROTECTED;
 8002968:	250a      	movs	r5, #10
}
 800296a:	4628      	mov	r0, r5
 800296c:	b005      	add	sp, #20
 800296e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8002972:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002974:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8002976:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002978:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800297a:	f7ff fdef 	bl	800255c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800297e:	07c2      	lsls	r2, r0, #31
 8002980:	f100 8116 	bmi.w	8002bb0 <find_volume+0x288>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002984:	b10d      	cbz	r5, 800298a <find_volume+0x62>
 8002986:	0743      	lsls	r3, r0, #29
 8002988:	d4ee      	bmi.n	8002968 <find_volume+0x40>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800298a:	7860      	ldrb	r0, [r4, #1]
 800298c:	f104 020c 	add.w	r2, r4, #12
 8002990:	2102      	movs	r1, #2
 8002992:	f7ff fe0f 	bl	80025b4 <disk_ioctl>
 8002996:	4605      	mov	r5, r0
 8002998:	b108      	cbz	r0, 800299e <find_volume+0x76>
 800299a:	2501      	movs	r5, #1
 800299c:	e7e5      	b.n	800296a <find_volume+0x42>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800299e:	89a3      	ldrh	r3, [r4, #12]
 80029a0:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80029a4:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 80029a8:	d8f7      	bhi.n	800299a <find_volume+0x72>
 80029aa:	1e5a      	subs	r2, r3, #1
 80029ac:	421a      	tst	r2, r3
 80029ae:	d1f4      	bne.n	800299a <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80029b0:	4601      	mov	r1, r0
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff ff7e 	bl	80028b4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80029b8:	2802      	cmp	r0, #2
 80029ba:	f040 80d8 	bne.w	8002b6e <find_volume+0x246>
 80029be:	466e      	mov	r6, sp
 80029c0:	f504 73ff 	add.w	r3, r4, #510	; 0x1fe
 80029c4:	f204 213e 	addw	r1, r4, #574	; 0x23e
 80029c8:	4632      	mov	r2, r6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80029ca:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 80029ce:	b110      	cbz	r0, 80029d6 <find_volume+0xae>
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fdfd 	bl	80025d0 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80029d6:	3310      	adds	r3, #16
 80029d8:	428b      	cmp	r3, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80029da:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80029de:	d1f4      	bne.n	80029ca <find_volume+0xa2>
 80029e0:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
 80029e4:	f856 7b04 	ldr.w	r7, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80029e8:	2f00      	cmp	r7, #0
 80029ea:	f000 80b6 	beq.w	8002b5a <find_volume+0x232>
 80029ee:	4639      	mov	r1, r7
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff ff5f 	bl	80028b4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80029f6:	2801      	cmp	r0, #1
 80029f8:	f200 80b0 	bhi.w	8002b5c <find_volume+0x234>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80029fc:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 8002a00:	f8b4 3043 	ldrh.w	r3, [r4, #67]	; 0x43
 8002a04:	454b      	cmp	r3, r9
 8002a06:	f040 80b7 	bne.w	8002b78 <find_volume+0x250>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002a0a:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002a0e:	b921      	cbnz	r1, 8002a1a <find_volume+0xf2>
 8002a10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a14:	f7ff fddc 	bl	80025d0 <ld_dword>
 8002a18:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002a1a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8002a1e:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002a24:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002a26:	f200 80a7 	bhi.w	8002b78 <find_volume+0x250>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002a2a:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8002a2e:	8166      	strh	r6, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002a30:	2e00      	cmp	r6, #0
 8002a32:	f000 80a1 	beq.w	8002b78 <find_volume+0x250>
 8002a36:	1e72      	subs	r2, r6, #1
 8002a38:	4232      	tst	r2, r6
 8002a3a:	f040 809d 	bne.w	8002b78 <find_volume+0x250>
	rv = ptr[1];
 8002a3e:	f8b4 8049 	ldrh.w	r8, [r4, #73]	; 0x49
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002a42:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002a46:	ea4f 1059 	mov.w	r0, r9, lsr #5
 8002a4a:	fbb8 f2f0 	udiv	r2, r8, r0
 8002a4e:	fb00 8012 	mls	r0, r0, r2, r8
 8002a52:	b280      	uxth	r0, r0
 8002a54:	2800      	cmp	r0, #0
 8002a56:	f040 808f 	bne.w	8002b78 <find_volume+0x250>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002a5a:	f8b4 004b 	ldrh.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002a5e:	b918      	cbnz	r0, 8002a68 <find_volume+0x140>
 8002a60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a64:	f7ff fdb4 	bl	80025d0 <ld_dword>
	rv = ptr[1];
 8002a68:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002a6c:	f1bc 0f00 	cmp.w	ip, #0
 8002a70:	f000 8082 	beq.w	8002b78 <find_volume+0x250>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002a74:	fb01 fe03 	mul.w	lr, r1, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002a78:	4462      	add	r2, ip
 8002a7a:	4472      	add	r2, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002a7c:	4290      	cmp	r0, r2
 8002a7e:	d37b      	bcc.n	8002b78 <find_volume+0x250>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002a80:	1a80      	subs	r0, r0, r2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002a82:	42b0      	cmp	r0, r6
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002a84:	fbb0 f3f6 	udiv	r3, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002a88:	d376      	bcc.n	8002b78 <find_volume+0x250>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002a8a:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8002a8e:	4283      	cmp	r3, r0
 8002a90:	d876      	bhi.n	8002b80 <find_volume+0x258>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002a92:	f640 76f5 	movw	r6, #4085	; 0xff5
 8002a96:	42b3      	cmp	r3, r6
 8002a98:	bf8c      	ite	hi
 8002a9a:	2602      	movhi	r6, #2
 8002a9c:	2601      	movls	r6, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002a9e:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002aa0:	eb0c 0007 	add.w	r0, ip, r7
		fs->database = bsect + sysect;					/* Data start sector */
 8002aa4:	443a      	add	r2, r7
		if (fmt == FS_FAT32) {
 8002aa6:	2e03      	cmp	r6, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002aa8:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8002aaa:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002aac:	62a0      	str	r0, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8002aae:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8002ab0:	d168      	bne.n	8002b84 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8002ab2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002ab6:	ea52 0208 	orrs.w	r2, r2, r8
 8002aba:	d15d      	bne.n	8002b78 <find_volume+0x250>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002abc:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8002ac0:	f7ff fd86 	bl	80025d0 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002ac4:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002ac6:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002ac8:	f109 32ff 	add.w	r2, r9, #4294967295
 8002acc:	4413      	add	r3, r2
 8002ace:	fbb3 f9f9 	udiv	r9, r3, r9
 8002ad2:	4589      	cmp	r9, r1
 8002ad4:	d850      	bhi.n	8002b78 <find_volume+0x250>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	e9c4 3305 	strd	r3, r3, [r4, #20]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8002ade:	2e03      	cmp	r6, #3
		fs->fsi_flag = 0x80;
 8002ae0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002ae4:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8002ae6:	d12b      	bne.n	8002b40 <find_volume+0x218>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002ae8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d127      	bne.n	8002b40 <find_volume+0x218>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002af0:	1c79      	adds	r1, r7, #1
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff fec4 	bl	8002880 <move_window>
 8002af8:	bb10      	cbnz	r0, 8002b40 <find_volume+0x218>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002afa:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 8002afe:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002b00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d11b      	bne.n	8002b40 <find_volume+0x218>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002b08:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8002b0c:	f7ff fd60 	bl	80025d0 <ld_dword>
 8002b10:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <find_volume+0x290>)
 8002b12:	4298      	cmp	r0, r3
 8002b14:	d114      	bne.n	8002b40 <find_volume+0x218>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002b16:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8002b1a:	f7ff fd59 	bl	80025d0 <ld_dword>
 8002b1e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8002b22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b26:	3320      	adds	r3, #32
 8002b28:	4298      	cmp	r0, r3
 8002b2a:	d109      	bne.n	8002b40 <find_volume+0x218>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002b2c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8002b30:	f7ff fd4e 	bl	80025d0 <ld_dword>
 8002b34:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002b36:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8002b3a:	f7ff fd49 	bl	80025d0 <ld_dword>
 8002b3e:	6160      	str	r0, [r4, #20]
	fs->id = ++Fsid;		/* File system mount ID */
 8002b40:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <find_volume+0x294>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8002b42:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8002b44:	8813      	ldrh	r3, [r2, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	8013      	strh	r3, [r2, #0]
 8002b4c:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <find_volume+0x298>)
 8002b50:	6123      	str	r3, [r4, #16]
	clear_lock(fs);
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff fde6 	bl	8002724 <clear_lock>
	return FR_OK;
 8002b58:	e707      	b.n	800296a <find_volume+0x42>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002b5a:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002b5c:	f108 0801 	add.w	r8, r8, #1
 8002b60:	f1b8 0f04 	cmp.w	r8, #4
 8002b64:	f47f af3e 	bne.w	80029e4 <find_volume+0xbc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002b68:	2804      	cmp	r0, #4
 8002b6a:	d105      	bne.n	8002b78 <find_volume+0x250>
 8002b6c:	e715      	b.n	800299a <find_volume+0x72>
 8002b6e:	2804      	cmp	r0, #4
 8002b70:	f43f af13 	beq.w	800299a <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002b74:	2801      	cmp	r0, #1
 8002b76:	d901      	bls.n	8002b7c <find_volume+0x254>
 8002b78:	250d      	movs	r5, #13
 8002b7a:	e6f6      	b.n	800296a <find_volume+0x42>
	bsect = 0;
 8002b7c:	462f      	mov	r7, r5
 8002b7e:	e73d      	b.n	80029fc <find_volume+0xd4>
		fmt = FS_FAT32;
 8002b80:	2603      	movs	r6, #3
 8002b82:	e78c      	b.n	8002a9e <find_volume+0x176>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8002b84:	f1b8 0f00 	cmp.w	r8, #0
 8002b88:	d0f6      	beq.n	8002b78 <find_volume+0x250>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002b8a:	2e02      	cmp	r6, #2
 8002b8c:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8002b90:	bf18      	it	ne
 8002b92:	18d2      	addne	r2, r2, r3
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002b94:	4470      	add	r0, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002b96:	bf18      	it	ne
 8002b98:	f003 0301 	andne.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002b9c:	62e0      	str	r0, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002b9e:	bf0c      	ite	eq
 8002ba0:	4613      	moveq	r3, r2
 8002ba2:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8002ba6:	e78f      	b.n	8002ac8 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002ba8:	250b      	movs	r5, #11
 8002baa:	e6de      	b.n	800296a <find_volume+0x42>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002bac:	250c      	movs	r5, #12
 8002bae:	e6dc      	b.n	800296a <find_volume+0x42>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002bb0:	2503      	movs	r5, #3
 8002bb2:	e6da      	b.n	800296a <find_volume+0x42>
 8002bb4:	2001a8d4 	.word	0x2001a8d4
 8002bb8:	41615252 	.word	0x41615252
 8002bbc:	2001a8f8 	.word	0x2001a8f8
 8002bc0:	2001a8fa 	.word	0x2001a8fa

08002bc4 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002bc4:	2901      	cmp	r1, #1
{
 8002bc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bca:	4605      	mov	r5, r0
 8002bcc:	460c      	mov	r4, r1
 8002bce:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002bd0:	f240 808b 	bls.w	8002cea <put_fat+0x126>
 8002bd4:	69c3      	ldr	r3, [r0, #28]
 8002bd6:	428b      	cmp	r3, r1
 8002bd8:	f240 8087 	bls.w	8002cea <put_fat+0x126>
		switch (fs->fs_type) {
 8002bdc:	7803      	ldrb	r3, [r0, #0]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d049      	beq.n	8002c76 <put_fat+0xb2>
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d060      	beq.n	8002ca8 <put_fat+0xe4>
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d17f      	bne.n	8002cea <put_fat+0x126>
			bc = (UINT)clst; bc += bc / 2;
 8002bea:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002bee:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002bf0:	8983      	ldrh	r3, [r0, #12]
 8002bf2:	fbb8 f3f3 	udiv	r3, r8, r3
 8002bf6:	4419      	add	r1, r3
 8002bf8:	f7ff fe42 	bl	8002880 <move_window>
 8002bfc:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8002bfe:	bb78      	cbnz	r0, 8002c60 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8002c00:	89ab      	ldrh	r3, [r5, #12]
 8002c02:	fbb8 f2f3 	udiv	r2, r8, r3
 8002c06:	f105 0a38 	add.w	sl, r5, #56	; 0x38
 8002c0a:	f108 0901 	add.w	r9, r8, #1
 8002c0e:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002c12:	f014 0401 	ands.w	r4, r4, #1
 8002c16:	bf1f      	itttt	ne
 8002c18:	f81a 3008 	ldrbne.w	r3, [sl, r8]
 8002c1c:	f003 020f 	andne.w	r2, r3, #15
 8002c20:	013b      	lslne	r3, r7, #4
 8002c22:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8002c26:	bf14      	ite	ne
 8002c28:	4313      	orrne	r3, r2
 8002c2a:	b2fb      	uxtbeq	r3, r7
 8002c2c:	f80a 3008 	strb.w	r3, [sl, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002c30:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			fs->wflag = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002c36:	4628      	mov	r0, r5
 8002c38:	89ab      	ldrh	r3, [r5, #12]
 8002c3a:	fbb9 f3f3 	udiv	r3, r9, r3
 8002c3e:	4419      	add	r1, r3
 8002c40:	f7ff fe1e 	bl	8002880 <move_window>
			if (res != FR_OK) break;
 8002c44:	4606      	mov	r6, r0
 8002c46:	b958      	cbnz	r0, 8002c60 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8002c48:	89ab      	ldrh	r3, [r5, #12]
 8002c4a:	fbb9 f2f3 	udiv	r2, r9, r3
 8002c4e:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002c52:	b144      	cbz	r4, 8002c66 <put_fat+0xa2>
 8002c54:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8002c58:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	70eb      	strb	r3, [r5, #3]
}
 8002c60:	4630      	mov	r0, r6
 8002c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002c66:	f81a 3009 	ldrb.w	r3, [sl, r9]
 8002c6a:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8002c6e:	f023 030f 	bic.w	r3, r3, #15
 8002c72:	431f      	orrs	r7, r3
 8002c74:	e7f0      	b.n	8002c58 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002c76:	8983      	ldrh	r3, [r0, #12]
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c7e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002c80:	4419      	add	r1, r3
 8002c82:	f7ff fdfd 	bl	8002880 <move_window>
			if (res != FR_OK) break;
 8002c86:	4606      	mov	r6, r0
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d1e9      	bne.n	8002c60 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002c8c:	89a9      	ldrh	r1, [r5, #12]
 8002c8e:	0064      	lsls	r4, r4, #1
 8002c90:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8002c94:	fbb4 f2f1 	udiv	r2, r4, r1
 8002c98:	fb01 4412 	mls	r4, r1, r2, r4
 8002c9c:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8002c9e:	551f      	strb	r7, [r3, r4]
 8002ca0:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8002ca4:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 8002ca6:	e7d9      	b.n	8002c5c <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002ca8:	8983      	ldrh	r3, [r0, #12]
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002cb2:	4419      	add	r1, r3
 8002cb4:	f7ff fde4 	bl	8002880 <move_window>
			if (res != FR_OK) break;
 8002cb8:	4606      	mov	r6, r0
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d1d0      	bne.n	8002c60 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002cbe:	89a9      	ldrh	r1, [r5, #12]
 8002cc0:	00a4      	lsls	r4, r4, #2
 8002cc2:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8002cc6:	fbb4 f2f1 	udiv	r2, r4, r1
 8002cca:	fb01 4412 	mls	r4, r1, r2, r4
 8002cce:	441c      	add	r4, r3
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7ff fc7d 	bl	80025d0 <ld_dword>
 8002cd6:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8002cda:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002cde:	ea47 0100 	orr.w	r1, r7, r0
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f7ff fc76 	bl	80025d4 <st_dword>
 8002ce8:	e7b8      	b.n	8002c5c <put_fat+0x98>
		switch (fs->fs_type) {
 8002cea:	2602      	movs	r6, #2
 8002cec:	e7b8      	b.n	8002c60 <put_fat+0x9c>

08002cee <sync_fs>:
{
 8002cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf0:	4604      	mov	r4, r0
	res = sync_window(fs);
 8002cf2:	f7ff fdbf 	bl	8002874 <sync_window>
 8002cf6:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d141      	bne.n	8002d80 <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002cfc:	7823      	ldrb	r3, [r4, #0]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d136      	bne.n	8002d70 <sync_fs+0x82>
 8002d02:	7927      	ldrb	r7, [r4, #4]
 8002d04:	2f01      	cmp	r7, #1
 8002d06:	d133      	bne.n	8002d70 <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8002d08:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	89a2      	ldrh	r2, [r4, #12]
 8002d10:	4630      	mov	r0, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8002d12:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
 8002d14:	f7ff fc66 	bl	80025e4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8002d18:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 8002d1c:	23aa      	movs	r3, #170	; 0xaa
 8002d1e:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 8002d22:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8002d24:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8002d26:	2172      	movs	r1, #114	; 0x72
 8002d28:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8002d2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 8002d30:	2361      	movs	r3, #97	; 0x61
 8002d32:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	*ptr++ = (BYTE)val;
 8002d36:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
 8002d3a:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 8002d3e:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 8002d42:	f884 121d 	strb.w	r1, [r4, #541]	; 0x21d
	*ptr++ = (BYTE)val; val >>= 8;
 8002d46:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002d4a:	69a1      	ldr	r1, [r4, #24]
 8002d4c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8002d50:	f7ff fc40 	bl	80025d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002d54:	6961      	ldr	r1, [r4, #20]
 8002d56:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8002d5a:	f7ff fc3b 	bl	80025d4 <st_dword>
			fs->winsect = fs->volbase + 1;
 8002d5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002d60:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8002d62:	3201      	adds	r2, #1
 8002d64:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002d66:	463b      	mov	r3, r7
 8002d68:	4631      	mov	r1, r6
 8002d6a:	f7ff fc15 	bl	8002598 <disk_write>
			fs->fsi_flag = 0;
 8002d6e:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002d70:	2200      	movs	r2, #0
 8002d72:	7860      	ldrb	r0, [r4, #1]
 8002d74:	4611      	mov	r1, r2
 8002d76:	f7ff fc1d 	bl	80025b4 <disk_ioctl>
	res = sync_window(fs);
 8002d7a:	3800      	subs	r0, #0
 8002d7c:	bf18      	it	ne
 8002d7e:	2001      	movne	r0, #1
}
 8002d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d82 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8002d82:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8002d84:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002d86:	bf04      	itt	eq
 8002d88:	8a8a      	ldrheq	r2, [r1, #20]
 8002d8a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	4770      	bx	lr

08002d92 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002d92:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	4607      	mov	r7, r0
 8002d98:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002d9a:	d963      	bls.n	8002e64 <get_fat.isra.0+0xd2>
 8002d9c:	69c3      	ldr	r3, [r0, #28]
 8002d9e:	4299      	cmp	r1, r3
 8002da0:	d260      	bcs.n	8002e64 <get_fat.isra.0+0xd2>
		switch (fs->fs_type) {
 8002da2:	7803      	ldrb	r3, [r0, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d032      	beq.n	8002e0e <get_fat.isra.0+0x7c>
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d043      	beq.n	8002e34 <get_fat.isra.0+0xa2>
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d159      	bne.n	8002e64 <get_fat.isra.0+0xd2>
			bc = (UINT)clst; bc += bc / 2;
 8002db0:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002db4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002db6:	8983      	ldrh	r3, [r0, #12]
 8002db8:	fbb5 f3f3 	udiv	r3, r5, r3
 8002dbc:	4419      	add	r1, r3
 8002dbe:	f7ff fd5f 	bl	8002880 <move_window>
 8002dc2:	b110      	cbz	r0, 8002dca <get_fat.isra.0+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8002dca:	89b9      	ldrh	r1, [r7, #12]
 8002dcc:	fbb5 f3f1 	udiv	r3, r5, r1
 8002dd0:	1c6e      	adds	r6, r5, #1
 8002dd2:	fb01 5513 	mls	r5, r1, r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	fbb6 f1f1 	udiv	r1, r6, r1
			wc = fs->win[bc++ % SS(fs)];
 8002ddc:	443d      	add	r5, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002dde:	4419      	add	r1, r3
 8002de0:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 8002de2:	f895 5038 	ldrb.w	r5, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002de6:	f7ff fd4b 	bl	8002880 <move_window>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d1ea      	bne.n	8002dc4 <get_fat.isra.0+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002dee:	89b8      	ldrh	r0, [r7, #12]
 8002df0:	fbb6 f3f0 	udiv	r3, r6, r0
 8002df4:	fb00 6613 	mls	r6, r0, r3, r6
 8002df8:	19b8      	adds	r0, r7, r6
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002dfa:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8002dfc:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8002e00:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002e04:	bf4c      	ite	mi
 8002e06:	0900      	lsrmi	r0, r0, #4
 8002e08:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8002e0c:	e7dc      	b.n	8002dc8 <get_fat.isra.0+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002e0e:	8983      	ldrh	r3, [r0, #12]
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e16:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002e18:	4419      	add	r1, r3
 8002e1a:	f7ff fd31 	bl	8002880 <move_window>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d1d0      	bne.n	8002dc4 <get_fat.isra.0+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002e22:	89b8      	ldrh	r0, [r7, #12]
 8002e24:	0064      	lsls	r4, r4, #1
 8002e26:	fbb4 f1f0 	udiv	r1, r4, r0
 8002e2a:	fb00 4411 	mls	r4, r0, r1, r4
 8002e2e:	1938      	adds	r0, r7, r4
 8002e30:	8f00      	ldrh	r0, [r0, #56]	; 0x38
			break;
 8002e32:	e7c9      	b.n	8002dc8 <get_fat.isra.0+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002e34:	8983      	ldrh	r3, [r0, #12]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002e3e:	4419      	add	r1, r3
 8002e40:	f7ff fd1e 	bl	8002880 <move_window>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d1bd      	bne.n	8002dc4 <get_fat.isra.0+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002e48:	89b9      	ldrh	r1, [r7, #12]
 8002e4a:	00a4      	lsls	r4, r4, #2
 8002e4c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002e50:	fbb4 f3f1 	udiv	r3, r4, r1
 8002e54:	fb01 4413 	mls	r4, r1, r3, r4
 8002e58:	4420      	add	r0, r4
 8002e5a:	f7ff fbb9 	bl	80025d0 <ld_dword>
 8002e5e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8002e62:	e7b1      	b.n	8002dc8 <get_fat.isra.0+0x36>
		switch (fs->fs_type) {
 8002e64:	2001      	movs	r0, #1
	return val;
 8002e66:	e7af      	b.n	8002dc8 <get_fat.isra.0+0x36>

08002e68 <remove_chain>:
{
 8002e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e6a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002e6c:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 8002e6e:	6805      	ldr	r5, [r0, #0]
{
 8002e70:	4606      	mov	r6, r0
 8002e72:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002e74:	d92c      	bls.n	8002ed0 <remove_chain+0x68>
 8002e76:	69eb      	ldr	r3, [r5, #28]
 8002e78:	42a3      	cmp	r3, r4
 8002e7a:	d929      	bls.n	8002ed0 <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002e7c:	b12a      	cbz	r2, 8002e8a <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e82:	4628      	mov	r0, r5
 8002e84:	f7ff fe9e 	bl	8002bc4 <put_fat>
		if (res != FR_OK) return res;
 8002e88:	b940      	cbnz	r0, 8002e9c <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	6830      	ldr	r0, [r6, #0]
 8002e8e:	9401      	str	r4, [sp, #4]
 8002e90:	f7ff ff7f 	bl	8002d92 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002e94:	9901      	ldr	r1, [sp, #4]
 8002e96:	4604      	mov	r4, r0
 8002e98:	b910      	cbnz	r0, 8002ea0 <remove_chain+0x38>
	return FR_OK;
 8002e9a:	2000      	movs	r0, #0
}
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002ea0:	2801      	cmp	r0, #1
 8002ea2:	d015      	beq.n	8002ed0 <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	d015      	beq.n	8002ed4 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f7ff fe8a 	bl	8002bc4 <put_fat>
			if (res != FR_OK) return res;
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d1f3      	bne.n	8002e9c <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002eb4:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8002eb8:	1e91      	subs	r1, r2, #2
 8002eba:	428b      	cmp	r3, r1
 8002ebc:	d205      	bcs.n	8002eca <remove_chain+0x62>
			fs->free_clst++;
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8002ec2:	792b      	ldrb	r3, [r5, #4]
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002eca:	42a2      	cmp	r2, r4
 8002ecc:	d8dd      	bhi.n	8002e8a <remove_chain+0x22>
 8002ece:	e7e4      	b.n	8002e9a <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	e7e3      	b.n	8002e9c <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	e7e1      	b.n	8002e9c <remove_chain+0x34>

08002ed8 <create_chain>:
{
 8002ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 8002edc:	6805      	ldr	r5, [r0, #0]
{
 8002ede:	4680      	mov	r8, r0
	if (clst == 0) {	/* Create a new chain */
 8002ee0:	460f      	mov	r7, r1
 8002ee2:	b971      	cbnz	r1, 8002f02 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002ee4:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002ee6:	b1ee      	cbz	r6, 8002f24 <create_chain+0x4c>
 8002ee8:	69eb      	ldr	r3, [r5, #28]
 8002eea:	42b3      	cmp	r3, r6
 8002eec:	bf98      	it	ls
 8002eee:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 8002ef0:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002ef2:	69eb      	ldr	r3, [r5, #28]
			ncl++;							/* Next cluster */
 8002ef4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002ef6:	42a3      	cmp	r3, r4
 8002ef8:	d817      	bhi.n	8002f2a <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 8002efa:	2e01      	cmp	r6, #1
 8002efc:	d814      	bhi.n	8002f28 <create_chain+0x50>
 8002efe:	2400      	movs	r4, #0
 8002f00:	e006      	b.n	8002f10 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002f02:	4628      	mov	r0, r5
 8002f04:	f7ff ff45 	bl	8002d92 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002f08:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002f0a:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002f0c:	d803      	bhi.n	8002f16 <create_chain+0x3e>
 8002f0e:	2401      	movs	r4, #1
}
 8002f10:	4620      	mov	r0, r4
 8002f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002f16:	1c43      	adds	r3, r0, #1
 8002f18:	d030      	beq.n	8002f7c <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002f1a:	69eb      	ldr	r3, [r5, #28]
 8002f1c:	4283      	cmp	r3, r0
 8002f1e:	d8f7      	bhi.n	8002f10 <create_chain+0x38>
 8002f20:	463e      	mov	r6, r7
 8002f22:	e7e5      	b.n	8002ef0 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002f24:	2601      	movs	r6, #1
 8002f26:	e7e3      	b.n	8002ef0 <create_chain+0x18>
				ncl = 2;
 8002f28:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002f2a:	f8d8 0000 	ldr.w	r0, [r8]
 8002f2e:	4621      	mov	r1, r4
 8002f30:	f7ff ff2f 	bl	8002d92 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8002f34:	b130      	cbz	r0, 8002f44 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002f36:	2801      	cmp	r0, #1
 8002f38:	d0e9      	beq.n	8002f0e <create_chain+0x36>
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	d01e      	beq.n	8002f7c <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8002f3e:	42b4      	cmp	r4, r6
 8002f40:	d1d7      	bne.n	8002ef2 <create_chain+0x1a>
 8002f42:	e7dc      	b.n	8002efe <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	4621      	mov	r1, r4
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f7ff fe3a 	bl	8002bc4 <put_fat>
		if (res == FR_OK && clst != 0) {
 8002f50:	b990      	cbnz	r0, 8002f78 <create_chain+0xa0>
 8002f52:	b957      	cbnz	r7, 8002f6a <create_chain+0x92>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002f54:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8002f58:	3a02      	subs	r2, #2
 8002f5a:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 8002f5c:	616c      	str	r4, [r5, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002f5e:	d910      	bls.n	8002f82 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8002f60:	792b      	ldrb	r3, [r5, #4]
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	712b      	strb	r3, [r5, #4]
 8002f68:	e7d2      	b.n	8002f10 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	4639      	mov	r1, r7
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f7ff fe28 	bl	8002bc4 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d0ed      	beq.n	8002f54 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002f78:	2801      	cmp	r0, #1
 8002f7a:	d1c8      	bne.n	8002f0e <create_chain+0x36>
 8002f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8002f80:	e7c6      	b.n	8002f10 <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002f82:	3b01      	subs	r3, #1
 8002f84:	61ab      	str	r3, [r5, #24]
 8002f86:	e7eb      	b.n	8002f60 <create_chain+0x88>

08002f88 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002f88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	4606      	mov	r6, r0
 8002f90:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002f92:	d301      	bcc.n	8002f98 <dir_sdi+0x10>
		return FR_INT_ERR;
 8002f94:	2002      	movs	r0, #2
}
 8002f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002f98:	06ca      	lsls	r2, r1, #27
 8002f9a:	d1fb      	bne.n	8002f94 <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002f9c:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8002f9e:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8002fa0:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002fa2:	b9da      	cbnz	r2, 8002fdc <dir_sdi+0x54>
 8002fa4:	7823      	ldrb	r3, [r4, #0]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <dir_sdi+0x26>
		clst = fs->dirbase;
 8002faa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002fac:	b9ab      	cbnz	r3, 8002fda <dir_sdi+0x52>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002fae:	8923      	ldrh	r3, [r4, #8]
 8002fb0:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8002fb4:	d9ee      	bls.n	8002f94 <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 8002fb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fb8:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 8002fba:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8002fbc:	61b2      	str	r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0e8      	beq.n	8002f94 <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002fc2:	89a2      	ldrh	r2, [r4, #12]
 8002fc4:	fbb5 f1f2 	udiv	r1, r5, r2
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002fc8:	3438      	adds	r4, #56	; 0x38
 8002fca:	fb02 5511 	mls	r5, r2, r1, r5
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002fce:	440b      	add	r3, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002fd0:	442c      	add	r4, r5
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002fd2:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002fd4:	6234      	str	r4, [r6, #32]
	return FR_OK;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e7dd      	b.n	8002f96 <dir_sdi+0xe>
 8002fda:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002fdc:	8967      	ldrh	r7, [r4, #10]
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	435f      	muls	r7, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8002fe2:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002fe4:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8002fe6:	d204      	bcs.n	8002ff2 <dir_sdi+0x6a>
		dp->sect = clust2sect(fs, clst);
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f7ff fba9 	bl	8002740 <clust2sect>
 8002fee:	61f0      	str	r0, [r6, #28]
 8002ff0:	e7e3      	b.n	8002fba <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002ff2:	6830      	ldr	r0, [r6, #0]
 8002ff4:	f7ff fecd 	bl	8002d92 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002ff8:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002ffa:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002ffc:	d006      	beq.n	800300c <dir_sdi+0x84>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002ffe:	2801      	cmp	r0, #1
 8003000:	d9c8      	bls.n	8002f94 <dir_sdi+0xc>
 8003002:	69e3      	ldr	r3, [r4, #28]
 8003004:	4283      	cmp	r3, r0
 8003006:	d9c5      	bls.n	8002f94 <dir_sdi+0xc>
			ofs -= csz;
 8003008:	1bed      	subs	r5, r5, r7
 800300a:	e7ea      	b.n	8002fe2 <dir_sdi+0x5a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800300c:	2001      	movs	r0, #1
 800300e:	e7c2      	b.n	8002f96 <dir_sdi+0xe>

08003010 <dir_next>:
{
 8003010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003014:	6947      	ldr	r7, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003016:	69c3      	ldr	r3, [r0, #28]
{
 8003018:	4605      	mov	r5, r0
 800301a:	4689      	mov	r9, r1
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800301c:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800301e:	b1a3      	cbz	r3, 800304a <dir_next+0x3a>
 8003020:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8003024:	d211      	bcs.n	800304a <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 8003026:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003028:	89a2      	ldrh	r2, [r4, #12]
 800302a:	fbb7 f0f2 	udiv	r0, r7, r2
 800302e:	fb02 7210 	mls	r2, r2, r0, r7
 8003032:	2a00      	cmp	r2, #0
 8003034:	d14f      	bne.n	80030d6 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 8003036:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8003038:	3301      	adds	r3, #1
 800303a:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 800303c:	b939      	cbnz	r1, 800304e <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800303e:	8923      	ldrh	r3, [r4, #8]
 8003040:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8003044:	d847      	bhi.n	80030d6 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 8003046:	2300      	movs	r3, #0
 8003048:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800304a:	2004      	movs	r0, #4
 800304c:	e00d      	b.n	800306a <dir_next+0x5a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800304e:	f8b4 800a 	ldrh.w	r8, [r4, #10]
 8003052:	f108 38ff 	add.w	r8, r8, #4294967295
 8003056:	ea18 0800 	ands.w	r8, r8, r0
 800305a:	d13c      	bne.n	80030d6 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800305c:	4620      	mov	r0, r4
 800305e:	f7ff fe98 	bl	8002d92 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003062:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003064:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003066:	d802      	bhi.n	800306e <dir_next+0x5e>
 8003068:	2002      	movs	r0, #2
}
 800306a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800306e:	1c42      	adds	r2, r0, #1
 8003070:	d101      	bne.n	8003076 <dir_next+0x66>
 8003072:	2001      	movs	r0, #1
 8003074:	e7f9      	b.n	800306a <dir_next+0x5a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003076:	69e3      	ldr	r3, [r4, #28]
 8003078:	4283      	cmp	r3, r0
 800307a:	d826      	bhi.n	80030ca <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 800307c:	f1b9 0f00 	cmp.w	r9, #0
 8003080:	d0e1      	beq.n	8003046 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003082:	69a9      	ldr	r1, [r5, #24]
 8003084:	4628      	mov	r0, r5
 8003086:	f7ff ff27 	bl	8002ed8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800308a:	4606      	mov	r6, r0
 800308c:	2800      	cmp	r0, #0
 800308e:	d03b      	beq.n	8003108 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003090:	2801      	cmp	r0, #1
 8003092:	d0e9      	beq.n	8003068 <dir_next+0x58>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003094:	1c43      	adds	r3, r0, #1
 8003096:	d0ec      	beq.n	8003072 <dir_next+0x62>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff fbeb 	bl	8002874 <sync_window>
 800309e:	4601      	mov	r1, r0
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d1e6      	bne.n	8003072 <dir_next+0x62>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80030a4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80030a8:	89a2      	ldrh	r2, [r4, #12]
 80030aa:	f7ff fa9b 	bl	80025e4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80030ae:	4631      	mov	r1, r6
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7ff fb45 	bl	8002740 <clust2sect>
						fs->wflag = 1;
 80030b6:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80030ba:	6360      	str	r0, [r4, #52]	; 0x34
 80030bc:	8963      	ldrh	r3, [r4, #10]
 80030be:	4598      	cmp	r8, r3
 80030c0:	d315      	bcc.n	80030ee <dir_next+0xde>
					fs->winsect -= n;							/* Restore window offset */
 80030c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030c4:	eba3 0308 	sub.w	r3, r3, r8
 80030c8:	6363      	str	r3, [r4, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 80030ca:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80030cc:	4631      	mov	r1, r6
 80030ce:	4620      	mov	r0, r4
 80030d0:	f7ff fb36 	bl	8002740 <clust2sect>
 80030d4:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80030d6:	89a2      	ldrh	r2, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 80030d8:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80030da:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80030de:	fbb7 f1f2 	udiv	r1, r7, r2
 80030e2:	fb02 7711 	mls	r7, r2, r1, r7
 80030e6:	441f      	add	r7, r3
 80030e8:	622f      	str	r7, [r5, #32]
	return FR_OK;
 80030ea:	2000      	movs	r0, #0
 80030ec:	e7bd      	b.n	800306a <dir_next+0x5a>
						fs->wflag = 1;
 80030ee:	f884 9003 	strb.w	r9, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7ff fb98 	bl	8002828 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d1ba      	bne.n	8003072 <dir_next+0x62>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80030fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030fe:	3301      	adds	r3, #1
 8003100:	f108 0801 	add.w	r8, r8, #1
 8003104:	6363      	str	r3, [r4, #52]	; 0x34
 8003106:	e7d9      	b.n	80030bc <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003108:	2007      	movs	r0, #7
 800310a:	e7ae      	b.n	800306a <dir_next+0x5a>

0800310c <dir_find>:
{
 800310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003110:	2100      	movs	r1, #0
{
 8003112:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8003114:	f8d0 b000 	ldr.w	fp, [r0]
{
 8003118:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800311a:	f7ff ff35 	bl	8002f88 <dir_sdi>
	if (res != FR_OK) return res;
 800311e:	4606      	mov	r6, r0
 8003120:	2800      	cmp	r0, #0
 8003122:	f040 8098 	bne.w	8003256 <dir_find+0x14a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003126:	f04f 3aff 	mov.w	sl, #4294967295
 800312a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800312e:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
 8003132:	46c1      	mov	r9, r8
		res = move_window(fs, dp->sect);
 8003134:	69e1      	ldr	r1, [r4, #28]
 8003136:	4658      	mov	r0, fp
 8003138:	f7ff fba2 	bl	8002880 <move_window>
		if (res != FR_OK) break;
 800313c:	4606      	mov	r6, r0
 800313e:	2800      	cmp	r0, #0
 8003140:	f040 8089 	bne.w	8003256 <dir_find+0x14a>
		c = dp->dir[DIR_Name];
 8003144:	6a25      	ldr	r5, [r4, #32]
 8003146:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003148:	2f00      	cmp	r7, #0
 800314a:	f000 8088 	beq.w	800325e <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800314e:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003150:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003152:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8003156:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003158:	d003      	beq.n	8003162 <dir_find+0x56>
 800315a:	0710      	lsls	r0, r2, #28
 800315c:	d504      	bpl.n	8003168 <dir_find+0x5c>
 800315e:	2b0f      	cmp	r3, #15
 8003160:	d004      	beq.n	800316c <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003162:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
 8003166:	e050      	b.n	800320a <dir_find+0xfe>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d156      	bne.n	800321a <dir_find+0x10e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800316c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8003170:	0659      	lsls	r1, r3, #25
 8003172:	d440      	bmi.n	80031f6 <dir_find+0xea>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003174:	067a      	lsls	r2, r7, #25
 8003176:	d546      	bpl.n	8003206 <dir_find+0xfa>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003178:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 800317a:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800317e:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003180:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003184:	7b6b      	ldrb	r3, [r5, #13]
 8003186:	4543      	cmp	r3, r8
 8003188:	d13f      	bne.n	800320a <dir_find+0xfe>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800318a:	8b6b      	ldrh	r3, [r5, #26]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d13c      	bne.n	800320a <dir_find+0xfe>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003190:	782e      	ldrb	r6, [r5, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003192:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003196:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003198:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800319c:	3e01      	subs	r6, #1
 800319e:	230d      	movs	r3, #13
 80031a0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003268 <dir_find+0x15c>
 80031a4:	435e      	muls	r6, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80031a6:	2201      	movs	r2, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80031a8:	f819 3b01 	ldrb.w	r3, [r9], #1
	rv = ptr[1];
 80031ac:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
 80031ae:	b37a      	cbz	r2, 8003210 <dir_find+0x104>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80031b0:	2efe      	cmp	r6, #254	; 0xfe
 80031b2:	d82a      	bhi.n	800320a <dir_find+0xfe>
 80031b4:	4618      	mov	r0, r3
 80031b6:	9303      	str	r3, [sp, #12]
 80031b8:	f000 fd58 	bl	8003c6c <ff_wtoupper>
 80031bc:	9b00      	ldr	r3, [sp, #0]
 80031be:	9002      	str	r0, [sp, #8]
 80031c0:	1c71      	adds	r1, r6, #1
 80031c2:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 80031c6:	9101      	str	r1, [sp, #4]
 80031c8:	f000 fd50 	bl	8003c6c <ff_wtoupper>
 80031cc:	9a02      	ldr	r2, [sp, #8]
 80031ce:	4282      	cmp	r2, r0
 80031d0:	d11b      	bne.n	800320a <dir_find+0xfe>
 80031d2:	9b03      	ldr	r3, [sp, #12]
 80031d4:	9901      	ldr	r1, [sp, #4]
 80031d6:	461a      	mov	r2, r3
 80031d8:	460e      	mov	r6, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <dir_find+0x158>)
 80031dc:	4599      	cmp	r9, r3
 80031de:	d1e3      	bne.n	80031a8 <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80031e0:	782b      	ldrb	r3, [r5, #0]
 80031e2:	065b      	lsls	r3, r3, #25
 80031e4:	d504      	bpl.n	80031f0 <dir_find+0xe4>
 80031e6:	b11a      	cbz	r2, 80031f0 <dir_find+0xe4>
 80031e8:	9b00      	ldr	r3, [sp, #0]
 80031ea:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80031ee:	b963      	cbnz	r3, 800320a <dir_find+0xfe>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80031f0:	3f01      	subs	r7, #1
 80031f2:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
 80031f6:	2100      	movs	r1, #0
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7ff ff09 	bl	8003010 <dir_next>
	} while (res == FR_OK);
 80031fe:	4606      	mov	r6, r0
 8003200:	2800      	cmp	r0, #0
 8003202:	d097      	beq.n	8003134 <dir_find+0x28>
 8003204:	e027      	b.n	8003256 <dir_find+0x14a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003206:	45b9      	cmp	r9, r7
 8003208:	d0bc      	beq.n	8003184 <dir_find+0x78>
 800320a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800320e:	e7f2      	b.n	80031f6 <dir_find+0xea>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003210:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003214:	428b      	cmp	r3, r1
 8003216:	d0e0      	beq.n	80031da <dir_find+0xce>
 8003218:	e7f7      	b.n	800320a <dir_find+0xfe>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800321a:	f1b9 0f00 	cmp.w	r9, #0
 800321e:	d104      	bne.n	800322a <dir_find+0x11e>
 8003220:	4628      	mov	r0, r5
 8003222:	f7ff fab7 	bl	8002794 <sum_sfn>
 8003226:	4540      	cmp	r0, r8
 8003228:	d015      	beq.n	8003256 <dir_find+0x14a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800322a:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
 800322e:	f016 0601 	ands.w	r6, r6, #1
 8003232:	d196      	bne.n	8003162 <dir_find+0x56>
 8003234:	f104 0224 	add.w	r2, r4, #36	; 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003238:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
 800323c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003240:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8003244:	428d      	cmp	r5, r1
		r = *d++ - *s++;
 8003246:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 800324a:	d002      	beq.n	8003252 <dir_find+0x146>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f5      	beq.n	800323c <dir_find+0x130>
 8003250:	e787      	b.n	8003162 <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003252:	2b00      	cmp	r3, #0
 8003254:	d185      	bne.n	8003162 <dir_find+0x56>
}
 8003256:	4630      	mov	r0, r6
 8003258:	b005      	add	sp, #20
 800325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800325e:	2604      	movs	r6, #4
 8003260:	e7f9      	b.n	8003256 <dir_find+0x14a>
 8003262:	bf00      	nop
 8003264:	08004834 	.word	0x08004834
 8003268:	08004827 	.word	0x08004827

0800326c <dir_register>:
{
 800326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003270:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
 8003274:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
{
 8003278:	b089      	sub	sp, #36	; 0x24
 800327a:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800327c:	f040 8090 	bne.w	80033a0 <dir_register+0x134>
	FATFS *fs = dp->obj.fs;
 8003280:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003282:	6932      	ldr	r2, [r6, #16]
 8003284:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d167      	bne.n	800335c <dir_register+0xf0>
	mem_cpy(sn, dp->fn, 12);
 800328c:	f104 0724 	add.w	r7, r4, #36	; 0x24
	if (cnt) {
 8003290:	220c      	movs	r2, #12
 8003292:	4639      	mov	r1, r7
 8003294:	a805      	add	r0, sp, #20
 8003296:	f7ff fabe 	bl	8002816 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800329a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800329e:	07db      	lsls	r3, r3, #31
 80032a0:	f140 8087 	bpl.w	80033b2 <dir_register+0x146>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80032a4:	2340      	movs	r3, #64	; 0x40
				if (sr & 0x10000) sr ^= 0x11021;
 80032a6:	f8df 8240 	ldr.w	r8, [pc, #576]	; 80034e8 <dir_register+0x27c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80032aa:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80032ae:	f04f 0a01 	mov.w	sl, #1
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80032b2:	220b      	movs	r2, #11
 80032b4:	a905      	add	r1, sp, #20
 80032b6:	4638      	mov	r0, r7
 80032b8:	f8d6 9010 	ldr.w	r9, [r6, #16]
	if (cnt) {
 80032bc:	f7ff faab 	bl	8002816 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80032c0:	f1ba 0f05 	cmp.w	sl, #5
 80032c4:	d95b      	bls.n	800337e <dir_register+0x112>
 80032c6:	f1a9 0102 	sub.w	r1, r9, #2
 80032ca:	4653      	mov	r3, sl
		while (*lfn) {	/* Create a CRC */
 80032cc:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80032d0:	2a00      	cmp	r2, #0
 80032d2:	d145      	bne.n	8003360 <dir_register+0xf4>
 80032d4:	f10d 0013 	add.w	r0, sp, #19
 80032d8:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 80032da:	f003 0c0f 	and.w	ip, r3, #15
 80032de:	f10c 0130 	add.w	r1, ip, #48	; 0x30
		if (c > '9') c += 7;
 80032e2:	2939      	cmp	r1, #57	; 0x39
 80032e4:	bf88      	it	hi
 80032e6:	f10c 0137 	addhi.w	r1, ip, #55	; 0x37
	} while (seq);
 80032ea:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 80032ec:	f800 1901 	strb.w	r1, [r0], #-1
 80032f0:	f102 32ff 	add.w	r2, r2, #4294967295
		seq /= 16;
 80032f4:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
 80032f8:	d843      	bhi.n	8003382 <dir_register+0x116>
	ns[i] = '~';
 80032fa:	f102 0320 	add.w	r3, r2, #32
 80032fe:	446b      	add	r3, sp
 8003300:	217e      	movs	r1, #126	; 0x7e
 8003302:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003306:	4639      	mov	r1, r7
 8003308:	2300      	movs	r3, #0
 800330a:	429a      	cmp	r2, r3
 800330c:	d005      	beq.n	800331a <dir_register+0xae>
 800330e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8003312:	2820      	cmp	r0, #32
 8003314:	f103 0c01 	add.w	ip, r3, #1
 8003318:	d135      	bne.n	8003386 <dir_register+0x11a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800331a:	f104 0023 	add.w	r0, r4, #35	; 0x23
 800331e:	2a07      	cmp	r2, #7
 8003320:	bf9c      	itt	ls
 8003322:	f102 0120 	addls.w	r1, r2, #32
 8003326:	4469      	addls	r1, sp
 8003328:	f103 0301 	add.w	r3, r3, #1
 800332c:	bf96      	itet	ls
 800332e:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8003332:	2120      	movhi	r1, #32
 8003334:	3201      	addls	r2, #1
	} while (j < 8);
 8003336:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003338:	54c1      	strb	r1, [r0, r3]
	} while (j < 8);
 800333a:	d9f0      	bls.n	800331e <dir_register+0xb2>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800333c:	4620      	mov	r0, r4
 800333e:	f7ff fee5 	bl	800310c <dir_find>
 8003342:	4681      	mov	r9, r0
			if (res != FR_OK) break;
 8003344:	bb78      	cbnz	r0, 80033a6 <dir_register+0x13a>
		for (n = 1; n < 100; n++) {
 8003346:	f10a 0a01 	add.w	sl, sl, #1
 800334a:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800334e:	d1b0      	bne.n	80032b2 <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003350:	f04f 0907 	mov.w	r9, #7
}
 8003354:	4648      	mov	r0, r9
 8003356:	b009      	add	sp, #36	; 0x24
 8003358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800335c:	3501      	adds	r5, #1
 800335e:	e791      	b.n	8003284 <dir_register+0x18>
 8003360:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 8003362:	f002 0c01 	and.w	ip, r2, #1
 8003366:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800336a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800336e:	bf18      	it	ne
 8003370:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8003374:	3801      	subs	r0, #1
				wc >>= 1;
 8003376:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 800337a:	d1f2      	bne.n	8003362 <dir_register+0xf6>
 800337c:	e7a6      	b.n	80032cc <dir_register+0x60>
 800337e:	4653      	mov	r3, sl
 8003380:	e7a8      	b.n	80032d4 <dir_register+0x68>
		seq /= 16;
 8003382:	460b      	mov	r3, r1
 8003384:	e7a9      	b.n	80032da <dir_register+0x6e>
 8003386:	4663      	mov	r3, ip
 8003388:	e7bf      	b.n	800330a <dir_register+0x9e>
				n = 0;					/* Not a blank entry. Restart to search */
 800338a:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 800338c:	2101      	movs	r1, #1
 800338e:	4620      	mov	r0, r4
 8003390:	f7ff fe3e 	bl	8003010 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003394:	4681      	mov	r9, r0
 8003396:	b310      	cbz	r0, 80033de <dir_register+0x172>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003398:	f1b9 0f04 	cmp.w	r9, #4
 800339c:	d0d8      	beq.n	8003350 <dir_register+0xe4>
 800339e:	e7d9      	b.n	8003354 <dir_register+0xe8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80033a0:	f04f 0906 	mov.w	r9, #6
 80033a4:	e7d6      	b.n	8003354 <dir_register+0xe8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80033a6:	2804      	cmp	r0, #4
 80033a8:	d1d4      	bne.n	8003354 <dir_register+0xe8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80033aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80033ae:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80033b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
	FATFS *fs = dp->obj.fs;
 80033b6:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80033ba:	079b      	lsls	r3, r3, #30
 80033bc:	bf48      	it	mi
 80033be:	350c      	addmi	r5, #12
	res = dir_sdi(dp, 0);
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80033c6:	bf49      	itett	mi
 80033c8:	230d      	movmi	r3, #13
 80033ca:	2501      	movpl	r5, #1
 80033cc:	fbb5 f5f3 	udivmi	r5, r5, r3
 80033d0:	3501      	addmi	r5, #1
	res = dir_sdi(dp, 0);
 80033d2:	f7ff fdd9 	bl	8002f88 <dir_sdi>
	if (res == FR_OK) {
 80033d6:	4681      	mov	r9, r0
 80033d8:	2800      	cmp	r0, #0
 80033da:	d1dd      	bne.n	8003398 <dir_register+0x12c>
		n = 0;
 80033dc:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 80033de:	69e1      	ldr	r1, [r4, #28]
 80033e0:	4650      	mov	r0, sl
 80033e2:	f7ff fa4d 	bl	8002880 <move_window>
			if (res != FR_OK) break;
 80033e6:	4681      	mov	r9, r0
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d1d5      	bne.n	8003398 <dir_register+0x12c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80033ec:	6a23      	ldr	r3, [r4, #32]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2be5      	cmp	r3, #229	; 0xe5
 80033f2:	d001      	beq.n	80033f8 <dir_register+0x18c>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1c8      	bne.n	800338a <dir_register+0x11e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80033f8:	f108 0801 	add.w	r8, r8, #1
 80033fc:	4545      	cmp	r5, r8
 80033fe:	d1c5      	bne.n	800338c <dir_register+0x120>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003400:	3d01      	subs	r5, #1
 8003402:	d055      	beq.n	80034b0 <dir_register+0x244>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003404:	6961      	ldr	r1, [r4, #20]
 8003406:	4620      	mov	r0, r4
 8003408:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 800340c:	f7ff fdbc 	bl	8002f88 <dir_sdi>
		if (res == FR_OK) {
 8003410:	4681      	mov	r9, r0
 8003412:	2800      	cmp	r0, #0
 8003414:	d19e      	bne.n	8003354 <dir_register+0xe8>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003416:	4638      	mov	r0, r7
 8003418:	f7ff f9bc 	bl	8002794 <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800341c:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003420:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 8003422:	69e1      	ldr	r1, [r4, #28]
 8003424:	4630      	mov	r0, r6
 8003426:	f7ff fa2b 	bl	8002880 <move_window>
 800342a:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 800342c:	2800      	cmp	r0, #0
 800342e:	d191      	bne.n	8003354 <dir_register+0xe8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003430:	6a23      	ldr	r3, [r4, #32]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003432:	9a01      	ldr	r2, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003434:	f8d6 e010 	ldr.w	lr, [r6, #16]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003438:	735a      	strb	r2, [r3, #13]
 800343a:	b2e9      	uxtb	r1, r5
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800343c:	f04f 020f 	mov.w	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003440:	f04f 0c0d 	mov.w	ip, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003444:	72da      	strb	r2, [r3, #11]
	dir[LDIR_Type] = 0;
 8003446:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80034ec <dir_register+0x280>
 800344a:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800344c:	1e4a      	subs	r2, r1, #1
 800344e:	fb0c f202 	mul.w	r2, ip, r2
	*ptr++ = (BYTE)val; val >>= 8;
 8003452:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8003454:	76d8      	strb	r0, [r3, #27]
	s = wc = 0;
 8003456:	4684      	mov	ip, r0
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003458:	f81a 9b01 	ldrb.w	r9, [sl], #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800345c:	4540      	cmp	r0, r8
 800345e:	bf18      	it	ne
 8003460:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8003464:	f803 0009 	strb.w	r0, [r3, r9]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003468:	eb03 0b09 	add.w	fp, r3, r9
	} while (++s < 13);
 800346c:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003470:	bf18      	it	ne
 8003472:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8003474:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003478:	2800      	cmp	r0, #0
 800347a:	bf08      	it	eq
 800347c:	4640      	moveq	r0, r8
	} while (++s < 13);
 800347e:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8003482:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
 8003486:	d1e7      	bne.n	8003458 <dir_register+0x1ec>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003488:	4540      	cmp	r0, r8
 800348a:	d002      	beq.n	8003492 <dir_register+0x226>
 800348c:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003490:	b90a      	cbnz	r2, 8003496 <dir_register+0x22a>
 8003492:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003496:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8003498:	2301      	movs	r3, #1
 800349a:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800349c:	2100      	movs	r1, #0
 800349e:	4620      	mov	r0, r4
 80034a0:	f7ff fdb6 	bl	8003010 <dir_next>
			} while (res == FR_OK && --nent);
 80034a4:	4681      	mov	r9, r0
 80034a6:	2800      	cmp	r0, #0
 80034a8:	f47f af54 	bne.w	8003354 <dir_register+0xe8>
 80034ac:	3d01      	subs	r5, #1
 80034ae:	d1b8      	bne.n	8003422 <dir_register+0x1b6>
		res = move_window(fs, dp->sect);
 80034b0:	69e1      	ldr	r1, [r4, #28]
 80034b2:	4630      	mov	r0, r6
 80034b4:	f7ff f9e4 	bl	8002880 <move_window>
		if (res == FR_OK) {
 80034b8:	4681      	mov	r9, r0
 80034ba:	2800      	cmp	r0, #0
 80034bc:	f47f af4a 	bne.w	8003354 <dir_register+0xe8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80034c0:	4601      	mov	r1, r0
 80034c2:	2220      	movs	r2, #32
 80034c4:	6a20      	ldr	r0, [r4, #32]
 80034c6:	f7ff f88d 	bl	80025e4 <mem_set>
	if (cnt) {
 80034ca:	220b      	movs	r2, #11
 80034cc:	6a20      	ldr	r0, [r4, #32]
 80034ce:	4639      	mov	r1, r7
 80034d0:	f7ff f9a1 	bl	8002816 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80034d4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80034d8:	6a22      	ldr	r2, [r4, #32]
 80034da:	f003 0318 	and.w	r3, r3, #24
 80034de:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80034e0:	2301      	movs	r3, #1
 80034e2:	70f3      	strb	r3, [r6, #3]
 80034e4:	e736      	b.n	8003354 <dir_register+0xe8>
 80034e6:	bf00      	nop
 80034e8:	00011021 	.word	0x00011021
 80034ec:	08004827 	.word	0x08004827

080034f0 <follow_path>:
{
 80034f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 80034f4:	f8d0 b000 	ldr.w	fp, [r0]
{
 80034f8:	4606      	mov	r6, r0
 80034fa:	4689      	mov	r9, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80034fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003500:	2b2f      	cmp	r3, #47	; 0x2f
 8003502:	d0fa      	beq.n	80034fa <follow_path+0xa>
 8003504:	2b5c      	cmp	r3, #92	; 0x5c
 8003506:	d0f8      	beq.n	80034fa <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8003508:	2100      	movs	r1, #0
 800350a:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800350c:	f899 3000 	ldrb.w	r3, [r9]
 8003510:	2b1f      	cmp	r3, #31
 8003512:	f200 80b3 	bhi.w	800367c <follow_path+0x18c>
		dp->fn[NSFLAG] = NS_NONAME;
 8003516:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8003518:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 800351a:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 800351e:	b003      	add	sp, #12
 8003520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8003524:	f7ff bd30 	b.w	8002f88 <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003528:	3401      	adds	r4, #1
 800352a:	e0bb      	b.n	80036a4 <follow_path+0x1b4>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800352c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	d00c      	beq.n	800354e <follow_path+0x5e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003534:	2101      	movs	r1, #1
 8003536:	f000 fb7b 	bl	8003c30 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800353a:	b140      	cbz	r0, 800354e <follow_path+0x5e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800353c:	287f      	cmp	r0, #127	; 0x7f
 800353e:	9b00      	ldr	r3, [sp, #0]
 8003540:	d807      	bhi.n	8003552 <follow_path+0x62>
 8003542:	4982      	ldr	r1, [pc, #520]	; (800374c <follow_path+0x25c>)
	while (*str && *str != chr) str++;
 8003544:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003548:	b11a      	cbz	r2, 8003552 <follow_path+0x62>
 800354a:	4290      	cmp	r0, r2
 800354c:	d1fa      	bne.n	8003544 <follow_path+0x54>
				cf |= NS_LOSS | NS_LFN; break;
 800354e:	2006      	movs	r0, #6
 8003550:	e04d      	b.n	80035ee <follow_path+0xfe>
		lfn[di++] = w;					/* Store the Unicode character */
 8003552:	f828 0f02 	strh.w	r0, [r8, #2]!
		w = p[si++];					/* Get a character */
 8003556:	4627      	mov	r7, r4
 8003558:	e099      	b.n	800368e <follow_path+0x19e>
		w = lfn[di - 1];
 800355a:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
		if (w != ' ' && w != '.') break;
 800355e:	2b20      	cmp	r3, #32
 8003560:	d002      	beq.n	8003568 <follow_path+0x78>
 8003562:	2b2e      	cmp	r3, #46	; 0x2e
 8003564:	f040 80ae 	bne.w	80036c4 <follow_path+0x1d4>
		di--;
 8003568:	3f01      	subs	r7, #1
 800356a:	e0a8      	b.n	80036be <follow_path+0x1ce>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800356c:	3101      	adds	r1, #1
 800356e:	e0b6      	b.n	80036de <follow_path+0x1ee>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003570:	4543      	cmp	r3, r8
 8003572:	d205      	bcs.n	8003580 <follow_path+0x90>
 8003574:	42ba      	cmp	r2, r7
 8003576:	d149      	bne.n	800360c <follow_path+0x11c>
			if (ni == 11) {				/* Long extension */
 8003578:	f1b8 0f0b 	cmp.w	r8, #11
 800357c:	d13f      	bne.n	80035fe <follow_path+0x10e>
 800357e:	e002      	b.n	8003586 <follow_path+0x96>
 8003580:	f1b8 0f0b 	cmp.w	r8, #11
 8003584:	d136      	bne.n	80035f4 <follow_path+0x104>
				cf |= NS_LOSS | NS_LFN; break;
 8003586:	f044 0403 	orr.w	r4, r4, #3
 800358a:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800358e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8003592:	2be5      	cmp	r3, #229	; 0xe5
 8003594:	bf04      	itt	eq
 8003596:	2305      	moveq	r3, #5
 8003598:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800359c:	f1b8 0f08 	cmp.w	r8, #8
 80035a0:	bf04      	itt	eq
 80035a2:	00ad      	lsleq	r5, r5, #2
 80035a4:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80035a6:	f005 030c 	and.w	r3, r5, #12
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d003      	beq.n	80035b6 <follow_path+0xc6>
 80035ae:	f005 0203 	and.w	r2, r5, #3
 80035b2:	2a03      	cmp	r2, #3
 80035b4:	d101      	bne.n	80035ba <follow_path+0xca>
 80035b6:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80035ba:	07a1      	lsls	r1, r4, #30
 80035bc:	d409      	bmi.n	80035d2 <follow_path+0xe2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80035be:	f005 0503 	and.w	r5, r5, #3
 80035c2:	2d01      	cmp	r5, #1
 80035c4:	bf08      	it	eq
 80035c6:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf08      	it	eq
 80035ce:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80035d2:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80035d6:	4630      	mov	r0, r6
 80035d8:	f7ff fd98 	bl	800310c <dir_find>
			ns = dp->fn[NSFLAG];
 80035dc:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80035e0:	b3c0      	cbz	r0, 8003654 <follow_path+0x164>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80035e2:	2804      	cmp	r0, #4
 80035e4:	d103      	bne.n	80035ee <follow_path+0xfe>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80035e6:	f013 0f04 	tst.w	r3, #4
 80035ea:	bf08      	it	eq
 80035ec:	2005      	moveq	r0, #5
}
 80035ee:	b003      	add	sp, #12
 80035f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80035f4:	42ba      	cmp	r2, r7
 80035f6:	d002      	beq.n	80035fe <follow_path+0x10e>
 80035f8:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 80035fc:	d8c7      	bhi.n	800358e <follow_path+0x9e>
			b <<= 2; continue;
 80035fe:	00ad      	lsls	r5, r5, #2
 8003600:	b2ed      	uxtb	r5, r5
 8003602:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003604:	f04f 080b 	mov.w	r8, #11
 8003608:	2308      	movs	r3, #8
			b <<= 2; continue;
 800360a:	e08d      	b.n	8003728 <follow_path+0x238>
		if (w >= 0x80) {				/* Non ASCII character */
 800360c:	287f      	cmp	r0, #127	; 0x7f
 800360e:	d90e      	bls.n	800362e <follow_path+0x13e>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003610:	2100      	movs	r1, #0
 8003612:	e9cd 2300 	strd	r2, r3, [sp]
 8003616:	f000 fb0b 	bl	8003c30 <ff_convert>
			cf |= NS_LFN;				/* Force create LFN entry */
 800361a:	f044 0402 	orr.w	r4, r4, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800361e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003622:	b160      	cbz	r0, 800363e <follow_path+0x14e>
 8003624:	494a      	ldr	r1, [pc, #296]	; (8003750 <follow_path+0x260>)
 8003626:	4408      	add	r0, r1
 8003628:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800362c:	b138      	cbz	r0, 800363e <follow_path+0x14e>
	while (*str && *str != chr) str++;
 800362e:	f8df c124 	ldr.w	ip, [pc, #292]	; 8003754 <follow_path+0x264>
 8003632:	f81c 1b01 	ldrb.w	r1, [ip], #1
 8003636:	2900      	cmp	r1, #0
 8003638:	d07a      	beq.n	8003730 <follow_path+0x240>
 800363a:	4281      	cmp	r1, r0
 800363c:	d1f9      	bne.n	8003632 <follow_path+0x142>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800363e:	f044 0403 	orr.w	r4, r4, #3
 8003642:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8003644:	18f1      	adds	r1, r6, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800364c:	e06c      	b.n	8003728 <follow_path+0x238>
					b |= 2;
 800364e:	f045 0502 	orr.w	r5, r5, #2
 8003652:	e7f7      	b.n	8003644 <follow_path+0x154>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003654:	075a      	lsls	r2, r3, #29
 8003656:	d4ca      	bmi.n	80035ee <follow_path+0xfe>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003658:	79b3      	ldrb	r3, [r6, #6]
 800365a:	06db      	lsls	r3, r3, #27
 800365c:	d566      	bpl.n	800372c <follow_path+0x23c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800365e:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 8003662:	6971      	ldr	r1, [r6, #20]
 8003664:	fbb1 f0f2 	udiv	r0, r1, r2
 8003668:	f10b 0338 	add.w	r3, fp, #56	; 0x38
 800366c:	fb02 1110 	mls	r1, r2, r0, r1
 8003670:	4419      	add	r1, r3
 8003672:	f89b 0000 	ldrb.w	r0, [fp]
 8003676:	f7ff fb84 	bl	8002d82 <ld_clust.isra.0>
 800367a:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800367c:	6833      	ldr	r3, [r6, #0]
 800367e:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8003682:	f1aa 0502 	sub.w	r5, sl, #2
 8003686:	f109 33ff 	add.w	r3, r9, #4294967295
 800368a:	46a8      	mov	r8, r5
 800368c:	2700      	movs	r7, #0
		w = p[si++];					/* Get a character */
 800368e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8003692:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 8003694:	f107 0401 	add.w	r4, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8003698:	d90c      	bls.n	80036b4 <follow_path+0x1c4>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800369a:	282f      	cmp	r0, #47	; 0x2f
 800369c:	d002      	beq.n	80036a4 <follow_path+0x1b4>
 800369e:	285c      	cmp	r0, #92	; 0x5c
 80036a0:	f47f af44 	bne.w	800352c <follow_path+0x3c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80036a4:	f819 3004 	ldrb.w	r3, [r9, r4]
 80036a8:	2b2f      	cmp	r3, #47	; 0x2f
 80036aa:	f43f af3d 	beq.w	8003528 <follow_path+0x38>
 80036ae:	2b5c      	cmp	r3, #92	; 0x5c
 80036b0:	f43f af3a 	beq.w	8003528 <follow_path+0x38>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80036b4:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 80036b6:	44a1      	add	r9, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80036b8:	bf34      	ite	cc
 80036ba:	2404      	movcc	r4, #4
 80036bc:	2400      	movcs	r4, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80036be:	2f00      	cmp	r7, #0
 80036c0:	f47f af4b 	bne.w	800355a <follow_path+0x6a>
	lfn[di] = 0;						/* LFN is created */
 80036c4:	2300      	movs	r3, #0
 80036c6:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80036ca:	2f00      	cmp	r7, #0
 80036cc:	f43f af3f 	beq.w	800354e <follow_path+0x5e>
	mem_set(dp->fn, ' ', 11);
 80036d0:	2120      	movs	r1, #32
 80036d2:	220b      	movs	r2, #11
 80036d4:	f106 0024 	add.w	r0, r6, #36	; 0x24
 80036d8:	f7fe ff84 	bl	80025e4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80036dc:	4619      	mov	r1, r3
 80036de:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	f43f af42 	beq.w	800356c <follow_path+0x7c>
 80036e8:	2b2e      	cmp	r3, #46	; 0x2e
 80036ea:	f43f af3f 	beq.w	800356c <follow_path+0x7c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80036ee:	b109      	cbz	r1, 80036f4 <follow_path+0x204>
 80036f0:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80036f4:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 80036f8:	2b2e      	cmp	r3, #46	; 0x2e
 80036fa:	d001      	beq.n	8003700 <follow_path+0x210>
 80036fc:	3f01      	subs	r7, #1
 80036fe:	d1f9      	bne.n	80036f4 <follow_path+0x204>
		dp->fn[i++] = (BYTE)w;
 8003700:	2300      	movs	r3, #0
 8003702:	f04f 0808 	mov.w	r8, #8
 8003706:	461d      	mov	r5, r3
		w = lfn[si++];					/* Get an LFN character */
 8003708:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
 800370c:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 800370e:	2800      	cmp	r0, #0
 8003710:	f43f af3d 	beq.w	800358e <follow_path+0x9e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003714:	2820      	cmp	r0, #32
 8003716:	d005      	beq.n	8003724 <follow_path+0x234>
 8003718:	282e      	cmp	r0, #46	; 0x2e
 800371a:	f47f af29 	bne.w	8003570 <follow_path+0x80>
 800371e:	42ba      	cmp	r2, r7
 8003720:	f43f af2a 	beq.w	8003578 <follow_path+0x88>
			cf |= NS_LOSS | NS_LFN; continue;
 8003724:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8003728:	4611      	mov	r1, r2
 800372a:	e7ed      	b.n	8003708 <follow_path+0x218>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800372c:	2005      	movs	r0, #5
	return res;
 800372e:	e75e      	b.n	80035ee <follow_path+0xfe>
				if (IsUpper(w)) {		/* ASCII large capital */
 8003730:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8003734:	2919      	cmp	r1, #25
 8003736:	d98a      	bls.n	800364e <follow_path+0x15e>
					if (IsLower(w)) {	/* ASCII small capital */
 8003738:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800373c:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800373e:	bf9e      	ittt	ls
 8003740:	3820      	subls	r0, #32
 8003742:	f045 0501 	orrls.w	r5, r5, #1
 8003746:	b280      	uxthls	r0, r0
 8003748:	e77c      	b.n	8003644 <follow_path+0x154>
 800374a:	bf00      	nop
 800374c:	08004797 	.word	0x08004797
 8003750:	080047a7 	.word	0x080047a7
 8003754:	080047a0 	.word	0x080047a0

08003758 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003758:	b530      	push	{r4, r5, lr}
 800375a:	b085      	sub	sp, #20
 800375c:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003760:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 8003762:	9103      	str	r1, [sp, #12]
{
 8003764:	4614      	mov	r4, r2
	vol = get_ldnumber(&rp);
 8003766:	f7ff f824 	bl	80027b2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800376a:	1e01      	subs	r1, r0, #0
 800376c:	db17      	blt.n	800379e <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800376e:	4d0e      	ldr	r5, [pc, #56]	; (80037a8 <f_mount+0x50>)
 8003770:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]

	if (cfs) {
 8003774:	b118      	cbz	r0, 800377e <f_mount+0x26>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8003776:	f7fe ffd5 	bl	8002724 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800377a:	2300      	movs	r3, #0
 800377c:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
 800377e:	9801      	ldr	r0, [sp, #4]
 8003780:	b108      	cbz	r0, 8003786 <f_mount+0x2e>
		fs->fs_type = 0;				/* Clear new fs object */
 8003782:	2300      	movs	r3, #0
 8003784:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003786:	f845 0021 	str.w	r0, [r5, r1, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800378a:	b130      	cbz	r0, 800379a <f_mount+0x42>
 800378c:	2c01      	cmp	r4, #1
 800378e:	d108      	bne.n	80037a2 <f_mount+0x4a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003790:	2200      	movs	r2, #0
 8003792:	a901      	add	r1, sp, #4
 8003794:	4668      	mov	r0, sp
 8003796:	f7ff f8c7 	bl	8002928 <find_volume>
	LEAVE_FF(fs, res);
}
 800379a:	b005      	add	sp, #20
 800379c:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800379e:	200b      	movs	r0, #11
 80037a0:	e7fb      	b.n	800379a <f_mount+0x42>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80037a2:	2000      	movs	r0, #0
 80037a4:	e7f9      	b.n	800379a <f_mount+0x42>
 80037a6:	bf00      	nop
 80037a8:	2001a8d4 	.word	0x2001a8d4

080037ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80037ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b0:	b090      	sub	sp, #64	; 0x40
 80037b2:	4617      	mov	r7, r2
 80037b4:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80037b6:	4604      	mov	r4, r0
 80037b8:	2800      	cmp	r0, #0
 80037ba:	f000 80f7 	beq.w	80039ac <f_open+0x200>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80037be:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80037c2:	462a      	mov	r2, r5
 80037c4:	a902      	add	r1, sp, #8
 80037c6:	a801      	add	r0, sp, #4
 80037c8:	f7ff f8ae 	bl	8002928 <find_volume>
	if (res == FR_OK) {
 80037cc:	4606      	mov	r6, r0
 80037ce:	2800      	cmp	r0, #0
 80037d0:	d15c      	bne.n	800388c <f_open+0xe0>
		dj.obj.fs = fs;
 80037d2:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80037d4:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 80037d6:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80037d8:	a803      	add	r0, sp, #12
 80037da:	f7ff fe89 	bl	80034f0 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80037de:	b958      	cbnz	r0, 80037f8 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80037e0:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	db58      	blt.n	800389a <f_open+0xee>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80037e8:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 80037ec:	bf14      	ite	ne
 80037ee:	2101      	movne	r1, #1
 80037f0:	2100      	moveq	r1, #0
 80037f2:	a803      	add	r0, sp, #12
 80037f4:	f7fe fefc 	bl	80025f0 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80037f8:	f017 0f1c 	tst.w	r7, #28
 80037fc:	d06d      	beq.n	80038da <f_open+0x12e>
			if (res != FR_OK) {					/* No file, create new */
 80037fe:	2800      	cmp	r0, #0
 8003800:	d04d      	beq.n	800389e <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003802:	2804      	cmp	r0, #4
 8003804:	d142      	bne.n	800388c <f_open+0xe0>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003806:	4b6a      	ldr	r3, [pc, #424]	; (80039b0 <f_open+0x204>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	b11a      	cbz	r2, 8003814 <f_open+0x68>
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 80c6 	bne.w	80039a0 <f_open+0x1f4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003814:	a803      	add	r0, sp, #12
 8003816:	f7ff fd29 	bl	800326c <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800381a:	2800      	cmp	r0, #0
 800381c:	d136      	bne.n	800388c <f_open+0xe0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800381e:	f045 0508 	orr.w	r5, r5, #8
				dw = GET_FATTIME();
 8003822:	f7fe fe75 	bl	8002510 <get_fattime>
 8003826:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003828:	9000      	str	r0, [sp, #0]
 800382a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800382c:	300e      	adds	r0, #14
 800382e:	f7fe fed1 	bl	80025d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003832:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003834:	9900      	ldr	r1, [sp, #0]
 8003836:	3016      	adds	r0, #22
 8003838:	f7fe fecc 	bl	80025d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800383c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800383e:	f8dd 8008 	ldr.w	r8, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003842:	2220      	movs	r2, #32
 8003844:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003846:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003848:	f898 0000 	ldrb.w	r0, [r8]
 800384c:	f7ff fa99 	bl	8002d82 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003850:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003852:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003854:	4640      	mov	r0, r8
 8003856:	f7fe ff91 	bl	800277c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800385a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8003860:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8003862:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8003864:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8003866:	9b02      	ldr	r3, [sp, #8]
 8003868:	2101      	movs	r1, #1
 800386a:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800386c:	b307      	cbz	r7, 80038b0 <f_open+0x104>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800386e:	4639      	mov	r1, r7
 8003870:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8003872:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8003876:	f7ff faf7 	bl	8002e68 <remove_chain>
						if (res == FR_OK) {
 800387a:	b938      	cbnz	r0, 800388c <f_open+0xe0>
							res = move_window(fs, dw);
 800387c:	9802      	ldr	r0, [sp, #8]
 800387e:	4641      	mov	r1, r8
 8003880:	f7fe fffe 	bl	8002880 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003884:	9b02      	ldr	r3, [sp, #8]
 8003886:	3f01      	subs	r7, #1
 8003888:	615f      	str	r7, [r3, #20]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800388a:	b188      	cbz	r0, 80038b0 <f_open+0x104>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800388c:	2300      	movs	r3, #0
 800388e:	6023      	str	r3, [r4, #0]
 8003890:	4606      	mov	r6, r0

	LEAVE_FF(fs, res);
}
 8003892:	4630      	mov	r0, r6
 8003894:	b010      	add	sp, #64	; 0x40
 8003896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 800389a:	2006      	movs	r0, #6
 800389c:	e7ac      	b.n	80037f8 <f_open+0x4c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800389e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80038a2:	f013 0f11 	tst.w	r3, #17
 80038a6:	d122      	bne.n	80038ee <f_open+0x142>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80038a8:	077b      	lsls	r3, r7, #29
 80038aa:	d47b      	bmi.n	80039a4 <f_open+0x1f8>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80038ac:	073f      	lsls	r7, r7, #28
 80038ae:	d4b8      	bmi.n	8003822 <f_open+0x76>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80038b0:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80038b2:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 80038b8:	bf48      	it	mi
 80038ba:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80038be:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 80038c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038c4:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80038c6:	bf14      	ite	ne
 80038c8:	2101      	movne	r1, #1
 80038ca:	2100      	moveq	r1, #0
 80038cc:	a803      	add	r0, sp, #12
 80038ce:	f7fe fec9 	bl	8002664 <inc_lock>
 80038d2:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80038d4:	b968      	cbnz	r0, 80038f2 <f_open+0x146>
 80038d6:	2002      	movs	r0, #2
 80038d8:	e7d8      	b.n	800388c <f_open+0xe0>
			if (res == FR_OK) {					/* Following succeeded */
 80038da:	2800      	cmp	r0, #0
 80038dc:	d1d6      	bne.n	800388c <f_open+0xe0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80038de:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80038e2:	06d8      	lsls	r0, r3, #27
 80038e4:	d460      	bmi.n	80039a8 <f_open+0x1fc>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80038e6:	07ba      	lsls	r2, r7, #30
 80038e8:	d5e2      	bpl.n	80038b0 <f_open+0x104>
 80038ea:	07df      	lsls	r7, r3, #31
 80038ec:	d5e0      	bpl.n	80038b0 <f_open+0x104>
					res = FR_DENIED;
 80038ee:	2007      	movs	r0, #7
 80038f0:	e7cc      	b.n	800388c <f_open+0xe0>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80038f2:	9f02      	ldr	r7, [sp, #8]
 80038f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038f6:	7838      	ldrb	r0, [r7, #0]
 80038f8:	f7ff fa43 	bl	8002d82 <ld_clust.isra.0>
 80038fc:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80038fe:	f101 001c 	add.w	r0, r1, #28
 8003902:	f7fe fe65 	bl	80025d0 <ld_dword>
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003906:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 8003908:	88fb      	ldrh	r3, [r7, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800390a:	6027      	str	r7, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800390c:	f104 0730 	add.w	r7, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003910:	60e0      	str	r0, [r4, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003912:	f44f 5280 	mov.w	r2, #4096	; 0x1000
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003916:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 8003918:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800391a:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800391c:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800391e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003920:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003922:	4638      	mov	r0, r7
 8003924:	f7fe fe5e 	bl	80025e4 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003928:	06aa      	lsls	r2, r5, #26
 800392a:	d5b2      	bpl.n	8003892 <f_open+0xe6>
 800392c:	68e5      	ldr	r5, [r4, #12]
 800392e:	2d00      	cmp	r5, #0
 8003930:	d0af      	beq.n	8003892 <f_open+0xe6>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003932:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003934:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003936:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 800393a:	899b      	ldrh	r3, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800393c:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800393e:	fb03 f808 	mul.w	r8, r3, r8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003942:	45a8      	cmp	r8, r5
 8003944:	d31e      	bcc.n	8003984 <f_open+0x1d8>
 8003946:	2000      	movs	r0, #0
				fp->clust = clst;
 8003948:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800394a:	2800      	cmp	r0, #0
 800394c:	d19e      	bne.n	800388c <f_open+0xe0>
 800394e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003952:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003956:	fbb5 f2f3 	udiv	r2, r5, r3
 800395a:	fb03 5512 	mls	r5, r3, r2, r5
 800395e:	2d00      	cmp	r5, #0
 8003960:	d097      	beq.n	8003892 <f_open+0xe6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003962:	4640      	mov	r0, r8
 8003964:	f7fe feec 	bl	8002740 <clust2sect>
 8003968:	2800      	cmp	r0, #0
 800396a:	d0b4      	beq.n	80038d6 <f_open+0x12a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800396c:	4402      	add	r2, r0
 800396e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003970:	f898 0001 	ldrb.w	r0, [r8, #1]
 8003974:	2301      	movs	r3, #1
 8003976:	4639      	mov	r1, r7
 8003978:	f7fe fe00 	bl	800257c <disk_read>
 800397c:	2800      	cmp	r0, #0
 800397e:	d088      	beq.n	8003892 <f_open+0xe6>
 8003980:	2001      	movs	r0, #1
 8003982:	e783      	b.n	800388c <f_open+0xe0>
					clst = get_fat(&fp->obj, clst);
 8003984:	6820      	ldr	r0, [r4, #0]
 8003986:	f7ff fa04 	bl	8002d92 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800398a:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800398c:	4601      	mov	r1, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800398e:	eba5 0508 	sub.w	r5, r5, r8
					if (clst <= 1) res = FR_INT_ERR;
 8003992:	d903      	bls.n	800399c <f_open+0x1f0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d1d4      	bne.n	8003942 <f_open+0x196>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003998:	2001      	movs	r0, #1
 800399a:	e7d5      	b.n	8003948 <f_open+0x19c>
					if (clst <= 1) res = FR_INT_ERR;
 800399c:	2002      	movs	r0, #2
 800399e:	e7d3      	b.n	8003948 <f_open+0x19c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80039a0:	2012      	movs	r0, #18
 80039a2:	e773      	b.n	800388c <f_open+0xe0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80039a4:	2008      	movs	r0, #8
 80039a6:	e771      	b.n	800388c <f_open+0xe0>
					res = FR_NO_FILE;
 80039a8:	2004      	movs	r0, #4
 80039aa:	e76f      	b.n	800388c <f_open+0xe0>
	if (!fp) return FR_INVALID_OBJECT;
 80039ac:	2609      	movs	r6, #9
 80039ae:	e770      	b.n	8003892 <f_open+0xe6>
 80039b0:	2001a8d8 	.word	0x2001a8d8

080039b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	b087      	sub	sp, #28
 80039ba:	4616      	mov	r6, r2
 80039bc:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80039be:	9a01      	ldr	r2, [sp, #4]
 80039c0:	2300      	movs	r3, #0
{
 80039c2:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 80039c4:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80039c6:	a905      	add	r1, sp, #20
{
 80039c8:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80039ca:	f7fe ff0a 	bl	80027e2 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80039ce:	4605      	mov	r5, r0
 80039d0:	bb38      	cbnz	r0, 8003a22 <f_read+0x6e>
 80039d2:	7d65      	ldrb	r5, [r4, #21]
 80039d4:	bb2d      	cbnz	r5, 8003a22 <f_read+0x6e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80039d6:	7d23      	ldrb	r3, [r4, #20]
 80039d8:	f013 0301 	ands.w	r3, r3, #1
 80039dc:	9302      	str	r3, [sp, #8]
 80039de:	f000 80a7 	beq.w	8003b30 <f_read+0x17c>
	remain = fp->obj.objsize - fp->fptr;
 80039e2:	68e2      	ldr	r2, [r4, #12]
 80039e4:	69a3      	ldr	r3, [r4, #24]
 80039e6:	1ad2      	subs	r2, r2, r3
 80039e8:	4296      	cmp	r6, r2
 80039ea:	bf28      	it	cs
 80039ec:	4616      	movcs	r6, r2
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80039ee:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	for ( ;  btr;								/* Repeat until all data read */
 80039f2:	b1b6      	cbz	r6, 8003a22 <f_read+0x6e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80039f4:	9805      	ldr	r0, [sp, #20]
 80039f6:	69a1      	ldr	r1, [r4, #24]
 80039f8:	8983      	ldrh	r3, [r0, #12]
 80039fa:	fbb1 f2f3 	udiv	r2, r1, r3
 80039fe:	fb03 1312 	mls	r3, r3, r2, r1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 8081 	bne.w	8003b0a <f_read+0x156>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003a08:	f8b0 800a 	ldrh.w	r8, [r0, #10]
 8003a0c:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
 8003a10:	ea18 0802 	ands.w	r8, r8, r2
 8003a14:	d11b      	bne.n	8003a4e <f_read+0x9a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003a16:	b941      	cbnz	r1, 8003a2a <f_read+0x76>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003a18:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003a1a:	2801      	cmp	r0, #1
 8003a1c:	d810      	bhi.n	8003a40 <f_read+0x8c>
 8003a1e:	2502      	movs	r5, #2
 8003a20:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8003a22:	4628      	mov	r0, r5
 8003a24:	b007      	add	sp, #28
 8003a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8003a2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a2c:	b11b      	cbz	r3, 8003a36 <f_read+0x82>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f7fe fe91 	bl	8002756 <clmt_clust>
 8003a34:	e7f1      	b.n	8003a1a <f_read+0x66>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003a36:	69e1      	ldr	r1, [r4, #28]
 8003a38:	6820      	ldr	r0, [r4, #0]
 8003a3a:	f7ff f9aa 	bl	8002d92 <get_fat.isra.0>
 8003a3e:	e7ec      	b.n	8003a1a <f_read+0x66>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	d103      	bne.n	8003a4c <f_read+0x98>
 8003a44:	2301      	movs	r3, #1
 8003a46:	9d02      	ldr	r5, [sp, #8]
 8003a48:	7563      	strb	r3, [r4, #21]
 8003a4a:	e7ea      	b.n	8003a22 <f_read+0x6e>
				fp->clust = clst;				/* Update current cluster */
 8003a4c:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003a4e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8003a52:	69e1      	ldr	r1, [r4, #28]
 8003a54:	4650      	mov	r0, sl
 8003a56:	f7fe fe73 	bl	8002740 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d0df      	beq.n	8003a1e <f_read+0x6a>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003a5e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003a62:	42b3      	cmp	r3, r6
			sect += csect;
 8003a64:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003a68:	d832      	bhi.n	8003ad0 <f_read+0x11c>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003a6a:	fbb6 f3f3 	udiv	r3, r6, r3
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003a6e:	f8ba 200a 	ldrh.w	r2, [sl, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003a72:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003a76:	eb08 0103 	add.w	r1, r8, r3
 8003a7a:	4291      	cmp	r1, r2
					cc = fs->csize - csect;
 8003a7c:	bf88      	it	hi
 8003a7e:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003a82:	4649      	mov	r1, r9
 8003a84:	463a      	mov	r2, r7
 8003a86:	9303      	str	r3, [sp, #12]
 8003a88:	f7fe fd78 	bl	800257c <disk_read>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d1d9      	bne.n	8003a44 <f_read+0x90>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003a90:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8003a94:	9b03      	ldr	r3, [sp, #12]
 8003a96:	2a00      	cmp	r2, #0
 8003a98:	da0c      	bge.n	8003ab4 <f_read+0x100>
 8003a9a:	6a20      	ldr	r0, [r4, #32]
 8003a9c:	1bc0      	subs	r0, r0, r7
 8003a9e:	4298      	cmp	r0, r3
 8003aa0:	d208      	bcs.n	8003ab4 <f_read+0x100>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8003aa2:	9a05      	ldr	r2, [sp, #20]
 8003aa4:	8992      	ldrh	r2, [r2, #12]
	if (cnt) {
 8003aa6:	b12a      	cbz	r2, 8003ab4 <f_read+0x100>
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	fb02 9000 	mla	r0, r2, r0, r9
 8003aae:	f7fe feb2 	bl	8002816 <mem_cpy.part.0>
 8003ab2:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003ab4:	9a05      	ldr	r2, [sp, #20]
 8003ab6:	8997      	ldrh	r7, [r2, #12]
 8003ab8:	435f      	muls	r7, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8003aba:	69a3      	ldr	r3, [r4, #24]
 8003abc:	9a01      	ldr	r2, [sp, #4]
 8003abe:	443b      	add	r3, r7
 8003ac0:	61a3      	str	r3, [r4, #24]
 8003ac2:	9b01      	ldr	r3, [sp, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	443b      	add	r3, r7
 8003ac8:	44b9      	add	r9, r7
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	1bf6      	subs	r6, r6, r7
 8003ace:	e790      	b.n	80039f2 <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003ad0:	6a22      	ldr	r2, [r4, #32]
 8003ad2:	42ba      	cmp	r2, r7
 8003ad4:	d018      	beq.n	8003b08 <f_read+0x154>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003ad6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	da0b      	bge.n	8003af6 <f_read+0x142>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003ade:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	f7fe fd57 	bl	8002598 <disk_write>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d1aa      	bne.n	8003a44 <f_read+0x90>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003aee:	7d23      	ldrb	r3, [r4, #20]
 8003af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af4:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003af6:	9805      	ldr	r0, [sp, #20]
 8003af8:	2301      	movs	r3, #1
 8003afa:	7840      	ldrb	r0, [r0, #1]
 8003afc:	463a      	mov	r2, r7
 8003afe:	4659      	mov	r1, fp
 8003b00:	f7fe fd3c 	bl	800257c <disk_read>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d19d      	bne.n	8003a44 <f_read+0x90>
			fp->sect = sect;
 8003b08:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003b0a:	9b05      	ldr	r3, [sp, #20]
 8003b0c:	69a1      	ldr	r1, [r4, #24]
 8003b0e:	899f      	ldrh	r7, [r3, #12]
 8003b10:	fbb1 f3f7 	udiv	r3, r1, r7
 8003b14:	fb07 1113 	mls	r1, r7, r3, r1
 8003b18:	1a7f      	subs	r7, r7, r1
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8003b1a:	42b7      	cmp	r7, r6
 8003b1c:	bf28      	it	cs
 8003b1e:	4637      	movcs	r7, r6
	if (cnt) {
 8003b20:	2f00      	cmp	r7, #0
 8003b22:	d0ca      	beq.n	8003aba <f_read+0x106>
 8003b24:	463a      	mov	r2, r7
 8003b26:	4459      	add	r1, fp
 8003b28:	4648      	mov	r0, r9
 8003b2a:	f7fe fe74 	bl	8002816 <mem_cpy.part.0>
 8003b2e:	e7c4      	b.n	8003aba <f_read+0x106>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003b30:	2507      	movs	r5, #7
 8003b32:	e776      	b.n	8003a22 <f_read+0x6e>

08003b34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003b36:	a901      	add	r1, sp, #4
{
 8003b38:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003b3a:	f7fe fe52 	bl	80027e2 <validate>
	if (res == FR_OK) {
 8003b3e:	4604      	mov	r4, r0
 8003b40:	2800      	cmp	r0, #0
 8003b42:	d13b      	bne.n	8003bbc <f_sync+0x88>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003b44:	7d2b      	ldrb	r3, [r5, #20]
 8003b46:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 8003b4a:	d037      	beq.n	8003bbc <f_sync+0x88>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	d50c      	bpl.n	8003b6a <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003b50:	9801      	ldr	r0, [sp, #4]
 8003b52:	6a2a      	ldr	r2, [r5, #32]
 8003b54:	7840      	ldrb	r0, [r0, #1]
 8003b56:	2301      	movs	r3, #1
 8003b58:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8003b5c:	f7fe fd1c 	bl	8002598 <disk_write>
 8003b60:	bb78      	cbnz	r0, 8003bc2 <f_sync+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003b62:	7d2b      	ldrb	r3, [r5, #20]
 8003b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b68:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003b6a:	f7fe fcd1 	bl	8002510 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003b6e:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8003b70:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8003b72:	9801      	ldr	r0, [sp, #4]
 8003b74:	f7fe fe84 	bl	8002880 <move_window>
				if (res == FR_OK) {
 8003b78:	4604      	mov	r4, r0
 8003b7a:	b9f8      	cbnz	r0, 8003bbc <f_sync+0x88>
					dir = fp->dir_ptr;
 8003b7c:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003b7e:	7af3      	ldrb	r3, [r6, #11]
 8003b80:	f043 0320 	orr.w	r3, r3, #32
 8003b84:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8003b86:	68aa      	ldr	r2, [r5, #8]
 8003b88:	6828      	ldr	r0, [r5, #0]
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	f7fe fdf6 	bl	800277c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003b90:	68e9      	ldr	r1, [r5, #12]
 8003b92:	f106 001c 	add.w	r0, r6, #28
 8003b96:	f7fe fd1d 	bl	80025d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003b9a:	4639      	mov	r1, r7
 8003b9c:	f106 0016 	add.w	r0, r6, #22
 8003ba0:	f7fe fd18 	bl	80025d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8003ba4:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ba6:	74b4      	strb	r4, [r6, #18]
					fs->wflag = 1;
 8003ba8:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8003baa:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8003bac:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003bae:	f7ff f89e 	bl	8002cee <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003bb2:	7d2b      	ldrb	r3, [r5, #20]
 8003bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8003bb8:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003bba:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	b003      	add	sp, #12
 8003bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003bc2:	2401      	movs	r4, #1
 8003bc4:	e7fa      	b.n	8003bbc <f_sync+0x88>

08003bc6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003bc6:	b513      	push	{r0, r1, r4, lr}
 8003bc8:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003bca:	f7ff ffb3 	bl	8003b34 <f_sync>
	if (res == FR_OK)
 8003bce:	b948      	cbnz	r0, 8003be4 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003bd0:	a901      	add	r1, sp, #4
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7fe fe05 	bl	80027e2 <validate>
		if (res == FR_OK) {
 8003bd8:	b920      	cbnz	r0, 8003be4 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8003bda:	6920      	ldr	r0, [r4, #16]
 8003bdc:	f7fe fd84 	bl	80026e8 <dec_lock>
			if (res == FR_OK)
 8003be0:	b900      	cbnz	r0, 8003be4 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8003be2:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8003be4:	b002      	add	sp, #8
 8003be6:	bd10      	pop	{r4, pc}

08003be8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003be8:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8003bea:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <FATFS_LinkDriverEx+0x3c>)
 8003bec:	7a5c      	ldrb	r4, [r3, #9]
{
 8003bee:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 8003bf0:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8003bf4:	b9a4      	cbnz	r4, 8003c20 <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003bf6:	7a5c      	ldrb	r4, [r3, #9]
 8003bf8:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8003bfa:	7a5c      	ldrb	r4, [r3, #9]
 8003bfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003c00:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8003c02:	7a5c      	ldrb	r4, [r3, #9]
 8003c04:	441c      	add	r4, r3
 8003c06:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8003c08:	7a5a      	ldrb	r2, [r3, #9]
 8003c0a:	1c54      	adds	r4, r2, #1
 8003c0c:	b2e4      	uxtb	r4, r4
 8003c0e:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8003c10:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8003c12:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8003c14:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003c16:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8003c18:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8003c1a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003c1c:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8003c1e:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8003c20:	2001      	movs	r0, #1
 8003c22:	e7fc      	b.n	8003c1e <FATFS_LinkDriverEx+0x36>
 8003c24:	2001aafc 	.word	0x2001aafc

08003c28 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f7ff bfdd 	b.w	8003be8 <FATFS_LinkDriverEx>
	...

08003c30 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8003c30:	287f      	cmp	r0, #127	; 0x7f
{
 8003c32:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8003c34:	d906      	bls.n	8003c44 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8003c36:	b131      	cbz	r1, 8003c46 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8003c38:	28ff      	cmp	r0, #255	; 0xff
 8003c3a:	d812      	bhi.n	8003c62 <ff_convert+0x32>
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <ff_convert+0x38>)
 8003c3e:	3880      	subs	r0, #128	; 0x80
 8003c40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8003c44:	bd10      	pop	{r4, pc}
 8003c46:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <ff_convert+0x38>)
				if (chr == Tbl[c]) break;
 8003c48:	f832 4b02 	ldrh.w	r4, [r2], #2
 8003c4c:	4284      	cmp	r4, r0
 8003c4e:	b28b      	uxth	r3, r1
 8003c50:	d003      	beq.n	8003c5a <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8003c52:	3101      	adds	r1, #1
 8003c54:	2980      	cmp	r1, #128	; 0x80
 8003c56:	d1f7      	bne.n	8003c48 <ff_convert+0x18>
 8003c58:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 8003c5a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8003c5e:	b2c0      	uxtb	r0, r0
 8003c60:	e7f0      	b.n	8003c44 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8003c62:	2000      	movs	r0, #0
 8003c64:	e7ee      	b.n	8003c44 <ff_convert+0x14>
 8003c66:	bf00      	nop
 8003c68:	08004834 	.word	0x08004834

08003c6c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8003c6c:	b570      	push	{r4, r5, r6, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <ff_wtoupper+0x7c>)
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <ff_wtoupper+0x80>)
 8003c72:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003c76:	bf28      	it	cs
 8003c78:	4613      	movcs	r3, r2
 8003c7a:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 8003c7c:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
 8003c80:	460a      	mov	r2, r1
 8003c82:	b1ab      	cbz	r3, 8003cb0 <ff_wtoupper+0x44>
 8003c84:	4298      	cmp	r0, r3
 8003c86:	d313      	bcc.n	8003cb0 <ff_wtoupper+0x44>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8003c88:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 8003c8c:	0a25      	lsrs	r5, r4, #8
 8003c8e:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
 8003c90:	fa53 f484 	uxtab	r4, r3, r4
 8003c94:	42a0      	cmp	r0, r4
 8003c96:	da21      	bge.n	8003cdc <ff_wtoupper+0x70>
			switch (cmd) {
 8003c98:	2d08      	cmp	r5, #8
 8003c9a:	d809      	bhi.n	8003cb0 <ff_wtoupper+0x44>
 8003c9c:	e8df f005 	tbb	[pc, r5]
 8003ca0:	110f0905 	.word	0x110f0905
 8003ca4:	19171513 	.word	0x19171513
 8003ca8:	1b          	.byte	0x1b
 8003ca9:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8003caa:	1ac0      	subs	r0, r0, r3
 8003cac:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 8003cb0:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8003cb2:	1ac3      	subs	r3, r0, r3
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8003cba:	b280      	uxth	r0, r0
 8003cbc:	e7f8      	b.n	8003cb0 <ff_wtoupper+0x44>
			case 2: chr -= 16; break;				/* Shift -16 */
 8003cbe:	3810      	subs	r0, #16
 8003cc0:	e7fb      	b.n	8003cba <ff_wtoupper+0x4e>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8003cc2:	3820      	subs	r0, #32
 8003cc4:	e7f9      	b.n	8003cba <ff_wtoupper+0x4e>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8003cc6:	3830      	subs	r0, #48	; 0x30
 8003cc8:	e7f7      	b.n	8003cba <ff_wtoupper+0x4e>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8003cca:	381a      	subs	r0, #26
 8003ccc:	e7f5      	b.n	8003cba <ff_wtoupper+0x4e>
			case 6:	chr += 8; break;				/* Shift +8 */
 8003cce:	3008      	adds	r0, #8
 8003cd0:	e7f3      	b.n	8003cba <ff_wtoupper+0x4e>
			case 7: chr -= 80; break;				/* Shift -80 */
 8003cd2:	3850      	subs	r0, #80	; 0x50
 8003cd4:	e7f1      	b.n	8003cba <ff_wtoupper+0x4e>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8003cd6:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8003cda:	e7ee      	b.n	8003cba <ff_wtoupper+0x4e>
		if (!cmd) p += nc;
 8003cdc:	3104      	adds	r1, #4
 8003cde:	2d00      	cmp	r5, #0
 8003ce0:	d1cc      	bne.n	8003c7c <ff_wtoupper+0x10>
 8003ce2:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8003ce6:	e7c8      	b.n	8003c7a <ff_wtoupper+0xe>
 8003ce8:	08004934 	.word	0x08004934
 8003cec:	08004b26 	.word	0x08004b26

08003cf0 <__errno>:
 8003cf0:	4b01      	ldr	r3, [pc, #4]	; (8003cf8 <__errno+0x8>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000024 	.word	0x20000024

08003cfc <__libc_init_array>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4d0d      	ldr	r5, [pc, #52]	; (8003d34 <__libc_init_array+0x38>)
 8003d00:	4c0d      	ldr	r4, [pc, #52]	; (8003d38 <__libc_init_array+0x3c>)
 8003d02:	1b64      	subs	r4, r4, r5
 8003d04:	10a4      	asrs	r4, r4, #2
 8003d06:	2600      	movs	r6, #0
 8003d08:	42a6      	cmp	r6, r4
 8003d0a:	d109      	bne.n	8003d20 <__libc_init_array+0x24>
 8003d0c:	4d0b      	ldr	r5, [pc, #44]	; (8003d3c <__libc_init_array+0x40>)
 8003d0e:	4c0c      	ldr	r4, [pc, #48]	; (8003d40 <__libc_init_array+0x44>)
 8003d10:	f000 fc8e 	bl	8004630 <_init>
 8003d14:	1b64      	subs	r4, r4, r5
 8003d16:	10a4      	asrs	r4, r4, #2
 8003d18:	2600      	movs	r6, #0
 8003d1a:	42a6      	cmp	r6, r4
 8003d1c:	d105      	bne.n	8003d2a <__libc_init_array+0x2e>
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
 8003d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d24:	4798      	blx	r3
 8003d26:	3601      	adds	r6, #1
 8003d28:	e7ee      	b.n	8003d08 <__libc_init_array+0xc>
 8003d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2e:	4798      	blx	r3
 8003d30:	3601      	adds	r6, #1
 8003d32:	e7f2      	b.n	8003d1a <__libc_init_array+0x1e>
 8003d34:	08004c20 	.word	0x08004c20
 8003d38:	08004c20 	.word	0x08004c20
 8003d3c:	08004c20 	.word	0x08004c20
 8003d40:	08004c24 	.word	0x08004c24

08003d44 <memset>:
 8003d44:	4402      	add	r2, r0
 8003d46:	4603      	mov	r3, r0
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d100      	bne.n	8003d4e <memset+0xa>
 8003d4c:	4770      	bx	lr
 8003d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d52:	e7f9      	b.n	8003d48 <memset+0x4>

08003d54 <_vsiprintf_r>:
 8003d54:	b500      	push	{lr}
 8003d56:	b09b      	sub	sp, #108	; 0x6c
 8003d58:	9100      	str	r1, [sp, #0]
 8003d5a:	9104      	str	r1, [sp, #16]
 8003d5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d60:	9105      	str	r1, [sp, #20]
 8003d62:	9102      	str	r1, [sp, #8]
 8003d64:	4905      	ldr	r1, [pc, #20]	; (8003d7c <_vsiprintf_r+0x28>)
 8003d66:	9103      	str	r1, [sp, #12]
 8003d68:	4669      	mov	r1, sp
 8003d6a:	f000 f86f 	bl	8003e4c <_svfiprintf_r>
 8003d6e:	9b00      	ldr	r3, [sp, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	b01b      	add	sp, #108	; 0x6c
 8003d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d7a:	bf00      	nop
 8003d7c:	ffff0208 	.word	0xffff0208

08003d80 <vsiprintf>:
 8003d80:	4613      	mov	r3, r2
 8003d82:	460a      	mov	r2, r1
 8003d84:	4601      	mov	r1, r0
 8003d86:	4802      	ldr	r0, [pc, #8]	; (8003d90 <vsiprintf+0x10>)
 8003d88:	6800      	ldr	r0, [r0, #0]
 8003d8a:	f7ff bfe3 	b.w	8003d54 <_vsiprintf_r>
 8003d8e:	bf00      	nop
 8003d90:	20000024 	.word	0x20000024

08003d94 <__ssputs_r>:
 8003d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d98:	688e      	ldr	r6, [r1, #8]
 8003d9a:	429e      	cmp	r6, r3
 8003d9c:	4682      	mov	sl, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4690      	mov	r8, r2
 8003da2:	461f      	mov	r7, r3
 8003da4:	d838      	bhi.n	8003e18 <__ssputs_r+0x84>
 8003da6:	898a      	ldrh	r2, [r1, #12]
 8003da8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dac:	d032      	beq.n	8003e14 <__ssputs_r+0x80>
 8003dae:	6825      	ldr	r5, [r4, #0]
 8003db0:	6909      	ldr	r1, [r1, #16]
 8003db2:	eba5 0901 	sub.w	r9, r5, r1
 8003db6:	6965      	ldr	r5, [r4, #20]
 8003db8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	444b      	add	r3, r9
 8003dc4:	106d      	asrs	r5, r5, #1
 8003dc6:	429d      	cmp	r5, r3
 8003dc8:	bf38      	it	cc
 8003dca:	461d      	movcc	r5, r3
 8003dcc:	0553      	lsls	r3, r2, #21
 8003dce:	d531      	bpl.n	8003e34 <__ssputs_r+0xa0>
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f000 fb63 	bl	800449c <_malloc_r>
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	b950      	cbnz	r0, 8003df0 <__ssputs_r+0x5c>
 8003dda:	230c      	movs	r3, #12
 8003ddc:	f8ca 3000 	str.w	r3, [sl]
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df0:	6921      	ldr	r1, [r4, #16]
 8003df2:	464a      	mov	r2, r9
 8003df4:	f000 fabe 	bl	8004374 <memcpy>
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	6126      	str	r6, [r4, #16]
 8003e06:	6165      	str	r5, [r4, #20]
 8003e08:	444e      	add	r6, r9
 8003e0a:	eba5 0509 	sub.w	r5, r5, r9
 8003e0e:	6026      	str	r6, [r4, #0]
 8003e10:	60a5      	str	r5, [r4, #8]
 8003e12:	463e      	mov	r6, r7
 8003e14:	42be      	cmp	r6, r7
 8003e16:	d900      	bls.n	8003e1a <__ssputs_r+0x86>
 8003e18:	463e      	mov	r6, r7
 8003e1a:	6820      	ldr	r0, [r4, #0]
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	4641      	mov	r1, r8
 8003e20:	f000 fab6 	bl	8004390 <memmove>
 8003e24:	68a3      	ldr	r3, [r4, #8]
 8003e26:	1b9b      	subs	r3, r3, r6
 8003e28:	60a3      	str	r3, [r4, #8]
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	4433      	add	r3, r6
 8003e2e:	6023      	str	r3, [r4, #0]
 8003e30:	2000      	movs	r0, #0
 8003e32:	e7db      	b.n	8003dec <__ssputs_r+0x58>
 8003e34:	462a      	mov	r2, r5
 8003e36:	f000 fba5 	bl	8004584 <_realloc_r>
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d1e1      	bne.n	8003e04 <__ssputs_r+0x70>
 8003e40:	6921      	ldr	r1, [r4, #16]
 8003e42:	4650      	mov	r0, sl
 8003e44:	f000 fabe 	bl	80043c4 <_free_r>
 8003e48:	e7c7      	b.n	8003dda <__ssputs_r+0x46>
	...

08003e4c <_svfiprintf_r>:
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	4698      	mov	r8, r3
 8003e52:	898b      	ldrh	r3, [r1, #12]
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	b09d      	sub	sp, #116	; 0x74
 8003e58:	4607      	mov	r7, r0
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	4614      	mov	r4, r2
 8003e5e:	d50e      	bpl.n	8003e7e <_svfiprintf_r+0x32>
 8003e60:	690b      	ldr	r3, [r1, #16]
 8003e62:	b963      	cbnz	r3, 8003e7e <_svfiprintf_r+0x32>
 8003e64:	2140      	movs	r1, #64	; 0x40
 8003e66:	f000 fb19 	bl	800449c <_malloc_r>
 8003e6a:	6028      	str	r0, [r5, #0]
 8003e6c:	6128      	str	r0, [r5, #16]
 8003e6e:	b920      	cbnz	r0, 8003e7a <_svfiprintf_r+0x2e>
 8003e70:	230c      	movs	r3, #12
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	e0d1      	b.n	800401e <_svfiprintf_r+0x1d2>
 8003e7a:	2340      	movs	r3, #64	; 0x40
 8003e7c:	616b      	str	r3, [r5, #20]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9309      	str	r3, [sp, #36]	; 0x24
 8003e82:	2320      	movs	r3, #32
 8003e84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e8c:	2330      	movs	r3, #48	; 0x30
 8003e8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004038 <_svfiprintf_r+0x1ec>
 8003e92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e96:	f04f 0901 	mov.w	r9, #1
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	469a      	mov	sl, r3
 8003e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ea2:	b10a      	cbz	r2, 8003ea8 <_svfiprintf_r+0x5c>
 8003ea4:	2a25      	cmp	r2, #37	; 0x25
 8003ea6:	d1f9      	bne.n	8003e9c <_svfiprintf_r+0x50>
 8003ea8:	ebba 0b04 	subs.w	fp, sl, r4
 8003eac:	d00b      	beq.n	8003ec6 <_svfiprintf_r+0x7a>
 8003eae:	465b      	mov	r3, fp
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff ff6d 	bl	8003d94 <__ssputs_r>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	f000 80aa 	beq.w	8004014 <_svfiprintf_r+0x1c8>
 8003ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ec2:	445a      	add	r2, fp
 8003ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80a2 	beq.w	8004014 <_svfiprintf_r+0x1c8>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eda:	f10a 0a01 	add.w	sl, sl, #1
 8003ede:	9304      	str	r3, [sp, #16]
 8003ee0:	9307      	str	r3, [sp, #28]
 8003ee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ee6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee8:	4654      	mov	r4, sl
 8003eea:	2205      	movs	r2, #5
 8003eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef0:	4851      	ldr	r0, [pc, #324]	; (8004038 <_svfiprintf_r+0x1ec>)
 8003ef2:	f7fc f975 	bl	80001e0 <memchr>
 8003ef6:	9a04      	ldr	r2, [sp, #16]
 8003ef8:	b9d8      	cbnz	r0, 8003f32 <_svfiprintf_r+0xe6>
 8003efa:	06d0      	lsls	r0, r2, #27
 8003efc:	bf44      	itt	mi
 8003efe:	2320      	movmi	r3, #32
 8003f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f04:	0711      	lsls	r1, r2, #28
 8003f06:	bf44      	itt	mi
 8003f08:	232b      	movmi	r3, #43	; 0x2b
 8003f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f12:	2b2a      	cmp	r3, #42	; 0x2a
 8003f14:	d015      	beq.n	8003f42 <_svfiprintf_r+0xf6>
 8003f16:	9a07      	ldr	r2, [sp, #28]
 8003f18:	4654      	mov	r4, sl
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	f04f 0c0a 	mov.w	ip, #10
 8003f20:	4621      	mov	r1, r4
 8003f22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f26:	3b30      	subs	r3, #48	; 0x30
 8003f28:	2b09      	cmp	r3, #9
 8003f2a:	d94e      	bls.n	8003fca <_svfiprintf_r+0x17e>
 8003f2c:	b1b0      	cbz	r0, 8003f5c <_svfiprintf_r+0x110>
 8003f2e:	9207      	str	r2, [sp, #28]
 8003f30:	e014      	b.n	8003f5c <_svfiprintf_r+0x110>
 8003f32:	eba0 0308 	sub.w	r3, r0, r8
 8003f36:	fa09 f303 	lsl.w	r3, r9, r3
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	46a2      	mov	sl, r4
 8003f40:	e7d2      	b.n	8003ee8 <_svfiprintf_r+0x9c>
 8003f42:	9b03      	ldr	r3, [sp, #12]
 8003f44:	1d19      	adds	r1, r3, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	9103      	str	r1, [sp, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bfbb      	ittet	lt
 8003f4e:	425b      	neglt	r3, r3
 8003f50:	f042 0202 	orrlt.w	r2, r2, #2
 8003f54:	9307      	strge	r3, [sp, #28]
 8003f56:	9307      	strlt	r3, [sp, #28]
 8003f58:	bfb8      	it	lt
 8003f5a:	9204      	strlt	r2, [sp, #16]
 8003f5c:	7823      	ldrb	r3, [r4, #0]
 8003f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f60:	d10c      	bne.n	8003f7c <_svfiprintf_r+0x130>
 8003f62:	7863      	ldrb	r3, [r4, #1]
 8003f64:	2b2a      	cmp	r3, #42	; 0x2a
 8003f66:	d135      	bne.n	8003fd4 <_svfiprintf_r+0x188>
 8003f68:	9b03      	ldr	r3, [sp, #12]
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	9203      	str	r2, [sp, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bfb8      	it	lt
 8003f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f78:	3402      	adds	r4, #2
 8003f7a:	9305      	str	r3, [sp, #20]
 8003f7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004048 <_svfiprintf_r+0x1fc>
 8003f80:	7821      	ldrb	r1, [r4, #0]
 8003f82:	2203      	movs	r2, #3
 8003f84:	4650      	mov	r0, sl
 8003f86:	f7fc f92b 	bl	80001e0 <memchr>
 8003f8a:	b140      	cbz	r0, 8003f9e <_svfiprintf_r+0x152>
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	eba0 000a 	sub.w	r0, r0, sl
 8003f92:	fa03 f000 	lsl.w	r0, r3, r0
 8003f96:	9b04      	ldr	r3, [sp, #16]
 8003f98:	4303      	orrs	r3, r0
 8003f9a:	3401      	adds	r4, #1
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa2:	4826      	ldr	r0, [pc, #152]	; (800403c <_svfiprintf_r+0x1f0>)
 8003fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa8:	2206      	movs	r2, #6
 8003faa:	f7fc f919 	bl	80001e0 <memchr>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d038      	beq.n	8004024 <_svfiprintf_r+0x1d8>
 8003fb2:	4b23      	ldr	r3, [pc, #140]	; (8004040 <_svfiprintf_r+0x1f4>)
 8003fb4:	bb1b      	cbnz	r3, 8003ffe <_svfiprintf_r+0x1b2>
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	3307      	adds	r3, #7
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc4:	4433      	add	r3, r6
 8003fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc8:	e767      	b.n	8003e9a <_svfiprintf_r+0x4e>
 8003fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fce:	460c      	mov	r4, r1
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	e7a5      	b.n	8003f20 <_svfiprintf_r+0xd4>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	9305      	str	r3, [sp, #20]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f04f 0c0a 	mov.w	ip, #10
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe6:	3a30      	subs	r2, #48	; 0x30
 8003fe8:	2a09      	cmp	r2, #9
 8003fea:	d903      	bls.n	8003ff4 <_svfiprintf_r+0x1a8>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0c5      	beq.n	8003f7c <_svfiprintf_r+0x130>
 8003ff0:	9105      	str	r1, [sp, #20]
 8003ff2:	e7c3      	b.n	8003f7c <_svfiprintf_r+0x130>
 8003ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e7f0      	b.n	8003fe0 <_svfiprintf_r+0x194>
 8003ffe:	ab03      	add	r3, sp, #12
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	462a      	mov	r2, r5
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <_svfiprintf_r+0x1f8>)
 8004006:	a904      	add	r1, sp, #16
 8004008:	4638      	mov	r0, r7
 800400a:	f3af 8000 	nop.w
 800400e:	1c42      	adds	r2, r0, #1
 8004010:	4606      	mov	r6, r0
 8004012:	d1d6      	bne.n	8003fc2 <_svfiprintf_r+0x176>
 8004014:	89ab      	ldrh	r3, [r5, #12]
 8004016:	065b      	lsls	r3, r3, #25
 8004018:	f53f af2c 	bmi.w	8003e74 <_svfiprintf_r+0x28>
 800401c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800401e:	b01d      	add	sp, #116	; 0x74
 8004020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004024:	ab03      	add	r3, sp, #12
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	462a      	mov	r2, r5
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <_svfiprintf_r+0x1f8>)
 800402c:	a904      	add	r1, sp, #16
 800402e:	4638      	mov	r0, r7
 8004030:	f000 f87a 	bl	8004128 <_printf_i>
 8004034:	e7eb      	b.n	800400e <_svfiprintf_r+0x1c2>
 8004036:	bf00      	nop
 8004038:	08004be2 	.word	0x08004be2
 800403c:	08004bec 	.word	0x08004bec
 8004040:	00000000 	.word	0x00000000
 8004044:	08003d95 	.word	0x08003d95
 8004048:	08004be8 	.word	0x08004be8

0800404c <_printf_common>:
 800404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004050:	4616      	mov	r6, r2
 8004052:	4699      	mov	r9, r3
 8004054:	688a      	ldr	r2, [r1, #8]
 8004056:	690b      	ldr	r3, [r1, #16]
 8004058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800405c:	4293      	cmp	r3, r2
 800405e:	bfb8      	it	lt
 8004060:	4613      	movlt	r3, r2
 8004062:	6033      	str	r3, [r6, #0]
 8004064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004068:	4607      	mov	r7, r0
 800406a:	460c      	mov	r4, r1
 800406c:	b10a      	cbz	r2, 8004072 <_printf_common+0x26>
 800406e:	3301      	adds	r3, #1
 8004070:	6033      	str	r3, [r6, #0]
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	0699      	lsls	r1, r3, #26
 8004076:	bf42      	ittt	mi
 8004078:	6833      	ldrmi	r3, [r6, #0]
 800407a:	3302      	addmi	r3, #2
 800407c:	6033      	strmi	r3, [r6, #0]
 800407e:	6825      	ldr	r5, [r4, #0]
 8004080:	f015 0506 	ands.w	r5, r5, #6
 8004084:	d106      	bne.n	8004094 <_printf_common+0x48>
 8004086:	f104 0a19 	add.w	sl, r4, #25
 800408a:	68e3      	ldr	r3, [r4, #12]
 800408c:	6832      	ldr	r2, [r6, #0]
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	42ab      	cmp	r3, r5
 8004092:	dc26      	bgt.n	80040e2 <_printf_common+0x96>
 8004094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004098:	1e13      	subs	r3, r2, #0
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	bf18      	it	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	0692      	lsls	r2, r2, #26
 80040a2:	d42b      	bmi.n	80040fc <_printf_common+0xb0>
 80040a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040a8:	4649      	mov	r1, r9
 80040aa:	4638      	mov	r0, r7
 80040ac:	47c0      	blx	r8
 80040ae:	3001      	adds	r0, #1
 80040b0:	d01e      	beq.n	80040f0 <_printf_common+0xa4>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	68e5      	ldr	r5, [r4, #12]
 80040b6:	6832      	ldr	r2, [r6, #0]
 80040b8:	f003 0306 	and.w	r3, r3, #6
 80040bc:	2b04      	cmp	r3, #4
 80040be:	bf08      	it	eq
 80040c0:	1aad      	subeq	r5, r5, r2
 80040c2:	68a3      	ldr	r3, [r4, #8]
 80040c4:	6922      	ldr	r2, [r4, #16]
 80040c6:	bf0c      	ite	eq
 80040c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040cc:	2500      	movne	r5, #0
 80040ce:	4293      	cmp	r3, r2
 80040d0:	bfc4      	itt	gt
 80040d2:	1a9b      	subgt	r3, r3, r2
 80040d4:	18ed      	addgt	r5, r5, r3
 80040d6:	2600      	movs	r6, #0
 80040d8:	341a      	adds	r4, #26
 80040da:	42b5      	cmp	r5, r6
 80040dc:	d11a      	bne.n	8004114 <_printf_common+0xc8>
 80040de:	2000      	movs	r0, #0
 80040e0:	e008      	b.n	80040f4 <_printf_common+0xa8>
 80040e2:	2301      	movs	r3, #1
 80040e4:	4652      	mov	r2, sl
 80040e6:	4649      	mov	r1, r9
 80040e8:	4638      	mov	r0, r7
 80040ea:	47c0      	blx	r8
 80040ec:	3001      	adds	r0, #1
 80040ee:	d103      	bne.n	80040f8 <_printf_common+0xac>
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f8:	3501      	adds	r5, #1
 80040fa:	e7c6      	b.n	800408a <_printf_common+0x3e>
 80040fc:	18e1      	adds	r1, r4, r3
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	2030      	movs	r0, #48	; 0x30
 8004102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004106:	4422      	add	r2, r4
 8004108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800410c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004110:	3302      	adds	r3, #2
 8004112:	e7c7      	b.n	80040a4 <_printf_common+0x58>
 8004114:	2301      	movs	r3, #1
 8004116:	4622      	mov	r2, r4
 8004118:	4649      	mov	r1, r9
 800411a:	4638      	mov	r0, r7
 800411c:	47c0      	blx	r8
 800411e:	3001      	adds	r0, #1
 8004120:	d0e6      	beq.n	80040f0 <_printf_common+0xa4>
 8004122:	3601      	adds	r6, #1
 8004124:	e7d9      	b.n	80040da <_printf_common+0x8e>
	...

08004128 <_printf_i>:
 8004128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800412c:	7e0f      	ldrb	r7, [r1, #24]
 800412e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004130:	2f78      	cmp	r7, #120	; 0x78
 8004132:	4691      	mov	r9, r2
 8004134:	4680      	mov	r8, r0
 8004136:	460c      	mov	r4, r1
 8004138:	469a      	mov	sl, r3
 800413a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800413e:	d807      	bhi.n	8004150 <_printf_i+0x28>
 8004140:	2f62      	cmp	r7, #98	; 0x62
 8004142:	d80a      	bhi.n	800415a <_printf_i+0x32>
 8004144:	2f00      	cmp	r7, #0
 8004146:	f000 80d8 	beq.w	80042fa <_printf_i+0x1d2>
 800414a:	2f58      	cmp	r7, #88	; 0x58
 800414c:	f000 80a3 	beq.w	8004296 <_printf_i+0x16e>
 8004150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004158:	e03a      	b.n	80041d0 <_printf_i+0xa8>
 800415a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800415e:	2b15      	cmp	r3, #21
 8004160:	d8f6      	bhi.n	8004150 <_printf_i+0x28>
 8004162:	a101      	add	r1, pc, #4	; (adr r1, 8004168 <_printf_i+0x40>)
 8004164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004168:	080041c1 	.word	0x080041c1
 800416c:	080041d5 	.word	0x080041d5
 8004170:	08004151 	.word	0x08004151
 8004174:	08004151 	.word	0x08004151
 8004178:	08004151 	.word	0x08004151
 800417c:	08004151 	.word	0x08004151
 8004180:	080041d5 	.word	0x080041d5
 8004184:	08004151 	.word	0x08004151
 8004188:	08004151 	.word	0x08004151
 800418c:	08004151 	.word	0x08004151
 8004190:	08004151 	.word	0x08004151
 8004194:	080042e1 	.word	0x080042e1
 8004198:	08004205 	.word	0x08004205
 800419c:	080042c3 	.word	0x080042c3
 80041a0:	08004151 	.word	0x08004151
 80041a4:	08004151 	.word	0x08004151
 80041a8:	08004303 	.word	0x08004303
 80041ac:	08004151 	.word	0x08004151
 80041b0:	08004205 	.word	0x08004205
 80041b4:	08004151 	.word	0x08004151
 80041b8:	08004151 	.word	0x08004151
 80041bc:	080042cb 	.word	0x080042cb
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	602a      	str	r2, [r5, #0]
 80041c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0a3      	b.n	800431c <_printf_i+0x1f4>
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	6829      	ldr	r1, [r5, #0]
 80041d8:	0606      	lsls	r6, r0, #24
 80041da:	f101 0304 	add.w	r3, r1, #4
 80041de:	d50a      	bpl.n	80041f6 <_printf_i+0xce>
 80041e0:	680e      	ldr	r6, [r1, #0]
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	2e00      	cmp	r6, #0
 80041e6:	da03      	bge.n	80041f0 <_printf_i+0xc8>
 80041e8:	232d      	movs	r3, #45	; 0x2d
 80041ea:	4276      	negs	r6, r6
 80041ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041f0:	485e      	ldr	r0, [pc, #376]	; (800436c <_printf_i+0x244>)
 80041f2:	230a      	movs	r3, #10
 80041f4:	e019      	b.n	800422a <_printf_i+0x102>
 80041f6:	680e      	ldr	r6, [r1, #0]
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041fe:	bf18      	it	ne
 8004200:	b236      	sxthne	r6, r6
 8004202:	e7ef      	b.n	80041e4 <_printf_i+0xbc>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	1d19      	adds	r1, r3, #4
 800420a:	6029      	str	r1, [r5, #0]
 800420c:	0601      	lsls	r1, r0, #24
 800420e:	d501      	bpl.n	8004214 <_printf_i+0xec>
 8004210:	681e      	ldr	r6, [r3, #0]
 8004212:	e002      	b.n	800421a <_printf_i+0xf2>
 8004214:	0646      	lsls	r6, r0, #25
 8004216:	d5fb      	bpl.n	8004210 <_printf_i+0xe8>
 8004218:	881e      	ldrh	r6, [r3, #0]
 800421a:	4854      	ldr	r0, [pc, #336]	; (800436c <_printf_i+0x244>)
 800421c:	2f6f      	cmp	r7, #111	; 0x6f
 800421e:	bf0c      	ite	eq
 8004220:	2308      	moveq	r3, #8
 8004222:	230a      	movne	r3, #10
 8004224:	2100      	movs	r1, #0
 8004226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800422a:	6865      	ldr	r5, [r4, #4]
 800422c:	60a5      	str	r5, [r4, #8]
 800422e:	2d00      	cmp	r5, #0
 8004230:	bfa2      	ittt	ge
 8004232:	6821      	ldrge	r1, [r4, #0]
 8004234:	f021 0104 	bicge.w	r1, r1, #4
 8004238:	6021      	strge	r1, [r4, #0]
 800423a:	b90e      	cbnz	r6, 8004240 <_printf_i+0x118>
 800423c:	2d00      	cmp	r5, #0
 800423e:	d04d      	beq.n	80042dc <_printf_i+0x1b4>
 8004240:	4615      	mov	r5, r2
 8004242:	fbb6 f1f3 	udiv	r1, r6, r3
 8004246:	fb03 6711 	mls	r7, r3, r1, r6
 800424a:	5dc7      	ldrb	r7, [r0, r7]
 800424c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004250:	4637      	mov	r7, r6
 8004252:	42bb      	cmp	r3, r7
 8004254:	460e      	mov	r6, r1
 8004256:	d9f4      	bls.n	8004242 <_printf_i+0x11a>
 8004258:	2b08      	cmp	r3, #8
 800425a:	d10b      	bne.n	8004274 <_printf_i+0x14c>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	07de      	lsls	r6, r3, #31
 8004260:	d508      	bpl.n	8004274 <_printf_i+0x14c>
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	6861      	ldr	r1, [r4, #4]
 8004266:	4299      	cmp	r1, r3
 8004268:	bfde      	ittt	le
 800426a:	2330      	movle	r3, #48	; 0x30
 800426c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004270:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004274:	1b52      	subs	r2, r2, r5
 8004276:	6122      	str	r2, [r4, #16]
 8004278:	f8cd a000 	str.w	sl, [sp]
 800427c:	464b      	mov	r3, r9
 800427e:	aa03      	add	r2, sp, #12
 8004280:	4621      	mov	r1, r4
 8004282:	4640      	mov	r0, r8
 8004284:	f7ff fee2 	bl	800404c <_printf_common>
 8004288:	3001      	adds	r0, #1
 800428a:	d14c      	bne.n	8004326 <_printf_i+0x1fe>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	b004      	add	sp, #16
 8004292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004296:	4835      	ldr	r0, [pc, #212]	; (800436c <_printf_i+0x244>)
 8004298:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800429c:	6829      	ldr	r1, [r5, #0]
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80042a4:	6029      	str	r1, [r5, #0]
 80042a6:	061d      	lsls	r5, r3, #24
 80042a8:	d514      	bpl.n	80042d4 <_printf_i+0x1ac>
 80042aa:	07df      	lsls	r7, r3, #31
 80042ac:	bf44      	itt	mi
 80042ae:	f043 0320 	orrmi.w	r3, r3, #32
 80042b2:	6023      	strmi	r3, [r4, #0]
 80042b4:	b91e      	cbnz	r6, 80042be <_printf_i+0x196>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	f023 0320 	bic.w	r3, r3, #32
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	2310      	movs	r3, #16
 80042c0:	e7b0      	b.n	8004224 <_printf_i+0xfc>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	f043 0320 	orr.w	r3, r3, #32
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	2378      	movs	r3, #120	; 0x78
 80042cc:	4828      	ldr	r0, [pc, #160]	; (8004370 <_printf_i+0x248>)
 80042ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042d2:	e7e3      	b.n	800429c <_printf_i+0x174>
 80042d4:	0659      	lsls	r1, r3, #25
 80042d6:	bf48      	it	mi
 80042d8:	b2b6      	uxthmi	r6, r6
 80042da:	e7e6      	b.n	80042aa <_printf_i+0x182>
 80042dc:	4615      	mov	r5, r2
 80042de:	e7bb      	b.n	8004258 <_printf_i+0x130>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	6826      	ldr	r6, [r4, #0]
 80042e4:	6961      	ldr	r1, [r4, #20]
 80042e6:	1d18      	adds	r0, r3, #4
 80042e8:	6028      	str	r0, [r5, #0]
 80042ea:	0635      	lsls	r5, r6, #24
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	d501      	bpl.n	80042f4 <_printf_i+0x1cc>
 80042f0:	6019      	str	r1, [r3, #0]
 80042f2:	e002      	b.n	80042fa <_printf_i+0x1d2>
 80042f4:	0670      	lsls	r0, r6, #25
 80042f6:	d5fb      	bpl.n	80042f0 <_printf_i+0x1c8>
 80042f8:	8019      	strh	r1, [r3, #0]
 80042fa:	2300      	movs	r3, #0
 80042fc:	6123      	str	r3, [r4, #16]
 80042fe:	4615      	mov	r5, r2
 8004300:	e7ba      	b.n	8004278 <_printf_i+0x150>
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	1d1a      	adds	r2, r3, #4
 8004306:	602a      	str	r2, [r5, #0]
 8004308:	681d      	ldr	r5, [r3, #0]
 800430a:	6862      	ldr	r2, [r4, #4]
 800430c:	2100      	movs	r1, #0
 800430e:	4628      	mov	r0, r5
 8004310:	f7fb ff66 	bl	80001e0 <memchr>
 8004314:	b108      	cbz	r0, 800431a <_printf_i+0x1f2>
 8004316:	1b40      	subs	r0, r0, r5
 8004318:	6060      	str	r0, [r4, #4]
 800431a:	6863      	ldr	r3, [r4, #4]
 800431c:	6123      	str	r3, [r4, #16]
 800431e:	2300      	movs	r3, #0
 8004320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004324:	e7a8      	b.n	8004278 <_printf_i+0x150>
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	462a      	mov	r2, r5
 800432a:	4649      	mov	r1, r9
 800432c:	4640      	mov	r0, r8
 800432e:	47d0      	blx	sl
 8004330:	3001      	adds	r0, #1
 8004332:	d0ab      	beq.n	800428c <_printf_i+0x164>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	079b      	lsls	r3, r3, #30
 8004338:	d413      	bmi.n	8004362 <_printf_i+0x23a>
 800433a:	68e0      	ldr	r0, [r4, #12]
 800433c:	9b03      	ldr	r3, [sp, #12]
 800433e:	4298      	cmp	r0, r3
 8004340:	bfb8      	it	lt
 8004342:	4618      	movlt	r0, r3
 8004344:	e7a4      	b.n	8004290 <_printf_i+0x168>
 8004346:	2301      	movs	r3, #1
 8004348:	4632      	mov	r2, r6
 800434a:	4649      	mov	r1, r9
 800434c:	4640      	mov	r0, r8
 800434e:	47d0      	blx	sl
 8004350:	3001      	adds	r0, #1
 8004352:	d09b      	beq.n	800428c <_printf_i+0x164>
 8004354:	3501      	adds	r5, #1
 8004356:	68e3      	ldr	r3, [r4, #12]
 8004358:	9903      	ldr	r1, [sp, #12]
 800435a:	1a5b      	subs	r3, r3, r1
 800435c:	42ab      	cmp	r3, r5
 800435e:	dcf2      	bgt.n	8004346 <_printf_i+0x21e>
 8004360:	e7eb      	b.n	800433a <_printf_i+0x212>
 8004362:	2500      	movs	r5, #0
 8004364:	f104 0619 	add.w	r6, r4, #25
 8004368:	e7f5      	b.n	8004356 <_printf_i+0x22e>
 800436a:	bf00      	nop
 800436c:	08004bf3 	.word	0x08004bf3
 8004370:	08004c04 	.word	0x08004c04

08004374 <memcpy>:
 8004374:	440a      	add	r2, r1
 8004376:	4291      	cmp	r1, r2
 8004378:	f100 33ff 	add.w	r3, r0, #4294967295
 800437c:	d100      	bne.n	8004380 <memcpy+0xc>
 800437e:	4770      	bx	lr
 8004380:	b510      	push	{r4, lr}
 8004382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800438a:	4291      	cmp	r1, r2
 800438c:	d1f9      	bne.n	8004382 <memcpy+0xe>
 800438e:	bd10      	pop	{r4, pc}

08004390 <memmove>:
 8004390:	4288      	cmp	r0, r1
 8004392:	b510      	push	{r4, lr}
 8004394:	eb01 0402 	add.w	r4, r1, r2
 8004398:	d902      	bls.n	80043a0 <memmove+0x10>
 800439a:	4284      	cmp	r4, r0
 800439c:	4623      	mov	r3, r4
 800439e:	d807      	bhi.n	80043b0 <memmove+0x20>
 80043a0:	1e43      	subs	r3, r0, #1
 80043a2:	42a1      	cmp	r1, r4
 80043a4:	d008      	beq.n	80043b8 <memmove+0x28>
 80043a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043ae:	e7f8      	b.n	80043a2 <memmove+0x12>
 80043b0:	4402      	add	r2, r0
 80043b2:	4601      	mov	r1, r0
 80043b4:	428a      	cmp	r2, r1
 80043b6:	d100      	bne.n	80043ba <memmove+0x2a>
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043c2:	e7f7      	b.n	80043b4 <memmove+0x24>

080043c4 <_free_r>:
 80043c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043c6:	2900      	cmp	r1, #0
 80043c8:	d044      	beq.n	8004454 <_free_r+0x90>
 80043ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ce:	9001      	str	r0, [sp, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f1a1 0404 	sub.w	r4, r1, #4
 80043d6:	bfb8      	it	lt
 80043d8:	18e4      	addlt	r4, r4, r3
 80043da:	f000 f913 	bl	8004604 <__malloc_lock>
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <_free_r+0x94>)
 80043e0:	9801      	ldr	r0, [sp, #4]
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	b933      	cbnz	r3, 80043f4 <_free_r+0x30>
 80043e6:	6063      	str	r3, [r4, #4]
 80043e8:	6014      	str	r4, [r2, #0]
 80043ea:	b003      	add	sp, #12
 80043ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043f0:	f000 b90e 	b.w	8004610 <__malloc_unlock>
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d908      	bls.n	800440a <_free_r+0x46>
 80043f8:	6825      	ldr	r5, [r4, #0]
 80043fa:	1961      	adds	r1, r4, r5
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf01      	itttt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	1949      	addeq	r1, r1, r5
 8004406:	6021      	streq	r1, [r4, #0]
 8004408:	e7ed      	b.n	80043e6 <_free_r+0x22>
 800440a:	461a      	mov	r2, r3
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b10b      	cbz	r3, 8004414 <_free_r+0x50>
 8004410:	42a3      	cmp	r3, r4
 8004412:	d9fa      	bls.n	800440a <_free_r+0x46>
 8004414:	6811      	ldr	r1, [r2, #0]
 8004416:	1855      	adds	r5, r2, r1
 8004418:	42a5      	cmp	r5, r4
 800441a:	d10b      	bne.n	8004434 <_free_r+0x70>
 800441c:	6824      	ldr	r4, [r4, #0]
 800441e:	4421      	add	r1, r4
 8004420:	1854      	adds	r4, r2, r1
 8004422:	42a3      	cmp	r3, r4
 8004424:	6011      	str	r1, [r2, #0]
 8004426:	d1e0      	bne.n	80043ea <_free_r+0x26>
 8004428:	681c      	ldr	r4, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	6053      	str	r3, [r2, #4]
 800442e:	4421      	add	r1, r4
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	e7da      	b.n	80043ea <_free_r+0x26>
 8004434:	d902      	bls.n	800443c <_free_r+0x78>
 8004436:	230c      	movs	r3, #12
 8004438:	6003      	str	r3, [r0, #0]
 800443a:	e7d6      	b.n	80043ea <_free_r+0x26>
 800443c:	6825      	ldr	r5, [r4, #0]
 800443e:	1961      	adds	r1, r4, r5
 8004440:	428b      	cmp	r3, r1
 8004442:	bf04      	itt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	6063      	str	r3, [r4, #4]
 800444a:	bf04      	itt	eq
 800444c:	1949      	addeq	r1, r1, r5
 800444e:	6021      	streq	r1, [r4, #0]
 8004450:	6054      	str	r4, [r2, #4]
 8004452:	e7ca      	b.n	80043ea <_free_r+0x26>
 8004454:	b003      	add	sp, #12
 8004456:	bd30      	pop	{r4, r5, pc}
 8004458:	2001ab08 	.word	0x2001ab08

0800445c <sbrk_aligned>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	4e0e      	ldr	r6, [pc, #56]	; (8004498 <sbrk_aligned+0x3c>)
 8004460:	460c      	mov	r4, r1
 8004462:	6831      	ldr	r1, [r6, #0]
 8004464:	4605      	mov	r5, r0
 8004466:	b911      	cbnz	r1, 800446e <sbrk_aligned+0x12>
 8004468:	f000 f8bc 	bl	80045e4 <_sbrk_r>
 800446c:	6030      	str	r0, [r6, #0]
 800446e:	4621      	mov	r1, r4
 8004470:	4628      	mov	r0, r5
 8004472:	f000 f8b7 	bl	80045e4 <_sbrk_r>
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	d00a      	beq.n	8004490 <sbrk_aligned+0x34>
 800447a:	1cc4      	adds	r4, r0, #3
 800447c:	f024 0403 	bic.w	r4, r4, #3
 8004480:	42a0      	cmp	r0, r4
 8004482:	d007      	beq.n	8004494 <sbrk_aligned+0x38>
 8004484:	1a21      	subs	r1, r4, r0
 8004486:	4628      	mov	r0, r5
 8004488:	f000 f8ac 	bl	80045e4 <_sbrk_r>
 800448c:	3001      	adds	r0, #1
 800448e:	d101      	bne.n	8004494 <sbrk_aligned+0x38>
 8004490:	f04f 34ff 	mov.w	r4, #4294967295
 8004494:	4620      	mov	r0, r4
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	2001ab0c 	.word	0x2001ab0c

0800449c <_malloc_r>:
 800449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	1ccd      	adds	r5, r1, #3
 80044a2:	f025 0503 	bic.w	r5, r5, #3
 80044a6:	3508      	adds	r5, #8
 80044a8:	2d0c      	cmp	r5, #12
 80044aa:	bf38      	it	cc
 80044ac:	250c      	movcc	r5, #12
 80044ae:	2d00      	cmp	r5, #0
 80044b0:	4607      	mov	r7, r0
 80044b2:	db01      	blt.n	80044b8 <_malloc_r+0x1c>
 80044b4:	42a9      	cmp	r1, r5
 80044b6:	d905      	bls.n	80044c4 <_malloc_r+0x28>
 80044b8:	230c      	movs	r3, #12
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	2600      	movs	r6, #0
 80044be:	4630      	mov	r0, r6
 80044c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c4:	4e2e      	ldr	r6, [pc, #184]	; (8004580 <_malloc_r+0xe4>)
 80044c6:	f000 f89d 	bl	8004604 <__malloc_lock>
 80044ca:	6833      	ldr	r3, [r6, #0]
 80044cc:	461c      	mov	r4, r3
 80044ce:	bb34      	cbnz	r4, 800451e <_malloc_r+0x82>
 80044d0:	4629      	mov	r1, r5
 80044d2:	4638      	mov	r0, r7
 80044d4:	f7ff ffc2 	bl	800445c <sbrk_aligned>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	4604      	mov	r4, r0
 80044dc:	d14d      	bne.n	800457a <_malloc_r+0xde>
 80044de:	6834      	ldr	r4, [r6, #0]
 80044e0:	4626      	mov	r6, r4
 80044e2:	2e00      	cmp	r6, #0
 80044e4:	d140      	bne.n	8004568 <_malloc_r+0xcc>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	4631      	mov	r1, r6
 80044ea:	4638      	mov	r0, r7
 80044ec:	eb04 0803 	add.w	r8, r4, r3
 80044f0:	f000 f878 	bl	80045e4 <_sbrk_r>
 80044f4:	4580      	cmp	r8, r0
 80044f6:	d13a      	bne.n	800456e <_malloc_r+0xd2>
 80044f8:	6821      	ldr	r1, [r4, #0]
 80044fa:	3503      	adds	r5, #3
 80044fc:	1a6d      	subs	r5, r5, r1
 80044fe:	f025 0503 	bic.w	r5, r5, #3
 8004502:	3508      	adds	r5, #8
 8004504:	2d0c      	cmp	r5, #12
 8004506:	bf38      	it	cc
 8004508:	250c      	movcc	r5, #12
 800450a:	4629      	mov	r1, r5
 800450c:	4638      	mov	r0, r7
 800450e:	f7ff ffa5 	bl	800445c <sbrk_aligned>
 8004512:	3001      	adds	r0, #1
 8004514:	d02b      	beq.n	800456e <_malloc_r+0xd2>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	442b      	add	r3, r5
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	e00e      	b.n	800453c <_malloc_r+0xa0>
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	1b52      	subs	r2, r2, r5
 8004522:	d41e      	bmi.n	8004562 <_malloc_r+0xc6>
 8004524:	2a0b      	cmp	r2, #11
 8004526:	d916      	bls.n	8004556 <_malloc_r+0xba>
 8004528:	1961      	adds	r1, r4, r5
 800452a:	42a3      	cmp	r3, r4
 800452c:	6025      	str	r5, [r4, #0]
 800452e:	bf18      	it	ne
 8004530:	6059      	strne	r1, [r3, #4]
 8004532:	6863      	ldr	r3, [r4, #4]
 8004534:	bf08      	it	eq
 8004536:	6031      	streq	r1, [r6, #0]
 8004538:	5162      	str	r2, [r4, r5]
 800453a:	604b      	str	r3, [r1, #4]
 800453c:	4638      	mov	r0, r7
 800453e:	f104 060b 	add.w	r6, r4, #11
 8004542:	f000 f865 	bl	8004610 <__malloc_unlock>
 8004546:	f026 0607 	bic.w	r6, r6, #7
 800454a:	1d23      	adds	r3, r4, #4
 800454c:	1af2      	subs	r2, r6, r3
 800454e:	d0b6      	beq.n	80044be <_malloc_r+0x22>
 8004550:	1b9b      	subs	r3, r3, r6
 8004552:	50a3      	str	r3, [r4, r2]
 8004554:	e7b3      	b.n	80044be <_malloc_r+0x22>
 8004556:	6862      	ldr	r2, [r4, #4]
 8004558:	42a3      	cmp	r3, r4
 800455a:	bf0c      	ite	eq
 800455c:	6032      	streq	r2, [r6, #0]
 800455e:	605a      	strne	r2, [r3, #4]
 8004560:	e7ec      	b.n	800453c <_malloc_r+0xa0>
 8004562:	4623      	mov	r3, r4
 8004564:	6864      	ldr	r4, [r4, #4]
 8004566:	e7b2      	b.n	80044ce <_malloc_r+0x32>
 8004568:	4634      	mov	r4, r6
 800456a:	6876      	ldr	r6, [r6, #4]
 800456c:	e7b9      	b.n	80044e2 <_malloc_r+0x46>
 800456e:	230c      	movs	r3, #12
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4638      	mov	r0, r7
 8004574:	f000 f84c 	bl	8004610 <__malloc_unlock>
 8004578:	e7a1      	b.n	80044be <_malloc_r+0x22>
 800457a:	6025      	str	r5, [r4, #0]
 800457c:	e7de      	b.n	800453c <_malloc_r+0xa0>
 800457e:	bf00      	nop
 8004580:	2001ab08 	.word	0x2001ab08

08004584 <_realloc_r>:
 8004584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004588:	4680      	mov	r8, r0
 800458a:	4614      	mov	r4, r2
 800458c:	460e      	mov	r6, r1
 800458e:	b921      	cbnz	r1, 800459a <_realloc_r+0x16>
 8004590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004594:	4611      	mov	r1, r2
 8004596:	f7ff bf81 	b.w	800449c <_malloc_r>
 800459a:	b92a      	cbnz	r2, 80045a8 <_realloc_r+0x24>
 800459c:	f7ff ff12 	bl	80043c4 <_free_r>
 80045a0:	4625      	mov	r5, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a8:	f000 f838 	bl	800461c <_malloc_usable_size_r>
 80045ac:	4284      	cmp	r4, r0
 80045ae:	4607      	mov	r7, r0
 80045b0:	d802      	bhi.n	80045b8 <_realloc_r+0x34>
 80045b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045b6:	d812      	bhi.n	80045de <_realloc_r+0x5a>
 80045b8:	4621      	mov	r1, r4
 80045ba:	4640      	mov	r0, r8
 80045bc:	f7ff ff6e 	bl	800449c <_malloc_r>
 80045c0:	4605      	mov	r5, r0
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d0ed      	beq.n	80045a2 <_realloc_r+0x1e>
 80045c6:	42bc      	cmp	r4, r7
 80045c8:	4622      	mov	r2, r4
 80045ca:	4631      	mov	r1, r6
 80045cc:	bf28      	it	cs
 80045ce:	463a      	movcs	r2, r7
 80045d0:	f7ff fed0 	bl	8004374 <memcpy>
 80045d4:	4631      	mov	r1, r6
 80045d6:	4640      	mov	r0, r8
 80045d8:	f7ff fef4 	bl	80043c4 <_free_r>
 80045dc:	e7e1      	b.n	80045a2 <_realloc_r+0x1e>
 80045de:	4635      	mov	r5, r6
 80045e0:	e7df      	b.n	80045a2 <_realloc_r+0x1e>
	...

080045e4 <_sbrk_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d06      	ldr	r5, [pc, #24]	; (8004600 <_sbrk_r+0x1c>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	f7fc fd98 	bl	8001124 <_sbrk>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_sbrk_r+0x1a>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_sbrk_r+0x1a>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	2001ab10 	.word	0x2001ab10

08004604 <__malloc_lock>:
 8004604:	4801      	ldr	r0, [pc, #4]	; (800460c <__malloc_lock+0x8>)
 8004606:	f000 b811 	b.w	800462c <__retarget_lock_acquire_recursive>
 800460a:	bf00      	nop
 800460c:	2001ab14 	.word	0x2001ab14

08004610 <__malloc_unlock>:
 8004610:	4801      	ldr	r0, [pc, #4]	; (8004618 <__malloc_unlock+0x8>)
 8004612:	f000 b80c 	b.w	800462e <__retarget_lock_release_recursive>
 8004616:	bf00      	nop
 8004618:	2001ab14 	.word	0x2001ab14

0800461c <_malloc_usable_size_r>:
 800461c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004620:	1f18      	subs	r0, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfbc      	itt	lt
 8004626:	580b      	ldrlt	r3, [r1, r0]
 8004628:	18c0      	addlt	r0, r0, r3
 800462a:	4770      	bx	lr

0800462c <__retarget_lock_acquire_recursive>:
 800462c:	4770      	bx	lr

0800462e <__retarget_lock_release_recursive>:
 800462e:	4770      	bx	lr

08004630 <_init>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	bf00      	nop
 8004634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004636:	bc08      	pop	{r3}
 8004638:	469e      	mov	lr, r3
 800463a:	4770      	bx	lr

0800463c <_fini>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr
